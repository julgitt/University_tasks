
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000286  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000007a4  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ec0  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001974  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
   4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
   8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
   c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	f4 01       	movw	r30, r8
  6a:	fa 00       	.word	0x00fa	; ????
  6c:	fa 00       	.word	0x00fa	; ????
  6e:	fa 00       	.word	0x00fa	; ????
  70:	fa 00       	.word	0x00fa	; ????
  72:	fa 00       	.word	0x00fa	; ????
  74:	fa 00       	.word	0x00fa	; ????
  76:	fa 00       	.word	0x00fa	; ????
  78:	f4 01       	movw	r30, r8
  7a:	fa 00       	.word	0x00fa	; ????
  7c:	fa 00       	.word	0x00fa	; ????
  7e:	fa 00       	.word	0x00fa	; ????
  80:	fa 00       	.word	0x00fa	; ????
  82:	fa 00       	.word	0x00fa	; ????
  84:	fa 00       	.word	0x00fa	; ????
  86:	fa 00       	.word	0x00fa	; ????
  88:	fa 00       	.word	0x00fa	; ????
  8a:	fa 00       	.word	0x00fa	; ????
  8c:	fa 00       	.word	0x00fa	; ????
  8e:	fa 00       	.word	0x00fa	; ????
  90:	fa 00       	.word	0x00fa	; ????
  92:	fa 00       	.word	0x00fa	; ????
  94:	fa 00       	.word	0x00fa	; ????
  96:	f4 01       	movw	r30, r8
  98:	fa 00       	.word	0x00fa	; ????
  9a:	fa 00       	.word	0x00fa	; ????
  9c:	fa 00       	.word	0x00fa	; ????
  9e:	fa 00       	.word	0x00fa	; ????
  a0:	fa 00       	.word	0x00fa	; ????
  a2:	fa 00       	.word	0x00fa	; ????
  a4:	fa 00       	.word	0x00fa	; ????
  a6:	fa 00       	.word	0x00fa	; ????
  a8:	fa 00       	.word	0x00fa	; ????
  aa:	fa 00       	.word	0x00fa	; ????
  ac:	fa 00       	.word	0x00fa	; ????
  ae:	fa 00       	.word	0x00fa	; ????
  b0:	fa 00       	.word	0x00fa	; ????
  b2:	fa 00       	.word	0x00fa	; ????
  b4:	f4 01       	movw	r30, r8
  b6:	fa 00       	.word	0x00fa	; ????
  b8:	fa 00       	.word	0x00fa	; ????
  ba:	fa 00       	.word	0x00fa	; ????
  bc:	fa 00       	.word	0x00fa	; ????
  be:	fa 00       	.word	0x00fa	; ????
  c0:	fa 00       	.word	0x00fa	; ????
  c2:	fa 00       	.word	0x00fa	; ????
  c4:	fa 00       	.word	0x00fa	; ????
  c6:	fa 00       	.word	0x00fa	; ????
  c8:	fa 00       	.word	0x00fa	; ????
  ca:	fa 00       	.word	0x00fa	; ????
  cc:	fa 00       	.word	0x00fa	; ????
  ce:	fa 00       	.word	0x00fa	; ????
  d0:	fa 00       	.word	0x00fa	; ????
  d2:	e8 03       	fmulsu	r22, r16
  d4:	f4 01       	movw	r30, r8
  d6:	fa 00       	.word	0x00fa	; ????

000000d8 <steps.1966>:
  d8:	fa 01 de 01 f7 02 7e 02 de 01 aa 01 7e 02 fa 01     ......~.....~...
  e8:	de 01 38 02 de 01 7b 01 66 01 38 02 7b 01 aa 01     ..8...{.f.8.{...
  f8:	de 01 f7 02 7e 02 de 01 aa 01 7e 02 fa 01 de 01     ....~.....~.....
 108:	38 02 de 01 7b 01 66 01 38 02 7b 01 aa 01 de 01     8...{.f.8.{.....
 118:	f7 02 7e 02 de 01 aa 01 7e 02 fa 01 de 01 38 02     ..~.....~.....8.
 128:	de 01 7b 01 66 01 38 02 7b 01 aa 01 de 01 f7 02     ..{.f.8.{.......
 138:	7e 02 de 01 fa 01 f7 02 7e 02 38 02 38 02 38 02     ~.......~.8.8.8.

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	d8 e0       	ldi	r29, 0x08	; 8
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61
 154:	0e 94 be 00 	call	0x17c	; 0x17c <main>
 158:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000015c <__bad_interrupt>:
 15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <my_delay>:
#define A6 284
#define B6 253
#define PAUSE 0

void my_delay(uint16_t t){
  for (uint16_t i = 0; i < t; i++){
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	59 f0       	breq	.+22     	; 0x17a <my_delay+0x1a>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	45 e0       	ldi	r20, 0x05	; 5
 16a:	4a 95       	dec	r20
 16c:	f1 f7       	brne	.-4      	; 0x16a <my_delay+0xa>
 16e:	00 00       	nop
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	82 17       	cp	r24, r18
 176:	93 07       	cpc	r25, r19
 178:	b9 f7       	brne	.-18     	; 0x168 <my_delay+0x8>
 17a:	08 95       	ret

0000017c <main>:
      BUZZ_PORT &= ~_BV(BUZZ); \
      my_delay(step); \
    }

int main() {
  BUZZ_DDR |= _BV(BUZZ);
 17c:	25 9a       	sbi	0x04, 5	; 4
 17e:	08 ed       	ldi	r16, 0xD8	; 216
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	98 e6       	ldi	r25, 0x68	; 104
 184:	e9 2e       	mov	r14, r25
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	f9 2e       	mov	r15, r25
 
  uint16_t s;
  uint16_t t;
  while (1) {
    for (uint16_t j = 0; j < 56; j++) {
      s = pgm_read_word_near(steps + j);
 18a:	f8 01       	movw	r30, r16
 18c:	c5 91       	lpm	r28, Z+
 18e:	d4 91       	lpm	r29, Z
      t = pgm_read_word_near(delays + j);
 190:	f7 01       	movw	r30, r14
 192:	25 91       	lpm	r18, Z+
 194:	34 91       	lpm	r19, Z
      TONE(s,t);
 196:	a8 ee       	ldi	r26, 0xE8	; 232
 198:	b3 e0       	ldi	r27, 0x03	; 3
 19a:	0e 94 32 01 	call	0x264	; 0x264 <__umulhisi3>
 19e:	9e 01       	movw	r18, r28
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	0e 94 10 01 	call	0x220	; 0x220 <__udivmodsi4>
 1a8:	49 01       	movw	r8, r18
 1aa:	5a 01       	movw	r10, r20
 1ac:	b6 94       	lsr	r11
 1ae:	a7 94       	ror	r10
 1b0:	97 94       	ror	r9
 1b2:	87 94       	ror	r8
 1b4:	81 14       	cp	r8, r1
 1b6:	91 04       	cpc	r9, r1
 1b8:	a1 04       	cpc	r10, r1
 1ba:	b1 04       	cpc	r11, r1
 1bc:	21 f1       	breq	.+72     	; 0x206 <main+0x8a>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	2d 9a       	sbi	0x05, 5	; 5
#define A6 284
#define B6 253
#define PAUSE 0

void my_delay(uint16_t t){
  for (uint16_t i = 0; i < t; i++){
 1c4:	20 97       	sbiw	r28, 0x00	; 0
 1c6:	51 f1       	breq	.+84     	; 0x21c <main+0xa0>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	25 e0       	ldi	r18, 0x05	; 5
 1ce:	2a 95       	dec	r18
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x52>
 1d2:	00 00       	nop
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	c8 17       	cp	r28, r24
 1d8:	d9 07       	cpc	r29, r25
 1da:	c1 f7       	brne	.-16     	; 0x1cc <main+0x50>
  uint16_t t;
  while (1) {
    for (uint16_t j = 0; j < 56; j++) {
      s = pgm_read_word_near(steps + j);
      t = pgm_read_word_near(delays + j);
      TONE(s,t);
 1dc:	2d 98       	cbi	0x05, 5	; 5
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	25 e0       	ldi	r18, 0x05	; 5
 1e4:	2a 95       	dec	r18
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x68>
 1e8:	00 00       	nop
#define A6 284
#define B6 253
#define PAUSE 0

void my_delay(uint16_t t){
  for (uint16_t i = 0; i < t; i++){
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	c8 17       	cp	r28, r24
 1ee:	d9 07       	cpc	r29, r25
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <main+0x66>
  uint16_t t;
  while (1) {
    for (uint16_t j = 0; j < 56; j++) {
      s = pgm_read_word_near(steps + j);
      t = pgm_read_word_near(delays + j);
      TONE(s,t);
 1f2:	4f 5f       	subi	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	ca 01       	movw	r24, r20
 1f8:	a0 e0       	ldi	r26, 0x00	; 0
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	88 15       	cp	r24, r8
 1fe:	99 05       	cpc	r25, r9
 200:	aa 05       	cpc	r26, r10
 202:	bb 05       	cpc	r27, r11
 204:	f0 f2       	brcs	.-68     	; 0x1c2 <main+0x46>
 206:	0e 5f       	subi	r16, 0xFE	; 254
 208:	1f 4f       	sbci	r17, 0xFF	; 255
 20a:	22 e0       	ldi	r18, 0x02	; 2
 20c:	e2 0e       	add	r14, r18
 20e:	f1 1c       	adc	r15, r1
                                        QUARTER_NOTE, QUARTER_NOTE, NOTE, HALF_NOTE, QUARTER_NOTE};
 
  uint16_t s;
  uint16_t t;
  while (1) {
    for (uint16_t j = 0; j < 56; j++) {
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	08 34       	cpi	r16, 0x48	; 72
 214:	18 07       	cpc	r17, r24
 216:	09 f0       	breq	.+2      	; 0x21a <main+0x9e>
 218:	b8 cf       	rjmp	.-144    	; 0x18a <main+0xe>
 21a:	b1 cf       	rjmp	.-158    	; 0x17e <main+0x2>
      s = pgm_read_word_near(steps + j);
      t = pgm_read_word_near(delays + j);
      TONE(s,t);
 21c:	2d 98       	cbi	0x05, 5	; 5
 21e:	e9 cf       	rjmp	.-46     	; 0x1f2 <main+0x76>

00000220 <__udivmodsi4>:
 220:	a1 e2       	ldi	r26, 0x21	; 33
 222:	1a 2e       	mov	r1, r26
 224:	aa 1b       	sub	r26, r26
 226:	bb 1b       	sub	r27, r27
 228:	fd 01       	movw	r30, r26
 22a:	0d c0       	rjmp	.+26     	; 0x246 <__udivmodsi4_ep>

0000022c <__udivmodsi4_loop>:
 22c:	aa 1f       	adc	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	ee 1f       	adc	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	a2 17       	cp	r26, r18
 236:	b3 07       	cpc	r27, r19
 238:	e4 07       	cpc	r30, r20
 23a:	f5 07       	cpc	r31, r21
 23c:	20 f0       	brcs	.+8      	; 0x246 <__udivmodsi4_ep>
 23e:	a2 1b       	sub	r26, r18
 240:	b3 0b       	sbc	r27, r19
 242:	e4 0b       	sbc	r30, r20
 244:	f5 0b       	sbc	r31, r21

00000246 <__udivmodsi4_ep>:
 246:	66 1f       	adc	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	1a 94       	dec	r1
 250:	69 f7       	brne	.-38     	; 0x22c <__udivmodsi4_loop>
 252:	60 95       	com	r22
 254:	70 95       	com	r23
 256:	80 95       	com	r24
 258:	90 95       	com	r25
 25a:	9b 01       	movw	r18, r22
 25c:	ac 01       	movw	r20, r24
 25e:	bd 01       	movw	r22, r26
 260:	cf 01       	movw	r24, r30
 262:	08 95       	ret

00000264 <__umulhisi3>:
 264:	a2 9f       	mul	r26, r18
 266:	b0 01       	movw	r22, r0
 268:	b3 9f       	mul	r27, r19
 26a:	c0 01       	movw	r24, r0
 26c:	a3 9f       	mul	r26, r19
 26e:	70 0d       	add	r23, r0
 270:	81 1d       	adc	r24, r1
 272:	11 24       	eor	r1, r1
 274:	91 1d       	adc	r25, r1
 276:	b2 9f       	mul	r27, r18
 278:	70 0d       	add	r23, r0
 27a:	81 1d       	adc	r24, r1
 27c:	11 24       	eor	r1, r1
 27e:	91 1d       	adc	r25, r1
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
