
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006f0  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e46  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer1_init>:
void timer1_init() {
  // No prescaler
  // ICR1 = 211
  // TOP = 212
  // f = 37914
  OCR1A = 421; // 16 mHz / (37,9 kHz - 26 ms okres) = 421
  80:	85 ea       	ldi	r24, 0xA5	; 165
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  88:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  OCR1B = 211; // nadajemy przez 600 ms nie nadajemy - 600 ms
  8c:	83 ed       	ldi	r24, 0xD3	; 211
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  94:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  TCCR1A = _BV(COM1B1) | _BV(WGM11) | _BV(WGM10);
  98:	83 e2       	ldi	r24, 0x23	; 35
  9a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(ICES1) | _BV(CS10);
  9e:	89 e5       	ldi	r24, 0x59	; 89
  a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  DDRB |= _BV(PB2);
  a4:	22 9a       	sbi	0x04, 2	; 4
  a6:	08 95       	ret

000000a8 <main>:
void timer1_init() {
  // No prescaler
  // ICR1 = 211
  // TOP = 212
  // f = 37914
  OCR1A = 421; // 16 mHz / (37,9 kHz - 26 ms okres) = 421
  a8:	85 ea       	ldi	r24, 0xA5	; 165
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  OCR1B = 211; // nadajemy przez 600 ms nie nadajemy - 600 ms
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  TCCR1A = _BV(COM1B1) | _BV(WGM11) | _BV(WGM10);
  c0:	83 e2       	ldi	r24, 0x23	; 35
  c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(ICES1) | _BV(CS10);
  c6:	89 e5       	ldi	r24, 0x59	; 89
  c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  DDRB |= _BV(PB2);
  cc:	22 9a       	sbi	0x04, 2	; 4
}

int main() {
  timer1_init();
  uint16_t x = ICR1;
  ce:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  d2:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  DDRB |= _BV(PB5);
  d6:	25 9a       	sbi	0x04, 5	; 4
  TCCR1A = _BV(COM1B1) | _BV(WGM11) | _BV(WGM10);
  TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(ICES1) | _BV(CS10);
  DDRB |= _BV(PB2);
}

int main() {
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	90 e0       	ldi	r25, 0x00	; 0
  uint16_t x = ICR1;
  DDRB |= _BV(PB5);
  while(1) {
    for (uint16_t i = 0; i < 6; i++) {
      
      PORTB &= ~_BV(PB5);
  dc:	2d 98       	cbi	0x05, 5	; 5
      if (x != ICR1) {
  de:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  e2:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e6:	24 17       	cp	r18, r20
  e8:	35 07       	cpc	r19, r21
  ea:	29 f0       	breq	.+10     	; 0xf6 <main+0x4e>
        PORTB |= _BV(PB5);
  ec:	2d 9a       	sbi	0x05, 5	; 5
        x = ICR1;
  ee:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  f2:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
      }
      DDRB |= _BV(PB2);
  f6:	22 9a       	sbi	0x04, 2	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	ef e5       	ldi	r30, 0x5F	; 95
  fa:	f9 e0       	ldi	r31, 0x09	; 9
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x54>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x5a>
 102:	00 00       	nop
      _delay_us(600);
      DDRB &= ~_BV(PB2);
 104:	22 98       	cbi	0x04, 2	; 4
 106:	ef e5       	ldi	r30, 0x5F	; 95
 108:	f9 e0       	ldi	r31, 0x09	; 9
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x62>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x68>
 110:	00 00       	nop
 112:	01 97       	sbiw	r24, 0x01	; 1
int main() {
  timer1_init();
  uint16_t x = ICR1;
  DDRB |= _BV(PB5);
  while(1) {
    for (uint16_t i = 0; i < 6; i++) {
 114:	19 f7       	brne	.-58     	; 0xdc <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	ff ef       	ldi	r31, 0xFF	; 255
 118:	21 ee       	ldi	r18, 0xE1	; 225
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	f1 50       	subi	r31, 0x01	; 1
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x74>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x7e>
 126:	00 00       	nop
 128:	d7 cf       	rjmp	.-82     	; 0xd8 <main+0x30>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
