
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a02  00000a76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000009f0  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011df  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000264b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00003232  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000324c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 20 01 	jmp	0x240	; 0x240 <__ctors_end>
   4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
   8:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
   c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  10:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  14:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  18:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  1c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  20:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  24:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  28:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  2c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  30:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  34:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  38:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  3c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  40:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  44:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  4c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  50:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  54:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  58:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  5c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  60:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>
  64:	0c 94 35 01 	jmp	0x26a	; 0x26a <__bad_interrupt>

00000068 <__trampolines_end>:
	...
  90:	00 00       	nop
  92:	01 00       	.word	0x0001	; ????
  94:	01 00       	.word	0x0001	; ????
  96:	01 00       	.word	0x0001	; ????
  98:	01 00       	.word	0x0001	; ????
  9a:	01 00       	.word	0x0001	; ????
  9c:	01 00       	.word	0x0001	; ????
  9e:	01 00       	.word	0x0001	; ????
  a0:	01 00       	.word	0x0001	; ????
  a2:	02 00       	.word	0x0002	; ????
  a4:	02 00       	.word	0x0002	; ????
  a6:	02 00       	.word	0x0002	; ????
  a8:	02 00       	.word	0x0002	; ????
  aa:	02 00       	.word	0x0002	; ????
  ac:	02 00       	.word	0x0002	; ????
  ae:	03 00       	.word	0x0003	; ????
  b0:	03 00       	.word	0x0003	; ????
  b2:	03 00       	.word	0x0003	; ????
  b4:	03 00       	.word	0x0003	; ????
  b6:	03 00       	.word	0x0003	; ????
  b8:	03 00       	.word	0x0003	; ????
  ba:	04 00       	.word	0x0004	; ????
  bc:	04 00       	.word	0x0004	; ????
  be:	04 00       	.word	0x0004	; ????
  c0:	04 00       	.word	0x0004	; ????
  c2:	04 00       	.word	0x0004	; ????
  c4:	05 00       	.word	0x0005	; ????
  c6:	05 00       	.word	0x0005	; ????
  c8:	05 00       	.word	0x0005	; ????
  ca:	05 00       	.word	0x0005	; ????
  cc:	06 00       	.word	0x0006	; ????
  ce:	06 00       	.word	0x0006	; ????
  d0:	06 00       	.word	0x0006	; ????
  d2:	06 00       	.word	0x0006	; ????
  d4:	07 00       	.word	0x0007	; ????
  d6:	07 00       	.word	0x0007	; ????
  d8:	07 00       	.word	0x0007	; ????
  da:	07 00       	.word	0x0007	; ????
  dc:	08 00       	.word	0x0008	; ????
  de:	08 00       	.word	0x0008	; ????
  e0:	08 00       	.word	0x0008	; ????
  e2:	09 00       	.word	0x0009	; ????
  e4:	09 00       	.word	0x0009	; ????
  e6:	09 00       	.word	0x0009	; ????
  e8:	09 00       	.word	0x0009	; ????
  ea:	0a 00       	.word	0x000a	; ????
  ec:	0a 00       	.word	0x000a	; ????
  ee:	0a 00       	.word	0x000a	; ????
  f0:	0b 00       	.word	0x000b	; ????
  f2:	0b 00       	.word	0x000b	; ????
  f4:	0b 00       	.word	0x000b	; ????
  f6:	0c 00       	.word	0x000c	; ????
  f8:	0c 00       	.word	0x000c	; ????
  fa:	0c 00       	.word	0x000c	; ????
  fc:	0d 00       	.word	0x000d	; ????
  fe:	0d 00       	.word	0x000d	; ????
 100:	0d 00       	.word	0x000d	; ????
 102:	0e 00       	.word	0x000e	; ????
 104:	0e 00       	.word	0x000e	; ????
 106:	0e 00       	.word	0x000e	; ????
 108:	0f 00       	.word	0x000f	; ????
 10a:	0f 00       	.word	0x000f	; ????
 10c:	0f 00       	.word	0x000f	; ????
 10e:	10 00       	.word	0x0010	; ????
 110:	10 00       	.word	0x0010	; ????
 112:	11 00       	.word	0x0011	; ????
 114:	11 00       	.word	0x0011	; ????
 116:	11 00       	.word	0x0011	; ????
 118:	12 00       	.word	0x0012	; ????
 11a:	12 00       	.word	0x0012	; ????
 11c:	12 00       	.word	0x0012	; ????
 11e:	13 00       	.word	0x0013	; ????
 120:	13 00       	.word	0x0013	; ????
 122:	14 00       	.word	0x0014	; ????
 124:	14 00       	.word	0x0014	; ????
 126:	14 00       	.word	0x0014	; ????
 128:	15 00       	.word	0x0015	; ????
 12a:	15 00       	.word	0x0015	; ????
 12c:	16 00       	.word	0x0016	; ????
 12e:	16 00       	.word	0x0016	; ????
 130:	16 00       	.word	0x0016	; ????
 132:	17 00       	.word	0x0017	; ????
 134:	17 00       	.word	0x0017	; ????
 136:	18 00       	.word	0x0018	; ????
 138:	18 00       	.word	0x0018	; ????
 13a:	19 00       	.word	0x0019	; ????
 13c:	19 00       	.word	0x0019	; ????
 13e:	19 00       	.word	0x0019	; ????
 140:	1a 00       	.word	0x001a	; ????
 142:	1a 00       	.word	0x001a	; ????
 144:	1b 00       	.word	0x001b	; ????
 146:	1b 00       	.word	0x001b	; ????
 148:	1c 00       	.word	0x001c	; ????
 14a:	1c 00       	.word	0x001c	; ????
 14c:	1d 00       	.word	0x001d	; ????
 14e:	1d 00       	.word	0x001d	; ????
 150:	1e 00       	.word	0x001e	; ????
 152:	1e 00       	.word	0x001e	; ????
 154:	1e 00       	.word	0x001e	; ????
 156:	1f 00       	.word	0x001f	; ????
 158:	1f 00       	.word	0x001f	; ????
 15a:	20 00       	.word	0x0020	; ????
 15c:	20 00       	.word	0x0020	; ????
 15e:	21 00       	.word	0x0021	; ????
 160:	21 00       	.word	0x0021	; ????
 162:	22 00       	.word	0x0022	; ????
 164:	22 00       	.word	0x0022	; ????
 166:	23 00       	.word	0x0023	; ????
 168:	23 00       	.word	0x0023	; ????
 16a:	24 00       	.word	0x0024	; ????
 16c:	24 00       	.word	0x0024	; ????
 16e:	25 00       	.word	0x0025	; ????
 170:	25 00       	.word	0x0025	; ????
 172:	26 00       	.word	0x0026	; ????
 174:	26 00       	.word	0x0026	; ????
 176:	27 00       	.word	0x0027	; ????
 178:	27 00       	.word	0x0027	; ????
 17a:	28 00       	.word	0x0028	; ????
 17c:	28 00       	.word	0x0028	; ????
 17e:	29 00       	.word	0x0029	; ????
 180:	29 00       	.word	0x0029	; ????
 182:	29 00       	.word	0x0029	; ????
 184:	2a 00       	.word	0x002a	; ????
 186:	2a 00       	.word	0x002a	; ????
 188:	2b 00       	.word	0x002b	; ????
 18a:	2b 00       	.word	0x002b	; ????
 18c:	2c 00       	.word	0x002c	; ????
 18e:	2c 00       	.word	0x002c	; ????
 190:	2d 00       	.word	0x002d	; ????
 192:	2d 00       	.word	0x002d	; ????
 194:	2e 00       	.word	0x002e	; ????
 196:	2e 00       	.word	0x002e	; ????
 198:	2f 00       	.word	0x002f	; ????
 19a:	2f 00       	.word	0x002f	; ????
 19c:	30 00       	.word	0x0030	; ????
 19e:	30 00       	.word	0x0030	; ????
 1a0:	31 00       	.word	0x0031	; ????
 1a2:	31 00       	.word	0x0031	; ????
 1a4:	32 00       	.word	0x0032	; ????
 1a6:	33 00       	.word	0x0033	; ????
 1a8:	34 00       	.word	0x0034	; ????
 1aa:	35 00       	.word	0x0035	; ????
 1ac:	36 00       	.word	0x0036	; ????
 1ae:	37 00       	.word	0x0037	; ????
 1b0:	38 00       	.word	0x0038	; ????
 1b2:	39 00       	.word	0x0039	; ????
 1b4:	3a 00       	.word	0x003a	; ????
 1b6:	3b 00       	.word	0x003b	; ????
 1b8:	3c 00       	.word	0x003c	; ????
 1ba:	3d 00       	.word	0x003d	; ????
 1bc:	3e 00       	.word	0x003e	; ????
 1be:	3f 00       	.word	0x003f	; ????
 1c0:	40 00       	.word	0x0040	; ????
 1c2:	41 00       	.word	0x0041	; ????
 1c4:	42 00       	.word	0x0042	; ????
 1c6:	43 00       	.word	0x0043	; ????
 1c8:	44 00       	.word	0x0044	; ????
 1ca:	45 00       	.word	0x0045	; ????
 1cc:	46 00       	.word	0x0046	; ????
 1ce:	47 00       	.word	0x0047	; ????
 1d0:	48 00       	.word	0x0048	; ????
 1d2:	49 00       	.word	0x0049	; ????
 1d4:	49 00       	.word	0x0049	; ????
 1d6:	4a 00       	.word	0x004a	; ????
 1d8:	4b 00       	.word	0x004b	; ????
 1da:	4c 00       	.word	0x004c	; ????
 1dc:	4d 00       	.word	0x004d	; ????
 1de:	4e 00       	.word	0x004e	; ????
 1e0:	4e 00       	.word	0x004e	; ????
 1e2:	4f 00       	.word	0x004f	; ????
 1e4:	50 00       	.word	0x0050	; ????
 1e6:	51 00       	.word	0x0051	; ????
 1e8:	52 00       	.word	0x0052	; ????
 1ea:	52 00       	.word	0x0052	; ????
 1ec:	53 00       	.word	0x0053	; ????
 1ee:	54 00       	.word	0x0054	; ????
 1f0:	55 00       	.word	0x0055	; ????
 1f2:	55 00       	.word	0x0055	; ????
 1f4:	56 00       	.word	0x0056	; ????
 1f6:	57 00       	.word	0x0057	; ????
 1f8:	57 00       	.word	0x0057	; ????
 1fa:	58 00       	.word	0x0058	; ????
 1fc:	59 00       	.word	0x0059	; ????
 1fe:	59 00       	.word	0x0059	; ????
 200:	5a 00       	.word	0x005a	; ????
 202:	5a 00       	.word	0x005a	; ????
 204:	5b 00       	.word	0x005b	; ????
 206:	5c 00       	.word	0x005c	; ????
 208:	5c 00       	.word	0x005c	; ????
 20a:	5d 00       	.word	0x005d	; ????
 20c:	5d 00       	.word	0x005d	; ????
 20e:	5e 00       	.word	0x005e	; ????
 210:	5e 00       	.word	0x005e	; ????
 212:	5e 00       	.word	0x005e	; ????
 214:	5f 00       	.word	0x005f	; ????
 216:	5f 00       	.word	0x005f	; ????
 218:	60 00       	.word	0x0060	; ????
 21a:	60 00       	.word	0x0060	; ????
 21c:	60 00       	.word	0x0060	; ????
 21e:	61 00       	.word	0x0061	; ????
 220:	61 00       	.word	0x0061	; ????
 222:	61 00       	.word	0x0061	; ????
 224:	62 00       	.word	0x0062	; ????
 226:	62 00       	.word	0x0062	; ????
 228:	62 00       	.word	0x0062	; ????
 22a:	62 00       	.word	0x0062	; ????
 22c:	63 00       	.word	0x0063	; ????
 22e:	63 00       	.word	0x0063	; ????
 230:	63 00       	.word	0x0063	; ????
 232:	63 00       	.word	0x0063	; ????
 234:	63 00       	.word	0x0063	; ????
 236:	63 00       	.word	0x0063	; ????
 238:	63 00       	.word	0x0063	; ????
 23a:	63 00       	.word	0x0063	; ????
 23c:	63 00       	.word	0x0063	; ????
 23e:	63 00       	.word	0x0063	; ????

00000240 <__ctors_end>:
 240:	11 24       	eor	r1, r1
 242:	1f be       	out	0x3f, r1	; 63
 244:	cf ef       	ldi	r28, 0xFF	; 255
 246:	d8 e0       	ldi	r29, 0x08	; 8
 248:	de bf       	out	0x3e, r29	; 62
 24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
 24c:	11 e0       	ldi	r17, 0x01	; 1
 24e:	a0 e0       	ldi	r26, 0x00	; 0
 250:	b1 e0       	ldi	r27, 0x01	; 1
 252:	e2 e0       	ldi	r30, 0x02	; 2
 254:	fa e0       	ldi	r31, 0x0A	; 10
 256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x10>
 258:	05 90       	lpm	r0, Z+
 25a:	0d 92       	st	X+, r0
 25c:	a4 30       	cpi	r26, 0x04	; 4
 25e:	b1 07       	cpc	r27, r17
 260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0xc>
 262:	0e 94 a8 02 	call	0x550	; 0x550 <main>
 266:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <_exit>

0000026a <__bad_interrupt>:
 26a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026e <hsv_to_rgb>:
    41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56,
    57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 73, 74, 75, 76, 77, 78, 78, 79,
    80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 92, 93, 93, 94, 94, 94, 95,
    95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99};

void hsv_to_rgb(uint32_t h, uint32_t v, uint32_t *red, uint32_t *green, uint32_t *blue) {
 26e:	4f 92       	push	r4
 270:	5f 92       	push	r5
 272:	6f 92       	push	r6
 274:	7f 92       	push	r7
 276:	8f 92       	push	r8
 278:	9f 92       	push	r9
 27a:	af 92       	push	r10
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <hsv_to_rgb+0x22>
 290:	00 d0       	rcall	.+0      	; 0x292 <hsv_to_rgb+0x24>
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	4b 01       	movw	r8, r22
 298:	5c 01       	movw	r10, r24
 29a:	29 01       	movw	r4, r18
 29c:	3a 01       	movw	r6, r20
    int c = v;
    int x = c * (60 - abs(h % 120 - 60)) / 60;
 29e:	28 e7       	ldi	r18, 0x78	; 120
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	0e 94 2c 04 	call	0x858	; 0x858 <__udivmodsi4>
 2aa:	6c 53       	subi	r22, 0x3C	; 60
 2ac:	71 09       	sbc	r23, r1
 2ae:	77 fd       	sbrc	r23, 7
 2b0:	d3 c0       	rjmp	.+422    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 2b2:	2c e3       	ldi	r18, 0x3C	; 60
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	a9 01       	movw	r20, r18
 2b8:	46 1b       	sub	r20, r22
 2ba:	57 0b       	sbc	r21, r23
 2bc:	44 9d       	mul	r20, r4
 2be:	c0 01       	movw	r24, r0
 2c0:	45 9d       	mul	r20, r5
 2c2:	90 0d       	add	r25, r0
 2c4:	54 9d       	mul	r21, r4
 2c6:	90 0d       	add	r25, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	b9 01       	movw	r22, r18
 2cc:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 2d0:	9b 01       	movw	r18, r22

    int r, g, b;

    if (h >= 0 && h < 60) {
 2d2:	4c e3       	ldi	r20, 0x3C	; 60
 2d4:	84 16       	cp	r8, r20
 2d6:	91 04       	cpc	r9, r1
 2d8:	a1 04       	cpc	r10, r1
 2da:	b1 04       	cpc	r11, r1
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <hsv_to_rgb+0x72>
 2de:	99 c0       	rjmp	.+306    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
        r = c;
        g = x;
        b = 0;
    } else if (h >= 60 && h < 120) {
 2e0:	d5 01       	movw	r26, r10
 2e2:	c4 01       	movw	r24, r8
 2e4:	cc 97       	sbiw	r24, 0x3c	; 60
 2e6:	a1 09       	sbc	r26, r1
 2e8:	b1 09       	sbc	r27, r1
 2ea:	cc 97       	sbiw	r24, 0x3c	; 60
 2ec:	a1 05       	cpc	r26, r1
 2ee:	b1 05       	cpc	r27, r1
 2f0:	08 f4       	brcc	.+2      	; 0x2f4 <hsv_to_rgb+0x86>
 2f2:	45 c0       	rjmp	.+138    	; 0x37e <hsv_to_rgb+0x110>
        r = x;
        g = c;
        b = 0;
    } else if (h >= 120 && h < 180) {
 2f4:	d5 01       	movw	r26, r10
 2f6:	c4 01       	movw	r24, r8
 2f8:	88 57       	subi	r24, 0x78	; 120
 2fa:	91 09       	sbc	r25, r1
 2fc:	a1 09       	sbc	r26, r1
 2fe:	b1 09       	sbc	r27, r1
 300:	cc 97       	sbiw	r24, 0x3c	; 60
 302:	a1 05       	cpc	r26, r1
 304:	b1 05       	cpc	r27, r1
 306:	08 f4       	brcc	.+2      	; 0x30a <hsv_to_rgb+0x9c>
 308:	cb c0       	rjmp	.+406    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
        r = 0;
        g = c;
        b = x;
    } else if (h >= 180 && h < 240) {
 30a:	d5 01       	movw	r26, r10
 30c:	c4 01       	movw	r24, r8
 30e:	84 5b       	subi	r24, 0xB4	; 180
 310:	91 09       	sbc	r25, r1
 312:	a1 09       	sbc	r26, r1
 314:	b1 09       	sbc	r27, r1
 316:	cc 97       	sbiw	r24, 0x3c	; 60
 318:	a1 05       	cpc	r26, r1
 31a:	b1 05       	cpc	r27, r1
 31c:	08 f4       	brcc	.+2      	; 0x320 <hsv_to_rgb+0xb2>
 31e:	a0 c0       	rjmp	.+320    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
        r = 0;
        g = x;
        b = c;
    } else if (h >= 240 && h < 300) {
 320:	90 ef       	ldi	r25, 0xF0	; 240
 322:	89 1a       	sub	r8, r25
 324:	91 08       	sbc	r9, r1
 326:	a1 08       	sbc	r10, r1
 328:	b1 08       	sbc	r11, r1
 32a:	4f ef       	ldi	r20, 0xFF	; 255
 32c:	ac e3       	ldi	r26, 0x3C	; 60
 32e:	8a 16       	cp	r8, r26
 330:	91 04       	cpc	r9, r1
 332:	a1 04       	cpc	r10, r1
 334:	b1 04       	cpc	r11, r1
 336:	08 f4       	brcc	.+2      	; 0x33a <hsv_to_rgb+0xcc>
 338:	d3 c0       	rjmp	.+422    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 33a:	44 9d       	mul	r20, r4
 33c:	c0 01       	movw	r24, r0
 33e:	45 9d       	mul	r20, r5
 340:	90 0d       	add	r25, r0
 342:	11 24       	eor	r1, r1
 344:	e4 e6       	ldi	r30, 0x64	; 100
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	bf 01       	movw	r22, r30
 34a:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 34e:	cb 01       	movw	r24, r22
 350:	77 0f       	add	r23, r23
 352:	aa 0b       	sbc	r26, r26
 354:	bb 0b       	sbc	r27, r27
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	9a 83       	std	Y+2, r25	; 0x02
 35a:	ab 83       	std	Y+3, r26	; 0x03
 35c:	bc 83       	std	Y+4, r27	; 0x04
 35e:	42 9f       	mul	r20, r18
 360:	c0 01       	movw	r24, r0
 362:	43 9f       	mul	r20, r19
 364:	90 0d       	add	r25, r0
 366:	11 24       	eor	r1, r1
 368:	bf 01       	movw	r22, r30
 36a:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 36e:	cb 01       	movw	r24, r22
 370:	77 0f       	add	r23, r23
 372:	aa 0b       	sbc	r26, r26
 374:	bb 0b       	sbc	r27, r27
 376:	81 2c       	mov	r8, r1
 378:	91 2c       	mov	r9, r1
 37a:	54 01       	movw	r10, r8
 37c:	22 c0       	rjmp	.+68     	; 0x3c2 <hsv_to_rgb+0x154>
 37e:	4f ef       	ldi	r20, 0xFF	; 255
 380:	46 9f       	mul	r20, r22
 382:	c0 01       	movw	r24, r0
 384:	47 9f       	mul	r20, r23
 386:	90 0d       	add	r25, r0
 388:	11 24       	eor	r1, r1
 38a:	24 e6       	ldi	r18, 0x64	; 100
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	b9 01       	movw	r22, r18
 390:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 394:	cb 01       	movw	r24, r22
 396:	77 0f       	add	r23, r23
 398:	aa 0b       	sbc	r26, r26
 39a:	bb 0b       	sbc	r27, r27
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	9a 83       	std	Y+2, r25	; 0x02
 3a0:	ab 83       	std	Y+3, r26	; 0x03
 3a2:	bc 83       	std	Y+4, r27	; 0x04
 3a4:	44 9d       	mul	r20, r4
 3a6:	c0 01       	movw	r24, r0
 3a8:	45 9d       	mul	r20, r5
 3aa:	90 0d       	add	r25, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	b9 01       	movw	r22, r18
 3b0:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 3b4:	4b 01       	movw	r8, r22
 3b6:	77 0f       	add	r23, r23
 3b8:	aa 08       	sbc	r10, r10
 3ba:	bb 08       	sbc	r11, r11

    if (h >= 0 && h < 60) {
        r = c;
        g = x;
        b = 0;
    } else if (h >= 60 && h < 120) {
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	dc 01       	movw	r26, r24
        r = c;
        g = 0;
        b = x;
    }

    *red = r * 255 / 100;
 3c2:	29 81       	ldd	r18, Y+1	; 0x01
 3c4:	3a 81       	ldd	r19, Y+2	; 0x02
 3c6:	4b 81       	ldd	r20, Y+3	; 0x03
 3c8:	5c 81       	ldd	r21, Y+4	; 0x04
 3ca:	f8 01       	movw	r30, r16
 3cc:	20 83       	st	Z, r18
 3ce:	31 83       	std	Z+1, r19	; 0x01
 3d0:	42 83       	std	Z+2, r20	; 0x02
 3d2:	53 83       	std	Z+3, r21	; 0x03
    *green = g * 255 / 100;
 3d4:	f7 01       	movw	r30, r14
 3d6:	80 82       	st	Z, r8
 3d8:	91 82       	std	Z+1, r9	; 0x01
 3da:	a2 82       	std	Z+2, r10	; 0x02
 3dc:	b3 82       	std	Z+3, r11	; 0x03
    *blue = b * 255 / 100;
 3de:	f6 01       	movw	r30, r12
 3e0:	80 83       	st	Z, r24
 3e2:	91 83       	std	Z+1, r25	; 0x01
 3e4:	a2 83       	std	Z+2, r26	; 0x02
 3e6:	b3 83       	std	Z+3, r27	; 0x03
}
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	bf 90       	pop	r11
 402:	af 90       	pop	r10
 404:	9f 90       	pop	r9
 406:	8f 90       	pop	r8
 408:	7f 90       	pop	r7
 40a:	6f 90       	pop	r6
 40c:	5f 90       	pop	r5
 40e:	4f 90       	pop	r4
 410:	08 95       	ret
 412:	4f ef       	ldi	r20, 0xFF	; 255
 414:	44 9d       	mul	r20, r4
 416:	c0 01       	movw	r24, r0
 418:	45 9d       	mul	r20, r5
 41a:	90 0d       	add	r25, r0
 41c:	11 24       	eor	r1, r1
 41e:	e4 e6       	ldi	r30, 0x64	; 100
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	bf 01       	movw	r22, r30
 424:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 428:	cb 01       	movw	r24, r22
 42a:	77 0f       	add	r23, r23
 42c:	aa 0b       	sbc	r26, r26
 42e:	bb 0b       	sbc	r27, r27
 430:	89 83       	std	Y+1, r24	; 0x01
 432:	9a 83       	std	Y+2, r25	; 0x02
 434:	ab 83       	std	Y+3, r26	; 0x03
 436:	bc 83       	std	Y+4, r27	; 0x04
 438:	42 9f       	mul	r20, r18
 43a:	c0 01       	movw	r24, r0
 43c:	43 9f       	mul	r20, r19
 43e:	90 0d       	add	r25, r0
 440:	11 24       	eor	r1, r1
 442:	bf 01       	movw	r22, r30
 444:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 448:	4b 01       	movw	r8, r22
 44a:	77 0f       	add	r23, r23
 44c:	aa 08       	sbc	r10, r10
 44e:	bb 08       	sbc	r11, r11
    int c = v;
    int x = c * (60 - abs(h % 120 - 60)) / 60;

    int r, g, b;

    if (h >= 0 && h < 60) {
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	dc 01       	movw	r26, r24
 456:	b5 cf       	rjmp	.-150    	; 0x3c2 <hsv_to_rgb+0x154>
    80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 92, 93, 93, 94, 94, 94, 95,
    95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99};

void hsv_to_rgb(uint32_t h, uint32_t v, uint32_t *red, uint32_t *green, uint32_t *blue) {
    int c = v;
    int x = c * (60 - abs(h % 120 - 60)) / 60;
 458:	71 95       	neg	r23
 45a:	61 95       	neg	r22
 45c:	71 09       	sbc	r23, r1
 45e:	29 cf       	rjmp	.-430    	; 0x2b2 <hsv_to_rgb+0x44>
 460:	4f ef       	ldi	r20, 0xFF	; 255
 462:	46 9f       	mul	r20, r22
 464:	c0 01       	movw	r24, r0
 466:	47 9f       	mul	r20, r23
 468:	90 0d       	add	r25, r0
 46a:	11 24       	eor	r1, r1
 46c:	24 e6       	ldi	r18, 0x64	; 100
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	b9 01       	movw	r22, r18
 472:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 476:	4b 01       	movw	r8, r22
 478:	77 0f       	add	r23, r23
 47a:	aa 08       	sbc	r10, r10
 47c:	bb 08       	sbc	r11, r11
 47e:	44 9d       	mul	r20, r4
 480:	c0 01       	movw	r24, r0
 482:	45 9d       	mul	r20, r5
 484:	90 0d       	add	r25, r0
 486:	11 24       	eor	r1, r1
 488:	b9 01       	movw	r22, r18
 48a:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 48e:	cb 01       	movw	r24, r22
 490:	77 0f       	add	r23, r23
 492:	aa 0b       	sbc	r26, r26
 494:	bb 0b       	sbc	r27, r27
        b = 0;
    } else if (h >= 120 && h < 180) {
        r = 0;
        g = c;
        b = x;
    } else if (h >= 180 && h < 240) {
 496:	19 82       	std	Y+1, r1	; 0x01
 498:	1a 82       	std	Y+2, r1	; 0x02
 49a:	1b 82       	std	Y+3, r1	; 0x03
 49c:	1c 82       	std	Y+4, r1	; 0x04
 49e:	91 cf       	rjmp	.-222    	; 0x3c2 <hsv_to_rgb+0x154>
 4a0:	4f ef       	ldi	r20, 0xFF	; 255
 4a2:	44 9d       	mul	r20, r4
 4a4:	c0 01       	movw	r24, r0
 4a6:	45 9d       	mul	r20, r5
 4a8:	90 0d       	add	r25, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	e4 e6       	ldi	r30, 0x64	; 100
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	bf 01       	movw	r22, r30
 4b2:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 4b6:	4b 01       	movw	r8, r22
 4b8:	77 0f       	add	r23, r23
 4ba:	aa 08       	sbc	r10, r10
 4bc:	bb 08       	sbc	r11, r11
 4be:	42 9f       	mul	r20, r18
 4c0:	c0 01       	movw	r24, r0
 4c2:	43 9f       	mul	r20, r19
 4c4:	90 0d       	add	r25, r0
 4c6:	11 24       	eor	r1, r1
 4c8:	bf 01       	movw	r22, r30
 4ca:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 4ce:	cb 01       	movw	r24, r22
 4d0:	77 0f       	add	r23, r23
 4d2:	aa 0b       	sbc	r26, r26
 4d4:	bb 0b       	sbc	r27, r27
        b = 0;
    } else if (h >= 60 && h < 120) {
        r = x;
        g = c;
        b = 0;
    } else if (h >= 120 && h < 180) {
 4d6:	19 82       	std	Y+1, r1	; 0x01
 4d8:	1a 82       	std	Y+2, r1	; 0x02
 4da:	1b 82       	std	Y+3, r1	; 0x03
 4dc:	1c 82       	std	Y+4, r1	; 0x04
 4de:	71 cf       	rjmp	.-286    	; 0x3c2 <hsv_to_rgb+0x154>
 4e0:	46 9f       	mul	r20, r22
 4e2:	c0 01       	movw	r24, r0
 4e4:	47 9f       	mul	r20, r23
 4e6:	90 0d       	add	r25, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	24 e6       	ldi	r18, 0x64	; 100
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	b9 01       	movw	r22, r18
 4f0:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 4f4:	cb 01       	movw	r24, r22
 4f6:	77 0f       	add	r23, r23
 4f8:	aa 0b       	sbc	r26, r26
 4fa:	bb 0b       	sbc	r27, r27
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	9a 83       	std	Y+2, r25	; 0x02
 500:	ab 83       	std	Y+3, r26	; 0x03
 502:	bc 83       	std	Y+4, r27	; 0x04
 504:	44 9d       	mul	r20, r4
 506:	c0 01       	movw	r24, r0
 508:	45 9d       	mul	r20, r5
 50a:	90 0d       	add	r25, r0
 50c:	11 24       	eor	r1, r1
 50e:	b9 01       	movw	r22, r18
 510:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 514:	cb 01       	movw	r24, r22
 516:	77 0f       	add	r23, r23
 518:	aa 0b       	sbc	r26, r26
 51a:	bb 0b       	sbc	r27, r27
        b = x;
    } else if (h >= 180 && h < 240) {
        r = 0;
        g = x;
        b = c;
    } else if (h >= 240 && h < 300) {
 51c:	81 2c       	mov	r8, r1
 51e:	91 2c       	mov	r9, r1
 520:	54 01       	movw	r10, r8
 522:	4f cf       	rjmp	.-354    	; 0x3c2 <hsv_to_rgb+0x154>

00000524 <timers_init>:
    *green = g * 255 / 100;
    *blue = b * 255 / 100;
}

void timers_init() {
    ICR1 = 255;
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 52c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    
    // 	OCR1A OCR1B
    // Fast PWN, TOP - ICR
    // Prescaler 256
    TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(WGM11);
 530:	82 ea       	ldi	r24, 0xA2	; 162
 532:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(CS12);
 536:	8c e1       	ldi	r24, 0x1C	; 28
 538:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // OCR2A
    TCCR2A = _BV(COM2A1) | _BV(WGM20) | _BV(WGM21);
 53c:	83 e8       	ldi	r24, 0x83	; 131
 53e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = _BV(CS21) | _BV(CS22);
 542:	86 e0       	ldi	r24, 0x06	; 6
 544:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

    LED_DDR |= _BV(RED_PIN) | _BV(GREEN_PIN) | _BV(BLUE_PIN);
 548:	84 b1       	in	r24, 0x04	; 4
 54a:	8e 60       	ori	r24, 0x0E	; 14
 54c:	84 b9       	out	0x04, r24	; 4
 54e:	08 95       	ret

00000550 <main>:
}

int main() {
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	60 97       	sbiw	r28, 0x10	; 16
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
    *green = g * 255 / 100;
    *blue = b * 255 / 100;
}

void timers_init() {
    ICR1 = 255;
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 56c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    
    // 	OCR1A OCR1B
    // Fast PWN, TOP - ICR
    // Prescaler 256
    TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(WGM11);
 570:	82 ea       	ldi	r24, 0xA2	; 162
 572:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(CS12);
 576:	8c e1       	ldi	r24, 0x1C	; 28
 578:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

    // OCR2A
    TCCR2A = _BV(COM2A1) | _BV(WGM20) | _BV(WGM21);
 57c:	83 e8       	ldi	r24, 0x83	; 131
 57e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = _BV(CS21) | _BV(CS22);
 582:	86 e0       	ldi	r24, 0x06	; 6
 584:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>

    LED_DDR |= _BV(RED_PIN) | _BV(GREEN_PIN) | _BV(BLUE_PIN);
 588:	84 b1       	in	r24, 0x04	; 4
 58a:	8e 60       	ori	r24, 0x0E	; 14
 58c:	84 b9       	out	0x04, r24	; 4
 58e:	64 e6       	ldi	r22, 0x64	; 100
 590:	c6 2e       	mov	r12, r22
 592:	d1 2c       	mov	r13, r1
 594:	22 24       	eor	r2, r2
 596:	2a 94       	dec	r2
 598:	31 2c       	mov	r3, r1
    uint32_t end_of_arr = sizeof(values) / sizeof(values[0]) - 1;
    uint32_t r = 0, g = 0, b = 0;

    while (1) {
        direction = 1;
        hue = (rand() % 360);
 59a:	0e 94 ae 04 	call	0x95c	; 0x95c <rand>
 59e:	68 e6       	ldi	r22, 0x68	; 104
 5a0:	71 e0       	ldi	r23, 0x01	; 1
 5a2:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 5a6:	4c 01       	movw	r8, r24
 5a8:	99 0f       	add	r25, r25
 5aa:	aa 08       	sbc	r10, r10
 5ac:	bb 08       	sbc	r11, r11
 5ae:	c5 01       	movw	r24, r10
 5b0:	b4 01       	movw	r22, r8
 5b2:	28 e7       	ldi	r18, 0x78	; 120
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	0e 94 2c 04 	call	0x858	; 0x858 <__udivmodsi4>
 5be:	6c 53       	subi	r22, 0x3C	; 60
 5c0:	71 09       	sbc	r23, r1
 5c2:	77 fd       	sbrc	r23, 7
 5c4:	31 c1       	rjmp	.+610    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 5c6:	8c e3       	ldi	r24, 0x3C	; 60
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	86 1b       	sub	r24, r22
 5cc:	97 0b       	sbc	r25, r23
 5ce:	9a 83       	std	Y+2, r25	; 0x02
 5d0:	89 83       	std	Y+1, r24	; 0x01

    if (h >= 0 && h < 60) {
        r = c;
        g = x;
        b = 0;
    } else if (h >= 60 && h < 120) {
 5d2:	24 01       	movw	r4, r8
 5d4:	35 01       	movw	r6, r10
 5d6:	9c e3       	ldi	r25, 0x3C	; 60
 5d8:	49 1a       	sub	r4, r25
 5da:	51 08       	sbc	r5, r1
 5dc:	61 08       	sbc	r6, r1
 5de:	71 08       	sbc	r7, r1
        r = x;
        g = c;
        b = 0;
    } else if (h >= 120 && h < 180) {
 5e0:	c5 01       	movw	r24, r10
 5e2:	b4 01       	movw	r22, r8
 5e4:	68 57       	subi	r22, 0x78	; 120
 5e6:	71 09       	sbc	r23, r1
 5e8:	81 09       	sbc	r24, r1
 5ea:	91 09       	sbc	r25, r1
 5ec:	6b 83       	std	Y+3, r22	; 0x03
 5ee:	7c 83       	std	Y+4, r23	; 0x04
 5f0:	8d 83       	std	Y+5, r24	; 0x05
 5f2:	9e 83       	std	Y+6, r25	; 0x06
        r = 0;
        g = c;
        b = x;
    } else if (h >= 180 && h < 240) {
 5f4:	d5 01       	movw	r26, r10
 5f6:	c4 01       	movw	r24, r8
 5f8:	84 5b       	subi	r24, 0xB4	; 180
 5fa:	91 09       	sbc	r25, r1
 5fc:	a1 09       	sbc	r26, r1
 5fe:	b1 09       	sbc	r27, r1
 600:	8f 83       	std	Y+7, r24	; 0x07
 602:	98 87       	std	Y+8, r25	; 0x08
 604:	a9 87       	std	Y+9, r26	; 0x09
 606:	ba 87       	std	Y+10, r27	; 0x0a
        r = 0;
        g = x;
        b = c;
    } else if (h >= 240 && h < 300) {
 608:	c5 01       	movw	r24, r10
 60a:	b4 01       	movw	r22, r8
 60c:	60 5f       	subi	r22, 0xF0	; 240
 60e:	71 09       	sbc	r23, r1
 610:	81 09       	sbc	r24, r1
 612:	91 09       	sbc	r25, r1
 614:	6b 87       	std	Y+11, r22	; 0x0b
 616:	7c 87       	std	Y+12, r23	; 0x0c
 618:	8d 87       	std	Y+13, r24	; 0x0d
 61a:	9e 87       	std	Y+14, r25	; 0x0e
    uint32_t r = 0, g = 0, b = 0;

    while (1) {
        direction = 1;
        hue = (rand() % 360);
        for (int i = 0; i >= 0;) {
 61c:	20 e0       	ldi	r18, 0x00	; 0
 61e:	30 e0       	ldi	r19, 0x00	; 0
    uint32_t value;
    uint32_t end_of_arr = sizeof(values) / sizeof(values[0]) - 1;
    uint32_t r = 0, g = 0, b = 0;

    while (1) {
        direction = 1;
 620:	41 e0       	ldi	r20, 0x01	; 1
        hue = (rand() % 360);
        for (int i = 0; i >= 0;) {
            while (TCNT1 != 0);
 622:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 626:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 62a:	89 2b       	or	r24, r25
 62c:	d1 f7       	brne	.-12     	; 0x622 <main+0xd2>
            value = pgm_read_word(&(values[i]));
 62e:	f9 01       	movw	r30, r18
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	e8 59       	subi	r30, 0x98	; 152
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	85 91       	lpm	r24, Z+
 63a:	94 91       	lpm	r25, Z
 63c:	98 8b       	std	Y+16, r25	; 0x10
 63e:	8f 87       	std	Y+15, r24	; 0x0f
            if (i == end_of_arr)
 640:	2b 3e       	cpi	r18, 0xEB	; 235
 642:	31 05       	cpc	r19, r1
 644:	09 f4       	brne	.+2      	; 0x648 <main+0xf8>
 646:	86 c0       	rjmp	.+268    	; 0x754 <main+0x204>
    80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 90, 91, 92, 92, 93, 93, 94, 94, 94, 95,
    95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99};

void hsv_to_rgb(uint32_t h, uint32_t v, uint32_t *red, uint32_t *green, uint32_t *blue) {
    int c = v;
    int x = c * (60 - abs(h % 120 - 60)) / 60;
 648:	af 85       	ldd	r26, Y+15	; 0x0f
 64a:	b8 89       	ldd	r27, Y+16	; 0x10
 64c:	e9 81       	ldd	r30, Y+1	; 0x01
 64e:	fa 81       	ldd	r31, Y+2	; 0x02
 650:	ae 9f       	mul	r26, r30
 652:	c0 01       	movw	r24, r0
 654:	af 9f       	mul	r26, r31
 656:	90 0d       	add	r25, r0
 658:	be 9f       	mul	r27, r30
 65a:	90 0d       	add	r25, r0
 65c:	11 24       	eor	r1, r1
 65e:	6c e3       	ldi	r22, 0x3C	; 60
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 666:	8b 01       	movw	r16, r22

    int r, g, b;

    if (h >= 0 && h < 60) {
 668:	fc e3       	ldi	r31, 0x3C	; 60
 66a:	8f 16       	cp	r8, r31
 66c:	91 04       	cpc	r9, r1
 66e:	a1 04       	cpc	r10, r1
 670:	b1 04       	cpc	r11, r1
 672:	08 f4       	brcc	.+2      	; 0x676 <main+0x126>
 674:	53 c0       	rjmp	.+166    	; 0x71c <main+0x1cc>
        r = c;
        g = x;
        b = 0;
    } else if (h >= 60 && h < 120) {
 676:	bc e3       	ldi	r27, 0x3C	; 60
 678:	4b 16       	cp	r4, r27
 67a:	51 04       	cpc	r5, r1
 67c:	61 04       	cpc	r6, r1
 67e:	71 04       	cpc	r7, r1
 680:	08 f4       	brcc	.+2      	; 0x684 <main+0x134>
 682:	6a c0       	rjmp	.+212    	; 0x758 <main+0x208>
        r = x;
        g = c;
        b = 0;
    } else if (h >= 120 && h < 180) {
 684:	8b 81       	ldd	r24, Y+3	; 0x03
 686:	9c 81       	ldd	r25, Y+4	; 0x04
 688:	ad 81       	ldd	r26, Y+5	; 0x05
 68a:	be 81       	ldd	r27, Y+6	; 0x06
 68c:	cc 97       	sbiw	r24, 0x3c	; 60
 68e:	a1 05       	cpc	r26, r1
 690:	b1 05       	cpc	r27, r1
 692:	08 f4       	brcc	.+2      	; 0x696 <main+0x146>
 694:	76 c0       	rjmp	.+236    	; 0x782 <main+0x232>
        r = 0;
        g = c;
        b = x;
    } else if (h >= 180 && h < 240) {
 696:	6f 81       	ldd	r22, Y+7	; 0x07
 698:	78 85       	ldd	r23, Y+8	; 0x08
 69a:	89 85       	ldd	r24, Y+9	; 0x09
 69c:	9a 85       	ldd	r25, Y+10	; 0x0a
 69e:	6c 33       	cpi	r22, 0x3C	; 60
 6a0:	71 05       	cpc	r23, r1
 6a2:	81 05       	cpc	r24, r1
 6a4:	91 05       	cpc	r25, r1
 6a6:	08 f4       	brcc	.+2      	; 0x6aa <main+0x15a>
 6a8:	88 c0       	rjmp	.+272    	; 0x7ba <main+0x26a>
        r = 0;
        g = x;
        b = c;
    } else if (h >= 240 && h < 300) {
 6aa:	6b 85       	ldd	r22, Y+11	; 0x0b
 6ac:	7c 85       	ldd	r23, Y+12	; 0x0c
 6ae:	8d 85       	ldd	r24, Y+13	; 0x0d
 6b0:	9e 85       	ldd	r25, Y+14	; 0x0e
 6b2:	6c 33       	cpi	r22, 0x3C	; 60
 6b4:	71 05       	cpc	r23, r1
 6b6:	81 05       	cpc	r24, r1
 6b8:	91 05       	cpc	r25, r1
 6ba:	08 f4       	brcc	.+2      	; 0x6be <main+0x16e>
 6bc:	9a c0       	rjmp	.+308    	; 0x7f2 <main+0x2a2>
 6be:	af ef       	ldi	r26, 0xFF	; 255
 6c0:	6f 85       	ldd	r22, Y+15	; 0x0f
 6c2:	78 89       	ldd	r23, Y+16	; 0x10
 6c4:	a6 9f       	mul	r26, r22
 6c6:	c0 01       	movw	r24, r0
 6c8:	a7 9f       	mul	r26, r23
 6ca:	90 0d       	add	r25, r0
 6cc:	11 24       	eor	r1, r1
 6ce:	b6 01       	movw	r22, r12
 6d0:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 6d4:	71 01       	movw	r14, r2
 6d6:	e6 1a       	sub	r14, r22
 6d8:	f7 0a       	sbc	r15, r23
 6da:	bf ef       	ldi	r27, 0xFF	; 255
 6dc:	b0 9f       	mul	r27, r16
 6de:	c0 01       	movw	r24, r0
 6e0:	b1 9f       	mul	r27, r17
 6e2:	90 0d       	add	r25, r0
 6e4:	11 24       	eor	r1, r1
 6e6:	b6 01       	movw	r22, r12
 6e8:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 6ec:	60 95       	com	r22
 6ee:	ef ef       	ldi	r30, 0xFF	; 255
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
            value = pgm_read_word(&(values[i]));
            if (i == end_of_arr)
                direction = 0;

            hsv_to_rgb(hue, value, &r, &g, &b);
            OCR1A = (255 - g);
 6f2:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6f6:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
            OCR1B = (255 - r);
 6fa:	f0 92 8b 00 	sts	0x008B, r15	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 6fe:	e0 92 8a 00 	sts	0x008A, r14	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
            OCR2A = (255 - b);
 702:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
            if (direction)
 706:	44 23       	and	r20, r20
 708:	21 f0       	breq	.+8      	; 0x712 <main+0x1c2>
                i++;
 70a:	2f 5f       	subi	r18, 0xFF	; 255
 70c:	3f 4f       	sbci	r19, 0xFF	; 255
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	88 cf       	rjmp	.-240    	; 0x622 <main+0xd2>
            else
                i--;
 712:	21 50       	subi	r18, 0x01	; 1
 714:	31 09       	sbc	r19, r1
 716:	08 f0       	brcs	.+2      	; 0x71a <main+0x1ca>
 718:	84 cf       	rjmp	.-248    	; 0x622 <main+0xd2>
 71a:	3f cf       	rjmp	.-386    	; 0x59a <main+0x4a>
 71c:	5f ef       	ldi	r21, 0xFF	; 255
 71e:	56 9f       	mul	r21, r22
 720:	c0 01       	movw	r24, r0
 722:	57 9f       	mul	r21, r23
 724:	90 0d       	add	r25, r0
 726:	11 24       	eor	r1, r1
 728:	b6 01       	movw	r22, r12
 72a:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 72e:	f1 01       	movw	r30, r2
 730:	e6 1b       	sub	r30, r22
 732:	f7 0b       	sbc	r31, r23
 734:	af ef       	ldi	r26, 0xFF	; 255
 736:	6f 85       	ldd	r22, Y+15	; 0x0f
 738:	78 89       	ldd	r23, Y+16	; 0x10
 73a:	a6 9f       	mul	r26, r22
 73c:	c0 01       	movw	r24, r0
 73e:	a7 9f       	mul	r26, r23
 740:	90 0d       	add	r25, r0
 742:	11 24       	eor	r1, r1
 744:	b6 01       	movw	r22, r12
 746:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 74a:	71 01       	movw	r14, r2
 74c:	e6 1a       	sub	r14, r22
 74e:	f7 0a       	sbc	r15, r23

    if (h >= 0 && h < 60) {
        r = c;
        g = x;
        b = 0;
    } else if (h >= 60 && h < 120) {
 750:	6f ef       	ldi	r22, 0xFF	; 255
 752:	cf cf       	rjmp	.-98     	; 0x6f2 <main+0x1a2>
        hue = (rand() % 360);
        for (int i = 0; i >= 0;) {
            while (TCNT1 != 0);
            value = pgm_read_word(&(values[i]));
            if (i == end_of_arr)
                direction = 0;
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	78 cf       	rjmp	.-272    	; 0x648 <main+0xf8>
 758:	5f ef       	ldi	r21, 0xFF	; 255
 75a:	ef 85       	ldd	r30, Y+15	; 0x0f
 75c:	f8 89       	ldd	r31, Y+16	; 0x10
 75e:	5e 9f       	mul	r21, r30
 760:	c0 01       	movw	r24, r0
 762:	5f 9f       	mul	r21, r31
 764:	90 0d       	add	r25, r0
 766:	11 24       	eor	r1, r1
 768:	b6 01       	movw	r22, r12
 76a:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 76e:	f1 01       	movw	r30, r2
 770:	e6 1b       	sub	r30, r22
 772:	f7 0b       	sbc	r31, r23
 774:	6f ef       	ldi	r22, 0xFF	; 255
 776:	60 9f       	mul	r22, r16
 778:	c0 01       	movw	r24, r0
 77a:	61 9f       	mul	r22, r17
 77c:	90 0d       	add	r25, r0
 77e:	11 24       	eor	r1, r1
 780:	e1 cf       	rjmp	.-62     	; 0x744 <main+0x1f4>
 782:	ef ef       	ldi	r30, 0xFF	; 255
 784:	af 85       	ldd	r26, Y+15	; 0x0f
 786:	b8 89       	ldd	r27, Y+16	; 0x10
 788:	ea 9f       	mul	r30, r26
 78a:	c0 01       	movw	r24, r0
 78c:	eb 9f       	mul	r30, r27
 78e:	90 0d       	add	r25, r0
 790:	11 24       	eor	r1, r1
 792:	b6 01       	movw	r22, r12
 794:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 798:	f1 01       	movw	r30, r2
 79a:	e6 1b       	sub	r30, r22
 79c:	f7 0b       	sbc	r31, r23
 79e:	5f ef       	ldi	r21, 0xFF	; 255
 7a0:	50 9f       	mul	r21, r16
 7a2:	c0 01       	movw	r24, r0
 7a4:	51 9f       	mul	r21, r17
 7a6:	90 0d       	add	r25, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	b6 01       	movw	r22, r12
 7ac:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 7b0:	60 95       	com	r22
        b = 0;
    } else if (h >= 60 && h < 120) {
        r = x;
        g = c;
        b = 0;
    } else if (h >= 120 && h < 180) {
 7b2:	ee 24       	eor	r14, r14
 7b4:	ea 94       	dec	r14
 7b6:	f1 2c       	mov	r15, r1
 7b8:	9c cf       	rjmp	.-200    	; 0x6f2 <main+0x1a2>
 7ba:	7f ef       	ldi	r23, 0xFF	; 255
 7bc:	70 9f       	mul	r23, r16
 7be:	c0 01       	movw	r24, r0
 7c0:	71 9f       	mul	r23, r17
 7c2:	90 0d       	add	r25, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	b6 01       	movw	r22, r12
 7c8:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 7cc:	f1 01       	movw	r30, r2
 7ce:	e6 1b       	sub	r30, r22
 7d0:	f7 0b       	sbc	r31, r23
 7d2:	5f ef       	ldi	r21, 0xFF	; 255
 7d4:	af 85       	ldd	r26, Y+15	; 0x0f
 7d6:	b8 89       	ldd	r27, Y+16	; 0x10
 7d8:	5a 9f       	mul	r21, r26
 7da:	c0 01       	movw	r24, r0
 7dc:	5b 9f       	mul	r21, r27
 7de:	90 0d       	add	r25, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	b6 01       	movw	r22, r12
 7e4:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 7e8:	60 95       	com	r22
        r = 0;
        g = c;
        b = x;
    } else if (h >= 180 && h < 240) {
 7ea:	ee 24       	eor	r14, r14
 7ec:	ea 94       	dec	r14
 7ee:	f1 2c       	mov	r15, r1
 7f0:	80 cf       	rjmp	.-256    	; 0x6f2 <main+0x1a2>
 7f2:	7f ef       	ldi	r23, 0xFF	; 255
 7f4:	70 9f       	mul	r23, r16
 7f6:	c0 01       	movw	r24, r0
 7f8:	71 9f       	mul	r23, r17
 7fa:	90 0d       	add	r25, r0
 7fc:	11 24       	eor	r1, r1
 7fe:	b6 01       	movw	r22, r12
 800:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 804:	71 01       	movw	r14, r2
 806:	e6 1a       	sub	r14, r22
 808:	f7 0a       	sbc	r15, r23
 80a:	ef ef       	ldi	r30, 0xFF	; 255
 80c:	af 85       	ldd	r26, Y+15	; 0x0f
 80e:	b8 89       	ldd	r27, Y+16	; 0x10
 810:	ea 9f       	mul	r30, r26
 812:	c0 01       	movw	r24, r0
 814:	eb 9f       	mul	r30, r27
 816:	90 0d       	add	r25, r0
 818:	11 24       	eor	r1, r1
 81a:	b6 01       	movw	r22, r12
 81c:	0e 94 18 04 	call	0x830	; 0x830 <__divmodhi4>
 820:	60 95       	com	r22
        r = 0;
        g = x;
        b = c;
    } else if (h >= 240 && h < 300) {
 822:	ef ef       	ldi	r30, 0xFF	; 255
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	65 cf       	rjmp	.-310    	; 0x6f2 <main+0x1a2>
 828:	71 95       	neg	r23
 82a:	61 95       	neg	r22
 82c:	71 09       	sbc	r23, r1
 82e:	cb ce       	rjmp	.-618    	; 0x5c6 <main+0x76>

00000830 <__divmodhi4>:
 830:	97 fb       	bst	r25, 7
 832:	07 2e       	mov	r0, r23
 834:	16 f4       	brtc	.+4      	; 0x83a <__divmodhi4+0xa>
 836:	00 94       	com	r0
 838:	07 d0       	rcall	.+14     	; 0x848 <__divmodhi4_neg1>
 83a:	77 fd       	sbrc	r23, 7
 83c:	09 d0       	rcall	.+18     	; 0x850 <__divmodhi4_neg2>
 83e:	0e 94 4e 04 	call	0x89c	; 0x89c <__udivmodhi4>
 842:	07 fc       	sbrc	r0, 7
 844:	05 d0       	rcall	.+10     	; 0x850 <__divmodhi4_neg2>
 846:	3e f4       	brtc	.+14     	; 0x856 <__divmodhi4_exit>

00000848 <__divmodhi4_neg1>:
 848:	90 95       	com	r25
 84a:	81 95       	neg	r24
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__divmodhi4_neg2>:
 850:	70 95       	com	r23
 852:	61 95       	neg	r22
 854:	7f 4f       	sbci	r23, 0xFF	; 255

00000856 <__divmodhi4_exit>:
 856:	08 95       	ret

00000858 <__udivmodsi4>:
 858:	a1 e2       	ldi	r26, 0x21	; 33
 85a:	1a 2e       	mov	r1, r26
 85c:	aa 1b       	sub	r26, r26
 85e:	bb 1b       	sub	r27, r27
 860:	fd 01       	movw	r30, r26
 862:	0d c0       	rjmp	.+26     	; 0x87e <__udivmodsi4_ep>

00000864 <__udivmodsi4_loop>:
 864:	aa 1f       	adc	r26, r26
 866:	bb 1f       	adc	r27, r27
 868:	ee 1f       	adc	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	a2 17       	cp	r26, r18
 86e:	b3 07       	cpc	r27, r19
 870:	e4 07       	cpc	r30, r20
 872:	f5 07       	cpc	r31, r21
 874:	20 f0       	brcs	.+8      	; 0x87e <__udivmodsi4_ep>
 876:	a2 1b       	sub	r26, r18
 878:	b3 0b       	sbc	r27, r19
 87a:	e4 0b       	sbc	r30, r20
 87c:	f5 0b       	sbc	r31, r21

0000087e <__udivmodsi4_ep>:
 87e:	66 1f       	adc	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	1a 94       	dec	r1
 888:	69 f7       	brne	.-38     	; 0x864 <__udivmodsi4_loop>
 88a:	60 95       	com	r22
 88c:	70 95       	com	r23
 88e:	80 95       	com	r24
 890:	90 95       	com	r25
 892:	9b 01       	movw	r18, r22
 894:	ac 01       	movw	r20, r24
 896:	bd 01       	movw	r22, r26
 898:	cf 01       	movw	r24, r30
 89a:	08 95       	ret

0000089c <__udivmodhi4>:
 89c:	aa 1b       	sub	r26, r26
 89e:	bb 1b       	sub	r27, r27
 8a0:	51 e1       	ldi	r21, 0x11	; 17
 8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <__udivmodhi4_ep>

000008a4 <__udivmodhi4_loop>:
 8a4:	aa 1f       	adc	r26, r26
 8a6:	bb 1f       	adc	r27, r27
 8a8:	a6 17       	cp	r26, r22
 8aa:	b7 07       	cpc	r27, r23
 8ac:	10 f0       	brcs	.+4      	; 0x8b2 <__udivmodhi4_ep>
 8ae:	a6 1b       	sub	r26, r22
 8b0:	b7 0b       	sbc	r27, r23

000008b2 <__udivmodhi4_ep>:
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	5a 95       	dec	r21
 8b8:	a9 f7       	brne	.-22     	; 0x8a4 <__udivmodhi4_loop>
 8ba:	80 95       	com	r24
 8bc:	90 95       	com	r25
 8be:	bc 01       	movw	r22, r24
 8c0:	cd 01       	movw	r24, r26
 8c2:	08 95       	ret

000008c4 <do_rand>:
 8c4:	8f 92       	push	r8
 8c6:	9f 92       	push	r9
 8c8:	af 92       	push	r10
 8ca:	bf 92       	push	r11
 8cc:	cf 92       	push	r12
 8ce:	df 92       	push	r13
 8d0:	ef 92       	push	r14
 8d2:	ff 92       	push	r15
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	ec 01       	movw	r28, r24
 8da:	68 81       	ld	r22, Y
 8dc:	79 81       	ldd	r23, Y+1	; 0x01
 8de:	8a 81       	ldd	r24, Y+2	; 0x02
 8e0:	9b 81       	ldd	r25, Y+3	; 0x03
 8e2:	61 15       	cp	r22, r1
 8e4:	71 05       	cpc	r23, r1
 8e6:	81 05       	cpc	r24, r1
 8e8:	91 05       	cpc	r25, r1
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <do_rand+0x30>
 8ec:	64 e2       	ldi	r22, 0x24	; 36
 8ee:	79 ed       	ldi	r23, 0xD9	; 217
 8f0:	8b e5       	ldi	r24, 0x5B	; 91
 8f2:	97 e0       	ldi	r25, 0x07	; 7
 8f4:	2d e1       	ldi	r18, 0x1D	; 29
 8f6:	33 ef       	ldi	r19, 0xF3	; 243
 8f8:	41 e0       	ldi	r20, 0x01	; 1
 8fa:	50 e0       	ldi	r21, 0x00	; 0
 8fc:	0e 94 be 04 	call	0x97c	; 0x97c <__divmodsi4>
 900:	49 01       	movw	r8, r18
 902:	5a 01       	movw	r10, r20
 904:	9b 01       	movw	r18, r22
 906:	ac 01       	movw	r20, r24
 908:	a7 ea       	ldi	r26, 0xA7	; 167
 90a:	b1 e4       	ldi	r27, 0x41	; 65
 90c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__muluhisi3>
 910:	6b 01       	movw	r12, r22
 912:	7c 01       	movw	r14, r24
 914:	ac ee       	ldi	r26, 0xEC	; 236
 916:	b4 ef       	ldi	r27, 0xF4	; 244
 918:	a5 01       	movw	r20, r10
 91a:	94 01       	movw	r18, r8
 91c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__mulohisi3>
 920:	dc 01       	movw	r26, r24
 922:	cb 01       	movw	r24, r22
 924:	8c 0d       	add	r24, r12
 926:	9d 1d       	adc	r25, r13
 928:	ae 1d       	adc	r26, r14
 92a:	bf 1d       	adc	r27, r15
 92c:	b7 ff       	sbrs	r27, 7
 92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
 930:	01 97       	sbiw	r24, 0x01	; 1
 932:	a1 09       	sbc	r26, r1
 934:	b0 48       	sbci	r27, 0x80	; 128
 936:	88 83       	st	Y, r24
 938:	99 83       	std	Y+1, r25	; 0x01
 93a:	aa 83       	std	Y+2, r26	; 0x02
 93c:	bb 83       	std	Y+3, r27	; 0x03
 93e:	9f 77       	andi	r25, 0x7F	; 127
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	bf 90       	pop	r11
 94e:	af 90       	pop	r10
 950:	9f 90       	pop	r9
 952:	8f 90       	pop	r8
 954:	08 95       	ret

00000956 <rand_r>:
 956:	0e 94 62 04 	call	0x8c4	; 0x8c4 <do_rand>
 95a:	08 95       	ret

0000095c <rand>:
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	0e 94 62 04 	call	0x8c4	; 0x8c4 <do_rand>
 964:	08 95       	ret

00000966 <srand>:
 966:	a0 e0       	ldi	r26, 0x00	; 0
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 96e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 972:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 976:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 97a:	08 95       	ret

0000097c <__divmodsi4>:
 97c:	05 2e       	mov	r0, r21
 97e:	97 fb       	bst	r25, 7
 980:	1e f4       	brtc	.+6      	; 0x988 <__divmodsi4+0xc>
 982:	00 94       	com	r0
 984:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__negsi2>
 988:	57 fd       	sbrc	r21, 7
 98a:	07 d0       	rcall	.+14     	; 0x99a <__divmodsi4_neg2>
 98c:	0e 94 2c 04 	call	0x858	; 0x858 <__udivmodsi4>
 990:	07 fc       	sbrc	r0, 7
 992:	03 d0       	rcall	.+6      	; 0x99a <__divmodsi4_neg2>
 994:	4e f4       	brtc	.+18     	; 0x9a8 <__divmodsi4_exit>
 996:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__negsi2>

0000099a <__divmodsi4_neg2>:
 99a:	50 95       	com	r21
 99c:	40 95       	com	r20
 99e:	30 95       	com	r19
 9a0:	21 95       	neg	r18
 9a2:	3f 4f       	sbci	r19, 0xFF	; 255
 9a4:	4f 4f       	sbci	r20, 0xFF	; 255
 9a6:	5f 4f       	sbci	r21, 0xFF	; 255

000009a8 <__divmodsi4_exit>:
 9a8:	08 95       	ret

000009aa <__negsi2>:
 9aa:	90 95       	com	r25
 9ac:	80 95       	com	r24
 9ae:	70 95       	com	r23
 9b0:	61 95       	neg	r22
 9b2:	7f 4f       	sbci	r23, 0xFF	; 255
 9b4:	8f 4f       	sbci	r24, 0xFF	; 255
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	08 95       	ret

000009ba <__muluhisi3>:
 9ba:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__umulhisi3>
 9be:	a5 9f       	mul	r26, r21
 9c0:	90 0d       	add	r25, r0
 9c2:	b4 9f       	mul	r27, r20
 9c4:	90 0d       	add	r25, r0
 9c6:	a4 9f       	mul	r26, r20
 9c8:	80 0d       	add	r24, r0
 9ca:	91 1d       	adc	r25, r1
 9cc:	11 24       	eor	r1, r1
 9ce:	08 95       	ret

000009d0 <__mulshisi3>:
 9d0:	b7 ff       	sbrs	r27, 7
 9d2:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__muluhisi3>

000009d6 <__mulohisi3>:
 9d6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__muluhisi3>
 9da:	82 1b       	sub	r24, r18
 9dc:	93 0b       	sbc	r25, r19
 9de:	08 95       	ret

000009e0 <__umulhisi3>:
 9e0:	a2 9f       	mul	r26, r18
 9e2:	b0 01       	movw	r22, r0
 9e4:	b3 9f       	mul	r27, r19
 9e6:	c0 01       	movw	r24, r0
 9e8:	a3 9f       	mul	r26, r19
 9ea:	70 0d       	add	r23, r0
 9ec:	81 1d       	adc	r24, r1
 9ee:	11 24       	eor	r1, r1
 9f0:	91 1d       	adc	r25, r1
 9f2:	b2 9f       	mul	r27, r18
 9f4:	70 0d       	add	r23, r0
 9f6:	81 1d       	adc	r24, r1
 9f8:	11 24       	eor	r1, r1
 9fa:	91 1d       	adc	r25, r1
 9fc:	08 95       	ret

000009fe <_exit>:
 9fe:	f8 94       	cli

00000a00 <__stop_program>:
 a00:	ff cf       	rjmp	.-2      	; 0xa00 <__stop_program>
