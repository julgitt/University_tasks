
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  00000ab0  00000b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800240  00800240  00000c84  2**0
                  ALLOC
  3 .stab         00000f60  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f70  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b68  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000373e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  9e:	0c 94 56 05 	jmp	0xaac	; 0xaac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <i2cInit>:
#include "i2c.h"
void i2cInit() {
  // ustaw bitrate
  // 8MHz / (16+2*TWBR*1) ~= 100kHz
  TWBR = 32;
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  // uruchom TWI
  TWCR |= _BV(TWEN);
  ce:	ec eb       	ldi	r30, 0xBC	; 188
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <i2cWaitForComplete>:
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
  da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	87 ff       	sbrs	r24, 7
  e0:	fc cf       	rjmp	.-8      	; 0xda <i2cWaitForComplete>
}
  e2:	08 95       	ret

000000e4 <i2cStart>:
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  e4:	84 ea       	ldi	r24, 0xA4	; 164
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
  ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ee:	87 ff       	sbrs	r24, 7
  f0:	fc cf       	rjmp	.-8      	; 0xea <i2cStart+0x6>
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
  f2:	08 95       	ret

000000f4 <i2cStop>:
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
  f4:	84 e9       	ldi	r24, 0x94	; 148
  f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fa:	08 95       	ret

000000fc <i2cReset>:
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
  fc:	80 e9       	ldi	r24, 0x90	; 144
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 102:	08 95       	ret

00000104 <i2cReadAck>:
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 104:	84 ec       	ldi	r24, 0xC4	; 196
 106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 10a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10e:	87 ff       	sbrs	r24, 7
 110:	fc cf       	rjmp	.-8      	; 0x10a <i2cReadAck+0x6>
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  i2cWaitForComplete();
  return TWDR;
 112:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 116:	08 95       	ret

00000118 <i2cReadNoAck>:
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 11e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 122:	87 ff       	sbrs	r24, 7
 124:	fc cf       	rjmp	.-8      	; 0x11e <i2cReadNoAck+0x6>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
  return TWDR;
 126:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 12a:	08 95       	ret

0000012c <i2cSend>:
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
 12c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
 130:	84 e8       	ldi	r24, 0x84	; 132
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 136:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13a:	87 ff       	sbrs	r24, 7
 13c:	fc cf       	rjmp	.-8      	; 0x136 <i2cSend+0xa>
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
}
 13e:	08 95       	ret

00000140 <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 148:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 14c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 150:	88 e1       	ldi	r24, 0x18	; 24
 152:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 15c:	08 95       	ret

0000015e <main>:
  i2cCheck(0xf8, "I2C stop");
  return data;
}

int main()
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	00 d0       	rcall	.+0      	; 0x164 <main+0x6>
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 16a:	87 e6       	ldi	r24, 0x67	; 103
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 172:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 176:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
int main()
{
  // zainicjalizuj UART
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 186:	80 e4       	ldi	r24, 0x40	; 64
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	23 e5       	ldi	r18, 0x53	; 83
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	30 93 49 02 	sts	0x0249, r19	; 0x800249 <__data_end+0x9>
 192:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <__data_end+0x8>
 196:	2c e5       	ldi	r18, 0x5C	; 92
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	30 93 4b 02 	sts	0x024B, r19	; 0x80024b <__data_end+0xb>
 19e:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <__data_end+0xa>
 1a2:	23 e0       	ldi	r18, 0x03	; 3
 1a4:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <__data_end+0x3>
 1a8:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <__data_end+0xd>
 1ac:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
 1b0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <__iob+0x5>
 1b4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__iob+0x4>
 1b8:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__iob+0x3>
 1bc:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__iob+0x2>
 1c0:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <__iob+0x1>
 1c4:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__iob>
#include "i2c.h"
void i2cInit() {
  // ustaw bitrate
  // 8MHz / (16+2*TWBR*1) ~= 100kHz
  TWBR = 32;
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  // uruchom TWI
  TWCR |= _BV(TWEN);
 1ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // zainicjalizuj I2C
  i2cInit();
  // program testowy
  uint16_t addr = 0;
  uint8_t val = 0;
 1d8:	71 2c       	mov	r7, r1
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
  stdin = stdout = stderr = &uart_file;
  // zainicjalizuj I2C
  i2cInit();
  // program testowy
  uint16_t addr = 0;
 1da:	1b 82       	std	Y+3, r1	; 0x03
 1dc:	1a 82       	std	Y+2, r1	; 0x02
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
 1de:	94 ea       	ldi	r25, 0xA4	; 164
 1e0:	69 2e       	mov	r6, r25

const uint8_t eeprom_addr = 0xa0;

static inline void write (uint16_t addr, uint8_t val) {
  i2cStart();
  i2cCheck(0x08, "I2C start");
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	82 2e       	mov	r8, r18
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	92 2e       	mov	r9, r18
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 1ea:	00 e9       	ldi	r16, 0x90	; 144
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
  TWCR = _BV(TWINT) | _BV(TWEN);
 1ec:	14 e8       	ldi	r17, 0x84	; 132
    
  i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
  i2cCheck(0x18, "I2C EEPROM write request");
 1ee:	32 e2       	ldi	r19, 0x22	; 34
 1f0:	a3 2e       	mov	r10, r19
 1f2:	31 e0       	ldi	r19, 0x01	; 1
 1f4:	b3 2e       	mov	r11, r19
  i2cSend(addr & 0xff);
  i2cCheck(0x28, "I2C EEPROM set address");
 1f6:	42 e5       	ldi	r20, 0x52	; 82
 1f8:	24 2e       	mov	r2, r20
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	34 2e       	mov	r3, r20
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 1fe:	54 e9       	ldi	r21, 0x94	; 148
 200:	45 2e       	mov	r4, r21

  i2cSend(val);
  //i2cCheck(0x28, "I2C EEPROM send value ");
  i2cStop();
  i2cCheck(0xf8, "I2C stop");
 202:	60 e8       	ldi	r22, 0x80	; 128
 204:	c6 2e       	mov	r12, r22
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	d6 2e       	mov	r13, r22
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
 20a:	60 92 bc 00 	sts	0x00BC, r6	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 20e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 212:	87 ff       	sbrs	r24, 7
 214:	fc cf       	rjmp	.-8      	; 0x20e <main+0xb0>

const uint8_t eeprom_addr = 0xa0;

static inline void write (uint16_t addr, uint8_t val) {
  i2cStart();
  i2cCheck(0x08, "I2C start");
 216:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 21a:	88 7f       	andi	r24, 0xF8	; 248
 21c:	88 30       	cpi	r24, 0x08	; 8
 21e:	79 f0       	breq	.+30     	; 0x23e <main+0xe0>
 220:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 224:	88 7f       	andi	r24, 0xF8	; 248
 226:	1f 92       	push	r1
 228:	8f 93       	push	r24
 22a:	9f 92       	push	r9
 22c:	8f 92       	push	r8
 22e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 232:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
    
  i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
 23e:	ea 80       	ldd	r14, Y+2	; 0x02
 240:	fb 80       	ldd	r15, Y+3	; 0x03
 242:	ee 24       	eor	r14, r14
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	f2 22       	and	r15, r18
 248:	ee 0c       	add	r14, r14
 24a:	ef 2c       	mov	r14, r15
 24c:	ee 1c       	adc	r14, r14
 24e:	ff 08       	sbc	r15, r15
 250:	f1 94       	neg	r15
 252:	8e 2d       	mov	r24, r14
 254:	80 6a       	ori	r24, 0xA0	; 160
 256:	89 83       	std	Y+1, r24	; 0x01
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
 258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
 25c:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 260:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 264:	87 ff       	sbrs	r24, 7
 266:	fc cf       	rjmp	.-8      	; 0x260 <main+0x102>
  i2cCheck(0x18, "I2C EEPROM write request");
 268:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 26c:	88 7f       	andi	r24, 0xF8	; 248
 26e:	88 31       	cpi	r24, 0x18	; 24
 270:	79 f0       	breq	.+30     	; 0x290 <main+0x132>
 272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 276:	88 7f       	andi	r24, 0xF8	; 248
 278:	1f 92       	push	r1
 27a:	8f 93       	push	r24
 27c:	bf 92       	push	r11
 27e:	af 92       	push	r10
 280:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 284:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
  i2cSend(addr & 0xff);
 290:	5a 80       	ldd	r5, Y+2	; 0x02
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
 292:	50 92 bb 00 	sts	0x00BB, r5	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
 296:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 29a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29e:	87 ff       	sbrs	r24, 7
 2a0:	fc cf       	rjmp	.-8      	; 0x29a <main+0x13c>
  i2cCheck(0x28, "I2C EEPROM set address");
 2a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2a6:	88 7f       	andi	r24, 0xF8	; 248
 2a8:	88 32       	cpi	r24, 0x28	; 40
 2aa:	79 f0       	breq	.+30     	; 0x2ca <main+0x16c>
 2ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2b0:	88 7f       	andi	r24, 0xF8	; 248
 2b2:	1f 92       	push	r1
 2b4:	8f 93       	push	r24
 2b6:	3f 92       	push	r3
 2b8:	2f 92       	push	r2
 2ba:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 2be:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
 2ca:	70 92 bb 00 	sts	0x00BB, r7	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
 2ce:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d6:	87 ff       	sbrs	r24, 7
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <main+0x174>
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 2da:	40 92 bc 00 	sts	0x00BC, r4	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  i2cSend(val);
  //i2cCheck(0x28, "I2C EEPROM send value ");
  i2cStop();
  i2cCheck(0xf8, "I2C stop");
 2de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2e2:	88 7f       	andi	r24, 0xF8	; 248
 2e4:	88 3f       	cpi	r24, 0xF8	; 248
 2e6:	79 f0       	breq	.+30     	; 0x306 <main+0x1a8>
 2e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	1f 92       	push	r1
 2f0:	8f 93       	push	r24
 2f2:	df 92       	push	r13
 2f4:	cf 92       	push	r12
 2f6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 2fa:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
      printf("Invalid command. Use write/read instead\r\n");
    }
  }*/
  while(1) {
     write(addr, val);
     printf("write:%.3x: %x\r\n", addr, val);
 306:	1f 92       	push	r1
 308:	7f 92       	push	r7
 30a:	9b 81       	ldd	r25, Y+3	; 0x03
 30c:	9f 93       	push	r25
 30e:	2a 81       	ldd	r18, Y+2	; 0x02
 310:	2f 93       	push	r18
 312:	80 ea       	ldi	r24, 0xA0	; 160
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9f 93       	push	r25
 318:	8f 93       	push	r24
 31a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
 31e:	60 92 bc 00 	sts	0x00BC, r6	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 32e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 332:	87 ff       	sbrs	r24, 7
 334:	fc cf       	rjmp	.-8      	; 0x32e <main+0x1d0>
  i2cCheck(0xf8, "I2C stop");
}

static inline int read (uint16_t addr) {
  i2cStart();
  i2cCheck(0x08, "I2C start");
 336:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 33a:	88 7f       	andi	r24, 0xF8	; 248
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	79 f0       	breq	.+30     	; 0x35e <main+0x200>
 340:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 344:	88 7f       	andi	r24, 0xF8	; 248
 346:	1f 92       	push	r1
 348:	8f 93       	push	r24
 34a:	9f 92       	push	r9
 34c:	8f 92       	push	r8
 34e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 352:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
 364:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 368:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 36c:	87 ff       	sbrs	r24, 7
 36e:	fc cf       	rjmp	.-8      	; 0x368 <main+0x20a>
    
  i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
  i2cCheck(0x18, "I2C EEPROM write request");
 370:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 374:	88 7f       	andi	r24, 0xF8	; 248
 376:	88 31       	cpi	r24, 0x18	; 24
 378:	79 f0       	breq	.+30     	; 0x398 <main+0x23a>
 37a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 37e:	88 7f       	andi	r24, 0xF8	; 248
 380:	1f 92       	push	r1
 382:	8f 93       	push	r24
 384:	bf 92       	push	r11
 386:	af 92       	push	r10
 388:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 38c:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
 398:	50 92 bb 00 	sts	0x00BB, r5	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
 39c:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 3a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a4:	87 ff       	sbrs	r24, 7
 3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <main+0x242>
  i2cSend(addr & 0xff);
  i2cCheck(0x28, "I2C EEPROM set address");
 3a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3ac:	88 7f       	andi	r24, 0xF8	; 248
 3ae:	88 32       	cpi	r24, 0x28	; 40
 3b0:	79 f0       	breq	.+30     	; 0x3d0 <main+0x272>
 3b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3b6:	88 7f       	andi	r24, 0xF8	; 248
 3b8:	1f 92       	push	r1
 3ba:	8f 93       	push	r24
 3bc:	3f 92       	push	r3
 3be:	2f 92       	push	r2
 3c0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 3c4:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
 3d0:	60 92 bc 00 	sts	0x00BC, r6	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 3d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3d8:	87 ff       	sbrs	r24, 7
 3da:	fc cf       	rjmp	.-8      	; 0x3d4 <main+0x276>
  
  i2cStart();
  i2cCheck(0x10, "I2C second start");
 3dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3e0:	88 7f       	andi	r24, 0xF8	; 248
 3e2:	80 31       	cpi	r24, 0x10	; 16
 3e4:	89 f0       	breq	.+34     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3ea:	88 7f       	andi	r24, 0xF8	; 248
 3ec:	1f 92       	push	r1
 3ee:	8f 93       	push	r24
 3f0:	81 eb       	ldi	r24, 0xB1	; 177
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	9f 93       	push	r25
 3f6:	8f 93       	push	r24
 3f8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 3fc:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
  i2cSend(eeprom_addr | 0x1 | ((addr & 0x100) >> 7));
 408:	8e 2d       	mov	r24, r14
 40a:	81 6a       	ori	r24, 0xA1	; 161
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
 40c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
 410:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 414:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 418:	87 ff       	sbrs	r24, 7
 41a:	fc cf       	rjmp	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
  i2cCheck(0x40, "I2C EEPROM read request");
 41c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 420:	88 7f       	andi	r24, 0xF8	; 248
 422:	80 34       	cpi	r24, 0x40	; 64
 424:	89 f0       	breq	.+34     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 426:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 42a:	88 7f       	andi	r24, 0xF8	; 248
 42c:	1f 92       	push	r1
 42e:	8f 93       	push	r24
 430:	89 ed       	ldi	r24, 0xD9	; 217
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	9f 93       	push	r25
 436:	8f 93       	push	r24
 438:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 43c:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
  i2cWaitForComplete();
  return TWDR;
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
 448:	10 93 bc 00 	sts	0x00BC, r17	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 44c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 450:	87 ff       	sbrs	r24, 7
 452:	fc cf       	rjmp	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
  return TWDR;
 454:	f0 90 bb 00 	lds	r15, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  uint8_t data = i2cReadNoAck();
  i2cCheck(0x58, "I2C EEPROM read");
 458:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 45c:	88 7f       	andi	r24, 0xF8	; 248
 45e:	88 35       	cpi	r24, 0x58	; 88
 460:	89 f0       	breq	.+34     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 462:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 466:	88 7f       	andi	r24, 0xF8	; 248
 468:	1f 92       	push	r1
 46a:	8f 93       	push	r24
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	9f 93       	push	r25
 472:	8f 93       	push	r24
 474:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 478:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 484:	40 92 bc 00 	sts	0x00BC, r4	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  i2cStop();
  i2cCheck(0xf8, "I2C stop");
 488:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 48c:	88 7f       	andi	r24, 0xF8	; 248
 48e:	88 3f       	cpi	r24, 0xF8	; 248
 490:	79 f0       	breq	.+30     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 492:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 496:	88 7f       	andi	r24, 0xF8	; 248
 498:	1f 92       	push	r1
 49a:	8f 93       	push	r24
 49c:	df 92       	push	r13
 49e:	cf 92       	push	r12
 4a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 4a4:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
  while(1) {
     write(addr, val);
     printf("write:%.3x: %x\r\n", addr, val);
     uint8_t  res = read(addr);
    
     printf("read:%.3x: %x\r\n", addr, res);
 4b0:	1f 92       	push	r1
 4b2:	ff 92       	push	r15
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	8f 93       	push	r24
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	9f 93       	push	r25
 4bc:	8f e2       	ldi	r24, 0x2F	; 47
 4be:	92 e0       	ldi	r25, 0x02	; 2
 4c0:	9f 93       	push	r25
 4c2:	8f 93       	push	r24
 4c4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <printf>
     addr++;
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	9b 81       	ldd	r25, Y+3	; 0x03
 4cc:	01 96       	adiw	r24, 0x01	; 1
     addr &= 0x1ff;
 4ce:	91 70       	andi	r25, 0x01	; 1
 4d0:	9b 83       	std	Y+3, r25	; 0x03
 4d2:	8a 83       	std	Y+2, r24	; 0x02
     val++;
 4d4:	73 94       	inc	r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d6:	8f e3       	ldi	r24, 0x3F	; 63
 4d8:	9c e9       	ldi	r25, 0x9C	; 156
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4e0:	00 00       	nop
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	8d ce       	rjmp	.-742    	; 0x20a <main+0xac>

000004f0 <printf>:
 4f0:	a0 e0       	ldi	r26, 0x00	; 0
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	ee e7       	ldi	r30, 0x7E	; 126
 4f6:	f2 e0       	ldi	r31, 0x02	; 2
 4f8:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__prologue_saves__+0x20>
 4fc:	ae 01       	movw	r20, r28
 4fe:	4b 5f       	subi	r20, 0xFB	; 251
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	fa 01       	movw	r30, r20
 504:	61 91       	ld	r22, Z+
 506:	71 91       	ld	r23, Z+
 508:	af 01       	movw	r20, r30
 50a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__iob+0x2>
 50e:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__iob+0x3>
 512:	0e 94 8e 02 	call	0x51c	; 0x51c <vfprintf>
 516:	e2 e0       	ldi	r30, 0x02	; 2
 518:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__epilogue_restores__+0x20>

0000051c <vfprintf>:
 51c:	ab e0       	ldi	r26, 0x0B	; 11
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e4 e9       	ldi	r30, 0x94	; 148
 522:	f2 e0       	ldi	r31, 0x02	; 2
 524:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__prologue_saves__>
 528:	6c 01       	movw	r12, r24
 52a:	7b 01       	movw	r14, r22
 52c:	8a 01       	movw	r16, r20
 52e:	fc 01       	movw	r30, r24
 530:	17 82       	std	Z+7, r1	; 0x07
 532:	16 82       	std	Z+6, r1	; 0x06
 534:	83 81       	ldd	r24, Z+3	; 0x03
 536:	81 ff       	sbrs	r24, 1
 538:	cc c1       	rjmp	.+920    	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	3c 01       	movw	r6, r24
 540:	f6 01       	movw	r30, r12
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	f7 01       	movw	r30, r14
 546:	93 fd       	sbrc	r25, 3
 548:	85 91       	lpm	r24, Z+
 54a:	93 ff       	sbrs	r25, 3
 54c:	81 91       	ld	r24, Z+
 54e:	7f 01       	movw	r14, r30
 550:	88 23       	and	r24, r24
 552:	09 f4       	brne	.+2      	; 0x556 <vfprintf+0x3a>
 554:	ba c1       	rjmp	.+884    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 556:	85 32       	cpi	r24, 0x25	; 37
 558:	39 f4       	brne	.+14     	; 0x568 <vfprintf+0x4c>
 55a:	93 fd       	sbrc	r25, 3
 55c:	85 91       	lpm	r24, Z+
 55e:	93 ff       	sbrs	r25, 3
 560:	81 91       	ld	r24, Z+
 562:	7f 01       	movw	r14, r30
 564:	85 32       	cpi	r24, 0x25	; 37
 566:	29 f4       	brne	.+10     	; 0x572 <vfprintf+0x56>
 568:	b6 01       	movw	r22, r12
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 570:	e7 cf       	rjmp	.-50     	; 0x540 <vfprintf+0x24>
 572:	91 2c       	mov	r9, r1
 574:	21 2c       	mov	r2, r1
 576:	31 2c       	mov	r3, r1
 578:	ff e1       	ldi	r31, 0x1F	; 31
 57a:	f3 15       	cp	r31, r3
 57c:	d8 f0       	brcs	.+54     	; 0x5b4 <vfprintf+0x98>
 57e:	8b 32       	cpi	r24, 0x2B	; 43
 580:	79 f0       	breq	.+30     	; 0x5a0 <vfprintf+0x84>
 582:	38 f4       	brcc	.+14     	; 0x592 <vfprintf+0x76>
 584:	80 32       	cpi	r24, 0x20	; 32
 586:	79 f0       	breq	.+30     	; 0x5a6 <vfprintf+0x8a>
 588:	83 32       	cpi	r24, 0x23	; 35
 58a:	a1 f4       	brne	.+40     	; 0x5b4 <vfprintf+0x98>
 58c:	23 2d       	mov	r18, r3
 58e:	20 61       	ori	r18, 0x10	; 16
 590:	1d c0       	rjmp	.+58     	; 0x5cc <vfprintf+0xb0>
 592:	8d 32       	cpi	r24, 0x2D	; 45
 594:	61 f0       	breq	.+24     	; 0x5ae <vfprintf+0x92>
 596:	80 33       	cpi	r24, 0x30	; 48
 598:	69 f4       	brne	.+26     	; 0x5b4 <vfprintf+0x98>
 59a:	23 2d       	mov	r18, r3
 59c:	21 60       	ori	r18, 0x01	; 1
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <vfprintf+0xb0>
 5a0:	83 2d       	mov	r24, r3
 5a2:	82 60       	ori	r24, 0x02	; 2
 5a4:	38 2e       	mov	r3, r24
 5a6:	e3 2d       	mov	r30, r3
 5a8:	e4 60       	ori	r30, 0x04	; 4
 5aa:	3e 2e       	mov	r3, r30
 5ac:	2a c0       	rjmp	.+84     	; 0x602 <vfprintf+0xe6>
 5ae:	f3 2d       	mov	r31, r3
 5b0:	f8 60       	ori	r31, 0x08	; 8
 5b2:	1d c0       	rjmp	.+58     	; 0x5ee <vfprintf+0xd2>
 5b4:	37 fc       	sbrc	r3, 7
 5b6:	2d c0       	rjmp	.+90     	; 0x612 <vfprintf+0xf6>
 5b8:	20 ed       	ldi	r18, 0xD0	; 208
 5ba:	28 0f       	add	r18, r24
 5bc:	2a 30       	cpi	r18, 0x0A	; 10
 5be:	40 f0       	brcs	.+16     	; 0x5d0 <vfprintf+0xb4>
 5c0:	8e 32       	cpi	r24, 0x2E	; 46
 5c2:	b9 f4       	brne	.+46     	; 0x5f2 <vfprintf+0xd6>
 5c4:	36 fc       	sbrc	r3, 6
 5c6:	81 c1       	rjmp	.+770    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 5c8:	23 2d       	mov	r18, r3
 5ca:	20 64       	ori	r18, 0x40	; 64
 5cc:	32 2e       	mov	r3, r18
 5ce:	19 c0       	rjmp	.+50     	; 0x602 <vfprintf+0xe6>
 5d0:	36 fe       	sbrs	r3, 6
 5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <vfprintf+0xc4>
 5d4:	8a e0       	ldi	r24, 0x0A	; 10
 5d6:	98 9e       	mul	r9, r24
 5d8:	20 0d       	add	r18, r0
 5da:	11 24       	eor	r1, r1
 5dc:	92 2e       	mov	r9, r18
 5de:	11 c0       	rjmp	.+34     	; 0x602 <vfprintf+0xe6>
 5e0:	ea e0       	ldi	r30, 0x0A	; 10
 5e2:	2e 9e       	mul	r2, r30
 5e4:	20 0d       	add	r18, r0
 5e6:	11 24       	eor	r1, r1
 5e8:	22 2e       	mov	r2, r18
 5ea:	f3 2d       	mov	r31, r3
 5ec:	f0 62       	ori	r31, 0x20	; 32
 5ee:	3f 2e       	mov	r3, r31
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <vfprintf+0xe6>
 5f2:	8c 36       	cpi	r24, 0x6C	; 108
 5f4:	21 f4       	brne	.+8      	; 0x5fe <vfprintf+0xe2>
 5f6:	83 2d       	mov	r24, r3
 5f8:	80 68       	ori	r24, 0x80	; 128
 5fa:	38 2e       	mov	r3, r24
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <vfprintf+0xe6>
 5fe:	88 36       	cpi	r24, 0x68	; 104
 600:	41 f4       	brne	.+16     	; 0x612 <vfprintf+0xf6>
 602:	f7 01       	movw	r30, r14
 604:	93 fd       	sbrc	r25, 3
 606:	85 91       	lpm	r24, Z+
 608:	93 ff       	sbrs	r25, 3
 60a:	81 91       	ld	r24, Z+
 60c:	7f 01       	movw	r14, r30
 60e:	81 11       	cpse	r24, r1
 610:	b3 cf       	rjmp	.-154    	; 0x578 <vfprintf+0x5c>
 612:	98 2f       	mov	r25, r24
 614:	9f 7d       	andi	r25, 0xDF	; 223
 616:	95 54       	subi	r25, 0x45	; 69
 618:	93 30       	cpi	r25, 0x03	; 3
 61a:	28 f4       	brcc	.+10     	; 0x626 <vfprintf+0x10a>
 61c:	0c 5f       	subi	r16, 0xFC	; 252
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	9f e3       	ldi	r25, 0x3F	; 63
 622:	99 83       	std	Y+1, r25	; 0x01
 624:	0d c0       	rjmp	.+26     	; 0x640 <vfprintf+0x124>
 626:	83 36       	cpi	r24, 0x63	; 99
 628:	31 f0       	breq	.+12     	; 0x636 <vfprintf+0x11a>
 62a:	83 37       	cpi	r24, 0x73	; 115
 62c:	71 f0       	breq	.+28     	; 0x64a <vfprintf+0x12e>
 62e:	83 35       	cpi	r24, 0x53	; 83
 630:	09 f0       	breq	.+2      	; 0x634 <vfprintf+0x118>
 632:	59 c0       	rjmp	.+178    	; 0x6e6 <vfprintf+0x1ca>
 634:	21 c0       	rjmp	.+66     	; 0x678 <vfprintf+0x15c>
 636:	f8 01       	movw	r30, r16
 638:	80 81       	ld	r24, Z
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	0e 5f       	subi	r16, 0xFE	; 254
 63e:	1f 4f       	sbci	r17, 0xFF	; 255
 640:	88 24       	eor	r8, r8
 642:	83 94       	inc	r8
 644:	91 2c       	mov	r9, r1
 646:	53 01       	movw	r10, r6
 648:	13 c0       	rjmp	.+38     	; 0x670 <vfprintf+0x154>
 64a:	28 01       	movw	r4, r16
 64c:	f2 e0       	ldi	r31, 0x02	; 2
 64e:	4f 0e       	add	r4, r31
 650:	51 1c       	adc	r5, r1
 652:	f8 01       	movw	r30, r16
 654:	a0 80       	ld	r10, Z
 656:	b1 80       	ldd	r11, Z+1	; 0x01
 658:	36 fe       	sbrs	r3, 6
 65a:	03 c0       	rjmp	.+6      	; 0x662 <vfprintf+0x146>
 65c:	69 2d       	mov	r22, r9
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <vfprintf+0x14a>
 662:	6f ef       	ldi	r22, 0xFF	; 255
 664:	7f ef       	ldi	r23, 0xFF	; 255
 666:	c5 01       	movw	r24, r10
 668:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <strnlen>
 66c:	4c 01       	movw	r8, r24
 66e:	82 01       	movw	r16, r4
 670:	f3 2d       	mov	r31, r3
 672:	ff 77       	andi	r31, 0x7F	; 127
 674:	3f 2e       	mov	r3, r31
 676:	16 c0       	rjmp	.+44     	; 0x6a4 <vfprintf+0x188>
 678:	28 01       	movw	r4, r16
 67a:	22 e0       	ldi	r18, 0x02	; 2
 67c:	42 0e       	add	r4, r18
 67e:	51 1c       	adc	r5, r1
 680:	f8 01       	movw	r30, r16
 682:	a0 80       	ld	r10, Z
 684:	b1 80       	ldd	r11, Z+1	; 0x01
 686:	36 fe       	sbrs	r3, 6
 688:	03 c0       	rjmp	.+6      	; 0x690 <vfprintf+0x174>
 68a:	69 2d       	mov	r22, r9
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <vfprintf+0x178>
 690:	6f ef       	ldi	r22, 0xFF	; 255
 692:	7f ef       	ldi	r23, 0xFF	; 255
 694:	c5 01       	movw	r24, r10
 696:	0e 94 6f 04 	call	0x8de	; 0x8de <strnlen_P>
 69a:	4c 01       	movw	r8, r24
 69c:	f3 2d       	mov	r31, r3
 69e:	f0 68       	ori	r31, 0x80	; 128
 6a0:	3f 2e       	mov	r3, r31
 6a2:	82 01       	movw	r16, r4
 6a4:	33 fc       	sbrc	r3, 3
 6a6:	1b c0       	rjmp	.+54     	; 0x6de <vfprintf+0x1c2>
 6a8:	82 2d       	mov	r24, r2
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	88 16       	cp	r8, r24
 6ae:	99 06       	cpc	r9, r25
 6b0:	b0 f4       	brcc	.+44     	; 0x6de <vfprintf+0x1c2>
 6b2:	b6 01       	movw	r22, r12
 6b4:	80 e2       	ldi	r24, 0x20	; 32
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 6bc:	2a 94       	dec	r2
 6be:	f4 cf       	rjmp	.-24     	; 0x6a8 <vfprintf+0x18c>
 6c0:	f5 01       	movw	r30, r10
 6c2:	37 fc       	sbrc	r3, 7
 6c4:	85 91       	lpm	r24, Z+
 6c6:	37 fe       	sbrs	r3, 7
 6c8:	81 91       	ld	r24, Z+
 6ca:	5f 01       	movw	r10, r30
 6cc:	b6 01       	movw	r22, r12
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 6d4:	21 10       	cpse	r2, r1
 6d6:	2a 94       	dec	r2
 6d8:	21 e0       	ldi	r18, 0x01	; 1
 6da:	82 1a       	sub	r8, r18
 6dc:	91 08       	sbc	r9, r1
 6de:	81 14       	cp	r8, r1
 6e0:	91 04       	cpc	r9, r1
 6e2:	71 f7       	brne	.-36     	; 0x6c0 <vfprintf+0x1a4>
 6e4:	e8 c0       	rjmp	.+464    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 6e6:	84 36       	cpi	r24, 0x64	; 100
 6e8:	11 f0       	breq	.+4      	; 0x6ee <vfprintf+0x1d2>
 6ea:	89 36       	cpi	r24, 0x69	; 105
 6ec:	41 f5       	brne	.+80     	; 0x73e <vfprintf+0x222>
 6ee:	f8 01       	movw	r30, r16
 6f0:	37 fe       	sbrs	r3, 7
 6f2:	07 c0       	rjmp	.+14     	; 0x702 <vfprintf+0x1e6>
 6f4:	60 81       	ld	r22, Z
 6f6:	71 81       	ldd	r23, Z+1	; 0x01
 6f8:	82 81       	ldd	r24, Z+2	; 0x02
 6fa:	93 81       	ldd	r25, Z+3	; 0x03
 6fc:	0c 5f       	subi	r16, 0xFC	; 252
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	08 c0       	rjmp	.+16     	; 0x712 <vfprintf+0x1f6>
 702:	60 81       	ld	r22, Z
 704:	71 81       	ldd	r23, Z+1	; 0x01
 706:	07 2e       	mov	r0, r23
 708:	00 0c       	add	r0, r0
 70a:	88 0b       	sbc	r24, r24
 70c:	99 0b       	sbc	r25, r25
 70e:	0e 5f       	subi	r16, 0xFE	; 254
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	f3 2d       	mov	r31, r3
 714:	ff 76       	andi	r31, 0x6F	; 111
 716:	3f 2e       	mov	r3, r31
 718:	97 ff       	sbrs	r25, 7
 71a:	09 c0       	rjmp	.+18     	; 0x72e <vfprintf+0x212>
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	f0 68       	ori	r31, 0x80	; 128
 72c:	3f 2e       	mov	r3, r31
 72e:	2a e0       	ldi	r18, 0x0A	; 10
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	a3 01       	movw	r20, r6
 734:	0e 94 c1 04 	call	0x982	; 0x982 <__ultoa_invert>
 738:	88 2e       	mov	r8, r24
 73a:	86 18       	sub	r8, r6
 73c:	45 c0       	rjmp	.+138    	; 0x7c8 <vfprintf+0x2ac>
 73e:	85 37       	cpi	r24, 0x75	; 117
 740:	31 f4       	brne	.+12     	; 0x74e <vfprintf+0x232>
 742:	23 2d       	mov	r18, r3
 744:	2f 7e       	andi	r18, 0xEF	; 239
 746:	b2 2e       	mov	r11, r18
 748:	2a e0       	ldi	r18, 0x0A	; 10
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	25 c0       	rjmp	.+74     	; 0x798 <vfprintf+0x27c>
 74e:	93 2d       	mov	r25, r3
 750:	99 7f       	andi	r25, 0xF9	; 249
 752:	b9 2e       	mov	r11, r25
 754:	8f 36       	cpi	r24, 0x6F	; 111
 756:	c1 f0       	breq	.+48     	; 0x788 <vfprintf+0x26c>
 758:	18 f4       	brcc	.+6      	; 0x760 <vfprintf+0x244>
 75a:	88 35       	cpi	r24, 0x58	; 88
 75c:	79 f0       	breq	.+30     	; 0x77c <vfprintf+0x260>
 75e:	b5 c0       	rjmp	.+362    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 760:	80 37       	cpi	r24, 0x70	; 112
 762:	19 f0       	breq	.+6      	; 0x76a <vfprintf+0x24e>
 764:	88 37       	cpi	r24, 0x78	; 120
 766:	21 f0       	breq	.+8      	; 0x770 <vfprintf+0x254>
 768:	b0 c0       	rjmp	.+352    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 76a:	e9 2f       	mov	r30, r25
 76c:	e0 61       	ori	r30, 0x10	; 16
 76e:	be 2e       	mov	r11, r30
 770:	b4 fe       	sbrs	r11, 4
 772:	0d c0       	rjmp	.+26     	; 0x78e <vfprintf+0x272>
 774:	fb 2d       	mov	r31, r11
 776:	f4 60       	ori	r31, 0x04	; 4
 778:	bf 2e       	mov	r11, r31
 77a:	09 c0       	rjmp	.+18     	; 0x78e <vfprintf+0x272>
 77c:	34 fe       	sbrs	r3, 4
 77e:	0a c0       	rjmp	.+20     	; 0x794 <vfprintf+0x278>
 780:	29 2f       	mov	r18, r25
 782:	26 60       	ori	r18, 0x06	; 6
 784:	b2 2e       	mov	r11, r18
 786:	06 c0       	rjmp	.+12     	; 0x794 <vfprintf+0x278>
 788:	28 e0       	ldi	r18, 0x08	; 8
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	05 c0       	rjmp	.+10     	; 0x798 <vfprintf+0x27c>
 78e:	20 e1       	ldi	r18, 0x10	; 16
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x27c>
 794:	20 e1       	ldi	r18, 0x10	; 16
 796:	32 e0       	ldi	r19, 0x02	; 2
 798:	f8 01       	movw	r30, r16
 79a:	b7 fe       	sbrs	r11, 7
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <vfprintf+0x290>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	0c 5f       	subi	r16, 0xFC	; 252
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <vfprintf+0x29c>
 7ac:	60 81       	ld	r22, Z
 7ae:	71 81       	ldd	r23, Z+1	; 0x01
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 5f       	subi	r16, 0xFE	; 254
 7b6:	1f 4f       	sbci	r17, 0xFF	; 255
 7b8:	a3 01       	movw	r20, r6
 7ba:	0e 94 c1 04 	call	0x982	; 0x982 <__ultoa_invert>
 7be:	88 2e       	mov	r8, r24
 7c0:	86 18       	sub	r8, r6
 7c2:	fb 2d       	mov	r31, r11
 7c4:	ff 77       	andi	r31, 0x7F	; 127
 7c6:	3f 2e       	mov	r3, r31
 7c8:	36 fe       	sbrs	r3, 6
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <vfprintf+0x2ca>
 7cc:	23 2d       	mov	r18, r3
 7ce:	2e 7f       	andi	r18, 0xFE	; 254
 7d0:	a2 2e       	mov	r10, r18
 7d2:	89 14       	cp	r8, r9
 7d4:	58 f4       	brcc	.+22     	; 0x7ec <vfprintf+0x2d0>
 7d6:	34 fe       	sbrs	r3, 4
 7d8:	0b c0       	rjmp	.+22     	; 0x7f0 <vfprintf+0x2d4>
 7da:	32 fc       	sbrc	r3, 2
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <vfprintf+0x2d4>
 7de:	83 2d       	mov	r24, r3
 7e0:	8e 7e       	andi	r24, 0xEE	; 238
 7e2:	a8 2e       	mov	r10, r24
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <vfprintf+0x2d4>
 7e6:	b8 2c       	mov	r11, r8
 7e8:	a3 2c       	mov	r10, r3
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <vfprintf+0x2d6>
 7ec:	b8 2c       	mov	r11, r8
 7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <vfprintf+0x2d6>
 7f0:	b9 2c       	mov	r11, r9
 7f2:	a4 fe       	sbrs	r10, 4
 7f4:	0f c0       	rjmp	.+30     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f6:	fe 01       	movw	r30, r28
 7f8:	e8 0d       	add	r30, r8
 7fa:	f1 1d       	adc	r31, r1
 7fc:	80 81       	ld	r24, Z
 7fe:	80 33       	cpi	r24, 0x30	; 48
 800:	21 f4       	brne	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 802:	9a 2d       	mov	r25, r10
 804:	99 7e       	andi	r25, 0xE9	; 233
 806:	a9 2e       	mov	r10, r25
 808:	09 c0       	rjmp	.+18     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 80a:	a2 fe       	sbrs	r10, 2
 80c:	06 c0       	rjmp	.+12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80e:	b3 94       	inc	r11
 810:	b3 94       	inc	r11
 812:	04 c0       	rjmp	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 814:	8a 2d       	mov	r24, r10
 816:	86 78       	andi	r24, 0x86	; 134
 818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81a:	b3 94       	inc	r11
 81c:	a3 fc       	sbrc	r10, 3
 81e:	11 c0       	rjmp	.+34     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 820:	a0 fe       	sbrs	r10, 0
 822:	06 c0       	rjmp	.+12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 824:	b2 14       	cp	r11, r2
 826:	88 f4       	brcc	.+34     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 828:	28 0c       	add	r2, r8
 82a:	92 2c       	mov	r9, r2
 82c:	9b 18       	sub	r9, r11
 82e:	0e c0       	rjmp	.+28     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 830:	b2 14       	cp	r11, r2
 832:	60 f4       	brcc	.+24     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 834:	b6 01       	movw	r22, r12
 836:	80 e2       	ldi	r24, 0x20	; 32
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 83e:	b3 94       	inc	r11
 840:	f7 cf       	rjmp	.-18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 842:	b2 14       	cp	r11, r2
 844:	18 f4       	brcc	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 846:	2b 18       	sub	r2, r11
 848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	98 2c       	mov	r9, r8
 84c:	21 2c       	mov	r2, r1
 84e:	a4 fe       	sbrs	r10, 4
 850:	10 c0       	rjmp	.+32     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 852:	b6 01       	movw	r22, r12
 854:	80 e3       	ldi	r24, 0x30	; 48
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 85c:	a2 fe       	sbrs	r10, 2
 85e:	17 c0       	rjmp	.+46     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 860:	a1 fc       	sbrc	r10, 1
 862:	03 c0       	rjmp	.+6      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 864:	88 e7       	ldi	r24, 0x78	; 120
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	02 c0       	rjmp	.+4      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86a:	88 e5       	ldi	r24, 0x58	; 88
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	b6 01       	movw	r22, r12
 870:	0c c0       	rjmp	.+24     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 872:	8a 2d       	mov	r24, r10
 874:	86 78       	andi	r24, 0x86	; 134
 876:	59 f0       	breq	.+22     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 878:	a1 fe       	sbrs	r10, 1
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 87c:	8b e2       	ldi	r24, 0x2B	; 43
 87e:	01 c0       	rjmp	.+2      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	a7 fc       	sbrc	r10, 7
 884:	8d e2       	ldi	r24, 0x2D	; 45
 886:	b6 01       	movw	r22, r12
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 88e:	89 14       	cp	r8, r9
 890:	38 f4       	brcc	.+14     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 892:	b6 01       	movw	r22, r12
 894:	80 e3       	ldi	r24, 0x30	; 48
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 89c:	9a 94       	dec	r9
 89e:	f7 cf       	rjmp	.-18     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 8a0:	8a 94       	dec	r8
 8a2:	f3 01       	movw	r30, r6
 8a4:	e8 0d       	add	r30, r8
 8a6:	f1 1d       	adc	r31, r1
 8a8:	80 81       	ld	r24, Z
 8aa:	b6 01       	movw	r22, r12
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 8b2:	81 10       	cpse	r8, r1
 8b4:	f5 cf       	rjmp	.-22     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 8b6:	22 20       	and	r2, r2
 8b8:	09 f4       	brne	.+2      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8ba:	42 ce       	rjmp	.-892    	; 0x540 <vfprintf+0x24>
 8bc:	b6 01       	movw	r22, r12
 8be:	80 e2       	ldi	r24, 0x20	; 32
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 85 04 	call	0x90a	; 0x90a <fputc>
 8c6:	2a 94       	dec	r2
 8c8:	f6 cf       	rjmp	.-20     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8ca:	f6 01       	movw	r30, r12
 8cc:	86 81       	ldd	r24, Z+6	; 0x06
 8ce:	97 81       	ldd	r25, Z+7	; 0x07
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	9f ef       	ldi	r25, 0xFF	; 255
 8d6:	2b 96       	adiw	r28, 0x0b	; 11
 8d8:	e2 e1       	ldi	r30, 0x12	; 18
 8da:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__epilogue_restores__>

000008de <strnlen_P>:
 8de:	fc 01       	movw	r30, r24
 8e0:	05 90       	lpm	r0, Z+
 8e2:	61 50       	subi	r22, 0x01	; 1
 8e4:	70 40       	sbci	r23, 0x00	; 0
 8e6:	01 10       	cpse	r0, r1
 8e8:	d8 f7       	brcc	.-10     	; 0x8e0 <strnlen_P+0x2>
 8ea:	80 95       	com	r24
 8ec:	90 95       	com	r25
 8ee:	8e 0f       	add	r24, r30
 8f0:	9f 1f       	adc	r25, r31
 8f2:	08 95       	ret

000008f4 <strnlen>:
 8f4:	fc 01       	movw	r30, r24
 8f6:	61 50       	subi	r22, 0x01	; 1
 8f8:	70 40       	sbci	r23, 0x00	; 0
 8fa:	01 90       	ld	r0, Z+
 8fc:	01 10       	cpse	r0, r1
 8fe:	d8 f7       	brcc	.-10     	; 0x8f6 <strnlen+0x2>
 900:	80 95       	com	r24
 902:	90 95       	com	r25
 904:	8e 0f       	add	r24, r30
 906:	9f 1f       	adc	r25, r31
 908:	08 95       	ret

0000090a <fputc>:
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	fb 01       	movw	r30, r22
 914:	23 81       	ldd	r18, Z+3	; 0x03
 916:	21 fd       	sbrc	r18, 1
 918:	03 c0       	rjmp	.+6      	; 0x920 <fputc+0x16>
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	9f ef       	ldi	r25, 0xFF	; 255
 91e:	2c c0       	rjmp	.+88     	; 0x978 <fputc+0x6e>
 920:	22 ff       	sbrs	r18, 2
 922:	16 c0       	rjmp	.+44     	; 0x950 <fputc+0x46>
 924:	46 81       	ldd	r20, Z+6	; 0x06
 926:	57 81       	ldd	r21, Z+7	; 0x07
 928:	24 81       	ldd	r18, Z+4	; 0x04
 92a:	35 81       	ldd	r19, Z+5	; 0x05
 92c:	42 17       	cp	r20, r18
 92e:	53 07       	cpc	r21, r19
 930:	44 f4       	brge	.+16     	; 0x942 <fputc+0x38>
 932:	a0 81       	ld	r26, Z
 934:	b1 81       	ldd	r27, Z+1	; 0x01
 936:	9d 01       	movw	r18, r26
 938:	2f 5f       	subi	r18, 0xFF	; 255
 93a:	3f 4f       	sbci	r19, 0xFF	; 255
 93c:	31 83       	std	Z+1, r19	; 0x01
 93e:	20 83       	st	Z, r18
 940:	8c 93       	st	X, r24
 942:	26 81       	ldd	r18, Z+6	; 0x06
 944:	37 81       	ldd	r19, Z+7	; 0x07
 946:	2f 5f       	subi	r18, 0xFF	; 255
 948:	3f 4f       	sbci	r19, 0xFF	; 255
 94a:	37 83       	std	Z+7, r19	; 0x07
 94c:	26 83       	std	Z+6, r18	; 0x06
 94e:	14 c0       	rjmp	.+40     	; 0x978 <fputc+0x6e>
 950:	8b 01       	movw	r16, r22
 952:	ec 01       	movw	r28, r24
 954:	fb 01       	movw	r30, r22
 956:	00 84       	ldd	r0, Z+8	; 0x08
 958:	f1 85       	ldd	r31, Z+9	; 0x09
 95a:	e0 2d       	mov	r30, r0
 95c:	09 95       	icall
 95e:	89 2b       	or	r24, r25
 960:	e1 f6       	brne	.-72     	; 0x91a <fputc+0x10>
 962:	d8 01       	movw	r26, r16
 964:	16 96       	adiw	r26, 0x06	; 6
 966:	8d 91       	ld	r24, X+
 968:	9c 91       	ld	r25, X
 96a:	17 97       	sbiw	r26, 0x07	; 7
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	17 96       	adiw	r26, 0x07	; 7
 970:	9c 93       	st	X, r25
 972:	8e 93       	st	-X, r24
 974:	16 97       	sbiw	r26, 0x06	; 6
 976:	ce 01       	movw	r24, r28
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	1f 91       	pop	r17
 97e:	0f 91       	pop	r16
 980:	08 95       	ret

00000982 <__ultoa_invert>:
 982:	fa 01       	movw	r30, r20
 984:	aa 27       	eor	r26, r26
 986:	28 30       	cpi	r18, 0x08	; 8
 988:	51 f1       	breq	.+84     	; 0x9de <__ultoa_invert+0x5c>
 98a:	20 31       	cpi	r18, 0x10	; 16
 98c:	81 f1       	breq	.+96     	; 0x9ee <__ultoa_invert+0x6c>
 98e:	e8 94       	clt
 990:	6f 93       	push	r22
 992:	6e 7f       	andi	r22, 0xFE	; 254
 994:	6e 5f       	subi	r22, 0xFE	; 254
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	af 4f       	sbci	r26, 0xFF	; 255
 99e:	b1 e0       	ldi	r27, 0x01	; 1
 9a0:	3e d0       	rcall	.+124    	; 0xa1e <__ultoa_invert+0x9c>
 9a2:	b4 e0       	ldi	r27, 0x04	; 4
 9a4:	3c d0       	rcall	.+120    	; 0xa1e <__ultoa_invert+0x9c>
 9a6:	67 0f       	add	r22, r23
 9a8:	78 1f       	adc	r23, r24
 9aa:	89 1f       	adc	r24, r25
 9ac:	9a 1f       	adc	r25, r26
 9ae:	a1 1d       	adc	r26, r1
 9b0:	68 0f       	add	r22, r24
 9b2:	79 1f       	adc	r23, r25
 9b4:	8a 1f       	adc	r24, r26
 9b6:	91 1d       	adc	r25, r1
 9b8:	a1 1d       	adc	r26, r1
 9ba:	6a 0f       	add	r22, r26
 9bc:	71 1d       	adc	r23, r1
 9be:	81 1d       	adc	r24, r1
 9c0:	91 1d       	adc	r25, r1
 9c2:	a1 1d       	adc	r26, r1
 9c4:	20 d0       	rcall	.+64     	; 0xa06 <__ultoa_invert+0x84>
 9c6:	09 f4       	brne	.+2      	; 0x9ca <__ultoa_invert+0x48>
 9c8:	68 94       	set
 9ca:	3f 91       	pop	r19
 9cc:	2a e0       	ldi	r18, 0x0A	; 10
 9ce:	26 9f       	mul	r18, r22
 9d0:	11 24       	eor	r1, r1
 9d2:	30 19       	sub	r19, r0
 9d4:	30 5d       	subi	r19, 0xD0	; 208
 9d6:	31 93       	st	Z+, r19
 9d8:	de f6       	brtc	.-74     	; 0x990 <__ultoa_invert+0xe>
 9da:	cf 01       	movw	r24, r30
 9dc:	08 95       	ret
 9de:	46 2f       	mov	r20, r22
 9e0:	47 70       	andi	r20, 0x07	; 7
 9e2:	40 5d       	subi	r20, 0xD0	; 208
 9e4:	41 93       	st	Z+, r20
 9e6:	b3 e0       	ldi	r27, 0x03	; 3
 9e8:	0f d0       	rcall	.+30     	; 0xa08 <__ultoa_invert+0x86>
 9ea:	c9 f7       	brne	.-14     	; 0x9de <__ultoa_invert+0x5c>
 9ec:	f6 cf       	rjmp	.-20     	; 0x9da <__ultoa_invert+0x58>
 9ee:	46 2f       	mov	r20, r22
 9f0:	4f 70       	andi	r20, 0x0F	; 15
 9f2:	40 5d       	subi	r20, 0xD0	; 208
 9f4:	4a 33       	cpi	r20, 0x3A	; 58
 9f6:	18 f0       	brcs	.+6      	; 0x9fe <__ultoa_invert+0x7c>
 9f8:	49 5d       	subi	r20, 0xD9	; 217
 9fa:	31 fd       	sbrc	r19, 1
 9fc:	40 52       	subi	r20, 0x20	; 32
 9fe:	41 93       	st	Z+, r20
 a00:	02 d0       	rcall	.+4      	; 0xa06 <__ultoa_invert+0x84>
 a02:	a9 f7       	brne	.-22     	; 0x9ee <__ultoa_invert+0x6c>
 a04:	ea cf       	rjmp	.-44     	; 0x9da <__ultoa_invert+0x58>
 a06:	b4 e0       	ldi	r27, 0x04	; 4
 a08:	a6 95       	lsr	r26
 a0a:	97 95       	ror	r25
 a0c:	87 95       	ror	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	ba 95       	dec	r27
 a14:	c9 f7       	brne	.-14     	; 0xa08 <__ultoa_invert+0x86>
 a16:	00 97       	sbiw	r24, 0x00	; 0
 a18:	61 05       	cpc	r22, r1
 a1a:	71 05       	cpc	r23, r1
 a1c:	08 95       	ret
 a1e:	9b 01       	movw	r18, r22
 a20:	ac 01       	movw	r20, r24
 a22:	0a 2e       	mov	r0, r26
 a24:	06 94       	lsr	r0
 a26:	57 95       	ror	r21
 a28:	47 95       	ror	r20
 a2a:	37 95       	ror	r19
 a2c:	27 95       	ror	r18
 a2e:	ba 95       	dec	r27
 a30:	c9 f7       	brne	.-14     	; 0xa24 <__ultoa_invert+0xa2>
 a32:	62 0f       	add	r22, r18
 a34:	73 1f       	adc	r23, r19
 a36:	84 1f       	adc	r24, r20
 a38:	95 1f       	adc	r25, r21
 a3a:	a0 1d       	adc	r26, r0
 a3c:	08 95       	ret

00000a3e <__prologue_saves__>:
 a3e:	2f 92       	push	r2
 a40:	3f 92       	push	r3
 a42:	4f 92       	push	r4
 a44:	5f 92       	push	r5
 a46:	6f 92       	push	r6
 a48:	7f 92       	push	r7
 a4a:	8f 92       	push	r8
 a4c:	9f 92       	push	r9
 a4e:	af 92       	push	r10
 a50:	bf 92       	push	r11
 a52:	cf 92       	push	r12
 a54:	df 92       	push	r13
 a56:	ef 92       	push	r14
 a58:	ff 92       	push	r15
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
 a66:	ca 1b       	sub	r28, r26
 a68:	db 0b       	sbc	r29, r27
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	f8 94       	cli
 a6e:	de bf       	out	0x3e, r29	; 62
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	cd bf       	out	0x3d, r28	; 61
 a74:	09 94       	ijmp

00000a76 <__epilogue_restores__>:
 a76:	2a 88       	ldd	r2, Y+18	; 0x12
 a78:	39 88       	ldd	r3, Y+17	; 0x11
 a7a:	48 88       	ldd	r4, Y+16	; 0x10
 a7c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a7e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a80:	7d 84       	ldd	r7, Y+13	; 0x0d
 a82:	8c 84       	ldd	r8, Y+12	; 0x0c
 a84:	9b 84       	ldd	r9, Y+11	; 0x0b
 a86:	aa 84       	ldd	r10, Y+10	; 0x0a
 a88:	b9 84       	ldd	r11, Y+9	; 0x09
 a8a:	c8 84       	ldd	r12, Y+8	; 0x08
 a8c:	df 80       	ldd	r13, Y+7	; 0x07
 a8e:	ee 80       	ldd	r14, Y+6	; 0x06
 a90:	fd 80       	ldd	r15, Y+5	; 0x05
 a92:	0c 81       	ldd	r16, Y+4	; 0x04
 a94:	1b 81       	ldd	r17, Y+3	; 0x03
 a96:	aa 81       	ldd	r26, Y+2	; 0x02
 a98:	b9 81       	ldd	r27, Y+1	; 0x01
 a9a:	ce 0f       	add	r28, r30
 a9c:	d1 1d       	adc	r29, r1
 a9e:	0f b6       	in	r0, 0x3f	; 63
 aa0:	f8 94       	cli
 aa2:	de bf       	out	0x3e, r29	; 62
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	cd bf       	out	0x3d, r28	; 61
 aa8:	ed 01       	movw	r28, r26
 aaa:	08 95       	ret

00000aac <_exit>:
 aac:	f8 94       	cli

00000aae <__stop_program>:
 aae:	ff cf       	rjmp	.-2      	; 0xaae <__stop_program>
