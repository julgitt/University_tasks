
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800100  00001552  000015e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001552  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008002bc  008002bc  000017a2  2**0
                  ALLOC
  3 .stab         000012d8  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ff0  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a80  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004656  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00004670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	12 e0       	ldi	r17, 0x02	; 2
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e2 e5       	ldi	r30, 0x52	; 82
      88:	f5 e1       	ldi	r31, 0x15	; 21
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	ac 3b       	cpi	r26, 0xBC	; 188
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	22 e0       	ldi	r18, 0x02	; 2
      98:	ac eb       	ldi	r26, 0xBC	; 188
      9a:	b2 e0       	ldi	r27, 0x02	; 2
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a0 3d       	cpi	r26, 0xD0	; 208
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 cb 00 	call	0x196	; 0x196 <main>
      aa:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while (!(UCSR0A & _BV(UDRE0)))
      b2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      b6:	95 ff       	sbrs	r25, 5
      b8:	fc cf       	rjmp	.-8      	; 0xb2 <uart_transmit>
    ;
  UDR0 = data;
      ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  return 0;
}
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	08 95       	ret

000000c4 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)))
      c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      c8:	87 ff       	sbrs	r24, 7
      ca:	fc cf       	rjmp	.-8      	; 0xc4 <uart_receive>
    ;
  return UDR0;
      cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	08 95       	ret

000000d4 <i2cInit>:
#include "i2c.h"
void i2cInit() {
  // ustaw bitrate
  // 8MHz / (16+2*TWBR*1) ~= 100kHz
  TWBR = 32;
      d4:	80 e2       	ldi	r24, 0x20	; 32
      d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  // uruchom TWI
  TWCR |= _BV(TWEN);
      da:	ec eb       	ldi	r30, 0xBC	; 188
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	84 60       	ori	r24, 0x04	; 4
      e2:	80 83       	st	Z, r24
      e4:	08 95       	ret

000000e6 <i2cWaitForComplete>:
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
      e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ea:	87 ff       	sbrs	r24, 7
      ec:	fc cf       	rjmp	.-8      	; 0xe6 <i2cWaitForComplete>
}
      ee:	08 95       	ret

000000f0 <i2cStart>:
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
      f0:	84 ea       	ldi	r24, 0xA4	; 164
      f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
      f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      fa:	87 ff       	sbrs	r24, 7
      fc:	fc cf       	rjmp	.-8      	; 0xf6 <i2cStart+0x6>
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
      fe:	08 95       	ret

00000100 <i2cStop>:
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
     100:	84 e9       	ldi	r24, 0x94	; 148
     102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     106:	08 95       	ret

00000108 <i2cReset>:
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     108:	80 e9       	ldi	r24, 0x90	; 144
     10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     10e:	08 95       	ret

00000110 <i2cReadAck>:
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     110:	84 ec       	ldi	r24, 0xC4	; 196
     112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     116:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     11a:	87 ff       	sbrs	r24, 7
     11c:	fc cf       	rjmp	.-8      	; 0x116 <i2cReadAck+0x6>
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  i2cWaitForComplete();
  return TWDR;
     11e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     122:	08 95       	ret

00000124 <i2cReadNoAck>:
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
     124:	84 e8       	ldi	r24, 0x84	; 132
     126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     12a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     12e:	87 ff       	sbrs	r24, 7
     130:	fc cf       	rjmp	.-8      	; 0x12a <i2cReadNoAck+0x6>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
  return TWDR;
     132:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     136:	08 95       	ret

00000138 <i2cSend>:
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
     138:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
     13c:	84 e8       	ldi	r24, 0x84	; 132
     13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     142:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     146:	87 ff       	sbrs	r24, 7
     148:	fc cf       	rjmp	.-8      	; 0x142 <i2cSend+0xa>
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
}
     14a:	08 95       	ret

0000014c <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
     14c:	87 e6       	ldi	r24, 0x67	; 103
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     154:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
     158:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
     15c:	88 e1       	ldi	r24, 0x18	; 24
     15e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
     162:	86 e0       	ldi	r24, 0x06	; 6
     164:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     168:	08 95       	ret

0000016a <hex2int>:
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     16a:	90 ed       	ldi	r25, 0xD0	; 208
     16c:	98 0f       	add	r25, r24
     16e:	9a 30       	cpi	r25, 0x0A	; 10
     170:	50 f0       	brcs	.+20     	; 0x186 <hex2int+0x1c>
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     172:	9f e9       	ldi	r25, 0x9F	; 159
     174:	98 0f       	add	r25, r24
     176:	96 30       	cpi	r25, 0x06	; 6
     178:	58 f4       	brcc	.+22     	; 0x190 <hex2int+0x26>
    return ch - 'a' + 10;
     17a:	08 2e       	mov	r0, r24
     17c:	00 0c       	add	r0, r0
     17e:	99 0b       	sbc	r25, r25
     180:	87 55       	subi	r24, 0x57	; 87
     182:	91 09       	sbc	r25, r1
     184:	08 95       	ret
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
    return ch - '0';
     186:	08 2e       	mov	r0, r24
     188:	00 0c       	add	r0, r0
     18a:	99 0b       	sbc	r25, r25
     18c:	c0 97       	sbiw	r24, 0x30	; 48
     18e:	08 95       	ret
  if (ch >= 'a' && ch <= 'f')
    return ch - 'a' + 10;
  return -1;
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	9f ef       	ldi	r25, 0xFF	; 255
}
     194:	08 95       	ret

00000196 <main>:

int main()
{
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	cf 5a       	subi	r28, 0xAF	; 175
     1a0:	d1 40       	sbci	r29, 0x01	; 1
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
     1ac:	87 e6       	ldi	r24, 0x67	; 103
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     1b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
     1b8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
     1bc:	88 e1       	ldi	r24, 0x18	; 24
     1be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
     1c2:	86 e0       	ldi	r24, 0x06	; 6
     1c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
int main()
{
  // zainicjalizuj UART
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
     1c8:	8c eb       	ldi	r24, 0xBC	; 188
     1ca:	92 e0       	ldi	r25, 0x02	; 2
     1cc:	29 e5       	ldi	r18, 0x59	; 89
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	30 93 c5 02 	sts	0x02C5, r19	; 0x8002c5 <__data_end+0x9>
     1d4:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <__data_end+0x8>
     1d8:	22 e6       	ldi	r18, 0x62	; 98
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	30 93 c7 02 	sts	0x02C7, r19	; 0x8002c7 <__data_end+0xb>
     1e0:	20 93 c6 02 	sts	0x02C6, r18	; 0x8002c6 <__data_end+0xa>
     1e4:	23 e0       	ldi	r18, 0x03	; 3
     1e6:	20 93 bf 02 	sts	0x02BF, r18	; 0x8002bf <__data_end+0x3>
     1ea:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <__data_end+0xd>
     1ee:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
     1f2:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <__iob+0x5>
     1f6:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__iob+0x4>
     1fa:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <__iob+0x3>
     1fe:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__iob+0x2>
     202:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <__iob+0x1>
     206:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <__iob>
#include "i2c.h"
void i2cInit() {
  // ustaw bitrate
  // 8MHz / (16+2*TWBR*1) ~= 100kHz
  TWBR = 32;
     20a:	80 e2       	ldi	r24, 0x20	; 32
     20c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  // uruchom TWI
  TWCR |= _BV(TWEN);
     210:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     214:	84 60       	ori	r24, 0x04	; 4
     216:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // zainicjalizuj I2C
  i2cInit();

  int8_t len;
  uint16_t addr = 0;
     21a:	1e 01       	movw	r2, r28
     21c:	25 e5       	ldi	r18, 0x55	; 85
     21e:	22 1a       	sub	r2, r18
     220:	2e ef       	ldi	r18, 0xFE	; 254
     222:	32 0a       	sbc	r3, r18
     224:	f1 01       	movw	r30, r2
     226:	11 82       	std	Z+1, r1	; 0x01
     228:	10 82       	st	Z, r1
     22a:	ce 01       	movw	r24, r28
     22c:	8f 55       	subi	r24, 0x5F	; 95
     22e:	9e 4f       	sbci	r25, 0xFE	; 254
     230:	6c 01       	movw	r12, r24
     232:	32 96       	adiw	r30, 0x02	; 2
     234:	c2 55       	subi	r28, 0x52	; 82
     236:	de 4f       	sbci	r29, 0xFE	; 254
     238:	f9 83       	std	Y+1, r31	; 0x01
     23a:	e8 83       	st	Y, r30
     23c:	ce 5a       	subi	r28, 0xAE	; 174
     23e:	d1 40       	sbci	r29, 0x01	; 1
  char command[10];
  char i8hex[400];

  while (1)
  {
    scanf("%s", command);
     240:	11 e0       	ldi	r17, 0x01	; 1
     242:	61 2e       	mov	r6, r17
     244:	11 e0       	ldi	r17, 0x01	; 1
     246:	71 2e       	mov	r7, r17
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
  TWCR = _BV(TWINT) | _BV(TWEN);
     248:	04 e8       	ldi	r16, 0x84	; 132
     24a:	50 2e       	mov	r5, r16
  uint8_t data;

  for (int i = 0; i < len - 1; i++)
  {
    data = i2cReadAck();
    printf("%.2x|", data);
     24c:	08 e1       	ldi	r16, 0x18	; 24
     24e:	12 e0       	ldi	r17, 0x02	; 2
  char command[10];
  char i8hex[400];

  while (1)
  {
    scanf("%s", command);
     250:	df 92       	push	r13
     252:	cf 92       	push	r12
     254:	7f 92       	push	r7
     256:	6f 92       	push	r6
     258:	0e 94 ae 04 	call	0x95c	; 0x95c <scanf>
    if (strcmp(command, "read") == 0)
     25c:	64 e0       	ldi	r22, 0x04	; 4
     25e:	71 e0       	ldi	r23, 0x01	; 1
     260:	c6 01       	movw	r24, r12
     262:	0e 94 5f 04 	call	0x8be	; 0x8be <strcmp>
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	89 2b       	or	r24, r25
     270:	09 f4       	brne	.+2      	; 0x274 <main+0xde>
     272:	63 c1       	rjmp	.+710    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
      scanf("%d", &len);

      printf("Read %d data bytes from address %.3x\r\n", len, addr);
      read(addr, len);
    }
    else if (strcmp(command, "write") == 0)
     274:	65 e6       	ldi	r22, 0x65	; 101
     276:	72 e0       	ldi	r23, 0x02	; 2
     278:	c6 01       	movw	r24, r12
     27a:	0e 94 5f 04 	call	0x8be	; 0x8be <strcmp>
     27e:	89 2b       	or	r24, r25
     280:	09 f0       	breq	.+2      	; 0x284 <main+0xee>
     282:	56 c1       	rjmp	.+684    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
    {
      scanf("%s", i8hex);
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	8c 0f       	add	r24, r28
     28a:	9d 1f       	adc	r25, r29
     28c:	9f 93       	push	r25
     28e:	8f 93       	push	r24
     290:	7f 92       	push	r7
     292:	6f 92       	push	r6
     294:	0e 94 ae 04 	call	0x95c	; 0x95c <scanf>
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
     298:	8a 81       	ldd	r24, Y+2	; 0x02
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     29a:	90 ed       	ldi	r25, 0xD0	; 208
     29c:	98 0f       	add	r25, r24
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	9a 30       	cpi	r25, 0x0A	; 10
     2a8:	08 f0       	brcs	.+2      	; 0x2ac <main+0x116>
     2aa:	a7 c2       	rjmp	.+1358   	; 0x7fa <__EEPROM_REGION_LENGTH__+0x3fa>
     2ac:	82 95       	swap	r24
     2ae:	80 7f       	andi	r24, 0xF0	; 240
      read(addr, len);
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
     2b0:	9b 81       	ldd	r25, Y+3	; 0x03
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     2b2:	20 ed       	ldi	r18, 0xD0	; 208
     2b4:	29 0f       	add	r18, r25
     2b6:	2a 30       	cpi	r18, 0x0A	; 10
     2b8:	08 f0       	brcs	.+2      	; 0x2bc <main+0x126>
     2ba:	ad c2       	rjmp	.+1370   	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     2bc:	92 2f       	mov	r25, r18
      read(addr, len);
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
     2be:	b8 2e       	mov	r11, r24
     2c0:	b9 0e       	add	r11, r25
     2c2:	c3 55       	subi	r28, 0x53	; 83
     2c4:	de 4f       	sbci	r29, 0xFE	; 254
     2c6:	b8 82       	st	Y, r11
     2c8:	cd 5a       	subi	r28, 0xAD	; 173
     2ca:	d1 40       	sbci	r29, 0x01	; 1
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);
     2cc:	8c 81       	ldd	r24, Y+4	; 0x04
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     2ce:	90 ed       	ldi	r25, 0xD0	; 208
     2d0:	98 0f       	add	r25, r24
     2d2:	9a 30       	cpi	r25, 0x0A	; 10
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <main+0x142>
     2d6:	c3 c2       	rjmp	.+1414   	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     2d8:	08 2e       	mov	r0, r24
     2da:	00 0c       	add	r0, r0
     2dc:	99 0b       	sbc	r25, r25
     2de:	ac 01       	movw	r20, r24
     2e0:	54 2f       	mov	r21, r20
     2e2:	44 27       	eor	r20, r20
     2e4:	52 95       	swap	r21
     2e6:	50 7f       	andi	r21, 0xF0	; 240
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);
     2e8:	8d 81       	ldd	r24, Y+5	; 0x05
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     2ea:	90 ed       	ldi	r25, 0xD0	; 208
     2ec:	98 0f       	add	r25, r24
     2ee:	9a 30       	cpi	r25, 0x0A	; 10
     2f0:	08 f0       	brcs	.+2      	; 0x2f4 <main+0x15e>
     2f2:	c9 c2       	rjmp	.+1426   	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     2f4:	08 2e       	mov	r0, r24
     2f6:	00 0c       	add	r0, r0
     2f8:	99 0b       	sbc	r25, r25
     2fa:	c0 97       	sbiw	r24, 0x30	; 48
     2fc:	98 2f       	mov	r25, r24
     2fe:	88 27       	eor	r24, r24
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);
     300:	84 0f       	add	r24, r20
     302:	95 1f       	adc	r25, r21
     304:	3e 81       	ldd	r19, Y+6	; 0x06
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     306:	20 ed       	ldi	r18, 0xD0	; 208
     308:	23 0f       	add	r18, r19
     30a:	2a 30       	cpi	r18, 0x0A	; 10
     30c:	08 f0       	brcs	.+2      	; 0x310 <main+0x17a>
     30e:	95 c2       	rjmp	.+1322   	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     310:	e3 2e       	mov	r14, r19
     312:	33 0f       	add	r19, r19
     314:	ff 08       	sbc	r15, r15
     316:	e0 e3       	ldi	r30, 0x30	; 48
     318:	ee 1a       	sub	r14, r30
     31a:	f1 08       	sbc	r15, r1
     31c:	97 01       	movw	r18, r14
     31e:	22 95       	swap	r18
     320:	32 95       	swap	r19
     322:	30 7f       	andi	r19, 0xF0	; 240
     324:	32 27       	eor	r19, r18
     326:	20 7f       	andi	r18, 0xF0	; 240
     328:	32 27       	eor	r19, r18
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
     32e:	3f 81       	ldd	r19, Y+7	; 0x07
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     330:	20 ed       	ldi	r18, 0xD0	; 208
     332:	23 0f       	add	r18, r19
     334:	2a 30       	cpi	r18, 0x0A	; 10
     336:	08 f0       	brcs	.+2      	; 0x33a <main+0x1a4>
     338:	75 c2       	rjmp	.+1258   	; 0x824 <__DATA_REGION_LENGTH__+0x24>
    return ch - '0';
     33a:	e3 2e       	mov	r14, r19
     33c:	33 0f       	add	r19, r19
     33e:	ff 08       	sbc	r15, r15
     340:	97 01       	movw	r18, r14
     342:	20 53       	subi	r18, 0x30	; 48
     344:	31 09       	sbc	r19, r1
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);
     346:	79 01       	movw	r14, r18
     348:	e8 0e       	add	r14, r24
     34a:	f9 1e       	adc	r15, r25
     34c:	f1 01       	movw	r30, r2
     34e:	f1 82       	std	Z+1, r15	; 0x01
     350:	e0 82       	st	Z, r14

      for (int i = 0; i < len; i++)
     352:	1b 14       	cp	r1, r11
     354:	cc f5       	brge	.+114    	; 0x3c8 <main+0x232>
     356:	fe 01       	movw	r30, r28
     358:	3a 96       	adiw	r30, 0x0a	; 10
     35a:	de 01       	movw	r26, r28
     35c:	af 56       	subi	r26, 0x6F	; 111
     35e:	be 4f       	sbci	r27, 0xFE	; 254
     360:	9d 01       	movw	r18, r26
     362:	2b 0d       	add	r18, r11
     364:	31 1d       	adc	r19, r1
     366:	b7 fc       	sbrc	r11, 7
     368:	3a 95       	dec	r19
     36a:	0f c0       	rjmp	.+30     	; 0x38a <main+0x1f4>
     36c:	98 2f       	mov	r25, r24
     36e:	92 95       	swap	r25
     370:	90 7f       	andi	r25, 0xF0	; 240
      {
        val[i] = (hex2int(i8hex[9 + 2 * i]) << 4) + hex2int(i8hex[10 + 2 * i]);
     372:	81 81       	ldd	r24, Z+1	; 0x01
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     374:	40 ed       	ldi	r20, 0xD0	; 208
     376:	48 0f       	add	r20, r24
     378:	4a 30       	cpi	r20, 0x0A	; 10
     37a:	d0 f4       	brcc	.+52     	; 0x3b0 <main+0x21a>
     37c:	84 2f       	mov	r24, r20
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);

      for (int i = 0; i < len; i++)
      {
        val[i] = (hex2int(i8hex[9 + 2 * i]) << 4) + hex2int(i8hex[10 + 2 * i]);
     37e:	89 0f       	add	r24, r25
     380:	8d 93       	st	X+, r24
     382:	32 96       	adiw	r30, 0x02	; 2
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);

      for (int i = 0; i < len; i++)
     384:	a2 17       	cp	r26, r18
     386:	b3 07       	cpc	r27, r19
     388:	f9 f0       	breq	.+62     	; 0x3c8 <main+0x232>
      {
        val[i] = (hex2int(i8hex[9 + 2 * i]) << 4) + hex2int(i8hex[10 + 2 * i]);
     38a:	80 81       	ld	r24, Z
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     38c:	90 ed       	ldi	r25, 0xD0	; 208
     38e:	98 0f       	add	r25, r24
     390:	9a 30       	cpi	r25, 0x0A	; 10
     392:	60 f3       	brcs	.-40     	; 0x36c <main+0x1d6>
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     394:	9f e9       	ldi	r25, 0x9F	; 159
     396:	98 0f       	add	r25, r24
     398:	96 30       	cpi	r25, 0x06	; 6
     39a:	08 f0       	brcs	.+2      	; 0x39e <main+0x208>
     39c:	c5 c0       	rjmp	.+394    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     39e:	82 95       	swap	r24
     3a0:	80 7f       	andi	r24, 0xF0	; 240
     3a2:	90 e9       	ldi	r25, 0x90	; 144
     3a4:	98 0f       	add	r25, r24
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);

      for (int i = 0; i < len; i++)
      {
        val[i] = (hex2int(i8hex[9 + 2 * i]) << 4) + hex2int(i8hex[10 + 2 * i]);
     3a6:	81 81       	ldd	r24, Z+1	; 0x01
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     3a8:	40 ed       	ldi	r20, 0xD0	; 208
     3aa:	48 0f       	add	r20, r24
     3ac:	4a 30       	cpi	r20, 0x0A	; 10
     3ae:	30 f3       	brcs	.-52     	; 0x37c <main+0x1e6>
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     3b0:	4f e9       	ldi	r20, 0x9F	; 159
     3b2:	48 0f       	add	r20, r24
     3b4:	46 30       	cpi	r20, 0x06	; 6
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <main+0x224>
     3b8:	b9 c0       	rjmp	.+370    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
     3ba:	87 55       	subi	r24, 0x57	; 87
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);

      for (int i = 0; i < len; i++)
      {
        val[i] = (hex2int(i8hex[9 + 2 * i]) << 4) + hex2int(i8hex[10 + 2 * i]);
     3bc:	89 0f       	add	r24, r25
     3be:	8d 93       	st	X+, r24
     3c0:	32 96       	adiw	r30, 0x02	; 2
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);

      for (int i = 0; i < len; i++)
     3c2:	a2 17       	cp	r26, r18
     3c4:	b3 07       	cpc	r27, r19
     3c6:	09 f7       	brne	.-62     	; 0x38a <main+0x1f4>
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
     3c8:	84 ea       	ldi	r24, 0xA4	; 164
     3ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     3ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3d2:	87 ff       	sbrs	r24, 7
     3d4:	fc cf       	rjmp	.-8      	; 0x3ce <main+0x238>
const uint8_t eeprom_addr = 0xa0;

static inline void write(uint16_t addr, uint8_t len, uint8_t *val)
{
  i2cStart();
  i2cCheck(0x08, "I2C start");
     3d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3da:	88 7f       	andi	r24, 0xF8	; 248
     3dc:	88 30       	cpi	r24, 0x08	; 8
     3de:	91 f0       	breq	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     3e4:	88 7f       	andi	r24, 0xF8	; 248
     3e6:	1f 92       	push	r1
     3e8:	8f 93       	push	r24
     3ea:	86 e3       	ldi	r24, 0x36	; 54
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     3f6:	80 e9       	ldi	r24, 0x90	; 144
     3f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0

  i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
     404:	c7 01       	movw	r24, r14
     406:	88 27       	eor	r24, r24
     408:	91 70       	andi	r25, 0x01	; 1
     40a:	88 0f       	add	r24, r24
     40c:	89 2f       	mov	r24, r25
     40e:	88 1f       	adc	r24, r24
     410:	99 0b       	sbc	r25, r25
     412:	91 95       	neg	r25
     414:	80 6a       	ori	r24, 0xA0	; 160
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
     416:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
     41a:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     41e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     422:	87 ff       	sbrs	r24, 7
     424:	fc cf       	rjmp	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
  i2cCheck(0x18, "I2C EEPROM write request");
     426:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     42a:	88 7f       	andi	r24, 0xF8	; 248
     42c:	88 31       	cpi	r24, 0x18	; 24
     42e:	91 f0       	breq	.+36     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     430:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     434:	88 7f       	andi	r24, 0xF8	; 248
     436:	1f 92       	push	r1
     438:	8f 93       	push	r24
     43a:	87 e5       	ldi	r24, 0x57	; 87
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
     454:	e0 92 bb 00 	sts	0x00BB, r14	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
     458:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     45c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     460:	87 ff       	sbrs	r24, 7
     462:	fc cf       	rjmp	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
  i2cSend(addr & 0xff);
  i2cCheck(0x28, "I2C EEPROM set address");
     464:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     468:	88 7f       	andi	r24, 0xF8	; 248
     46a:	88 32       	cpi	r24, 0x28	; 40
     46c:	91 f0       	breq	.+36     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     46e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     472:	88 7f       	andi	r24, 0xF8	; 248
     474:	1f 92       	push	r1
     476:	8f 93       	push	r24
     478:	87 e8       	ldi	r24, 0x87	; 135
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     484:	80 e9       	ldi	r24, 0x90	; 144
     486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0

  for (int i = 0; i < len; i++)
     492:	bb 20       	and	r11, r11
     494:	91 f0       	breq	.+36     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     496:	fe 01       	movw	r30, r28
     498:	ef 56       	subi	r30, 0x6F	; 111
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	9f 01       	movw	r18, r30
     49e:	2b 0d       	add	r18, r11
     4a0:	31 1d       	adc	r19, r1
    i2cSend(val[i]);
     4a2:	81 91       	ld	r24, Z+
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
     4a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
     4a8:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     4ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4b0:	87 ff       	sbrs	r24, 7
     4b2:	fc cf       	rjmp	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
  i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
  i2cCheck(0x18, "I2C EEPROM write request");
  i2cSend(addr & 0xff);
  i2cCheck(0x28, "I2C EEPROM set address");

  for (int i = 0; i < len; i++)
     4b4:	2e 17       	cp	r18, r30
     4b6:	3f 07       	cpc	r19, r31
     4b8:	a1 f7       	brne	.-24     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
     4ba:	84 e9       	ldi	r24, 0x94	; 148
     4bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    i2cSend(val[i]);
  i2cStop();
  i2cCheck(0xf8, "I2C stop");
     4c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4c4:	88 7f       	andi	r24, 0xF8	; 248
     4c6:	88 3f       	cpi	r24, 0xF8	; 248
     4c8:	91 f0       	breq	.+36     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     4ce:	88 7f       	andi	r24, 0xF8	; 248
     4d0:	1f 92       	push	r1
     4d2:	8f 93       	push	r24
     4d4:	85 e4       	ldi	r24, 0x45	; 69
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	9f 93       	push	r25
     4da:	8f 93       	push	r24
     4dc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     4e0:	80 e9       	ldi	r24, 0x90	; 144
     4e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
      {
        val[i] = (hex2int(i8hex[9 + 2 * i]) << 4) + hex2int(i8hex[10 + 2 * i]);
      }

      write(addr, len, val);
      printf("Write %d data bytes at address: %.3x \r\n", len, addr);
     4ee:	f1 01       	movw	r30, r2
     4f0:	81 81       	ldd	r24, Z+1	; 0x01
     4f2:	8f 93       	push	r24
     4f4:	80 81       	ld	r24, Z
     4f6:	8f 93       	push	r24
     4f8:	c3 55       	subi	r28, 0x53	; 83
     4fa:	de 4f       	sbci	r29, 0xFE	; 254
     4fc:	88 81       	ld	r24, Y
     4fe:	cd 5a       	subi	r28, 0xAD	; 173
     500:	d1 40       	sbci	r29, 0x01	; 1
     502:	28 2f       	mov	r18, r24
     504:	08 2e       	mov	r0, r24
     506:	00 0c       	add	r0, r0
     508:	33 0b       	sbc	r19, r19
     50a:	3f 93       	push	r19
     50c:	8f 93       	push	r24
     50e:	8b e6       	ldi	r24, 0x6B	; 107
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	94 ce       	rjmp	.-728    	; 0x250 <main+0xba>

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     528:	90 ef       	ldi	r25, 0xF0	; 240
     52a:	23 cf       	rjmp	.-442    	; 0x372 <main+0x1dc>
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	27 cf       	rjmp	.-434    	; 0x37e <main+0x1e8>

      write(addr, len, val);
      printf("Write %d data bytes at address: %.3x \r\n", len, addr);
    }
    else
      printf("Invalid command. Use write/read instead\r\n");
     530:	83 e9       	ldi	r24, 0x93	; 147
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	0e 94 7e 04 	call	0x8fc	; 0x8fc <puts>
     538:	8b ce       	rjmp	.-746    	; 0x250 <main+0xba>
  while (1)
  {
    scanf("%s", command);
    if (strcmp(command, "read") == 0)
    {
      scanf("%x", &addr);
     53a:	3f 92       	push	r3
     53c:	2f 92       	push	r2
     53e:	89 e0       	ldi	r24, 0x09	; 9
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	9f 93       	push	r25
     544:	8f 93       	push	r24
     546:	0e 94 ae 04 	call	0x95c	; 0x95c <scanf>
      scanf("%d", &len);
     54a:	c1 55       	subi	r28, 0x51	; 81
     54c:	de 4f       	sbci	r29, 0xFE	; 254
     54e:	f8 81       	ld	r31, Y
     550:	cf 5a       	subi	r28, 0xAF	; 175
     552:	d1 40       	sbci	r29, 0x01	; 1
     554:	ff 93       	push	r31
     556:	c2 55       	subi	r28, 0x52	; 82
     558:	de 4f       	sbci	r29, 0xFE	; 254
     55a:	28 81       	ld	r18, Y
     55c:	ce 5a       	subi	r28, 0xAE	; 174
     55e:	d1 40       	sbci	r29, 0x01	; 1
     560:	2f 93       	push	r18
     562:	8c e0       	ldi	r24, 0x0C	; 12
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	0e 94 ae 04 	call	0x95c	; 0x95c <scanf>

      printf("Read %d data bytes from address %.3x\r\n", len, addr);
     56e:	f1 01       	movw	r30, r2
     570:	81 81       	ldd	r24, Z+1	; 0x01
     572:	8f 93       	push	r24
     574:	80 81       	ld	r24, Z
     576:	8f 93       	push	r24
     578:	c3 55       	subi	r28, 0x53	; 83
     57a:	de 4f       	sbci	r29, 0xFE	; 254
     57c:	88 81       	ld	r24, Y
     57e:	cd 5a       	subi	r28, 0xAD	; 173
     580:	d1 40       	sbci	r29, 0x01	; 1
     582:	28 2f       	mov	r18, r24
     584:	08 2e       	mov	r0, r24
     586:	00 0c       	add	r0, r0
     588:	33 0b       	sbc	r19, r19
     58a:	3f 93       	push	r19
     58c:	8f 93       	push	r24
     58e:	8f e0       	ldi	r24, 0x0F	; 15
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
      read(addr, len);
     59a:	c3 55       	subi	r28, 0x53	; 83
     59c:	de 4f       	sbci	r29, 0xFE	; 254
     59e:	48 80       	ld	r4, Y
     5a0:	cd 5a       	subi	r28, 0xAD	; 173
     5a2:	d1 40       	sbci	r29, 0x01	; 1
     5a4:	e4 2c       	mov	r14, r4
     5a6:	04 2c       	mov	r0, r4
     5a8:	00 0c       	add	r0, r0
     5aa:	ff 08       	sbc	r15, r15
     5ac:	f1 01       	movw	r30, r2
     5ae:	a0 80       	ld	r10, Z
     5b0:	b1 80       	ldd	r11, Z+1	; 0x01
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
     5b2:	84 ea       	ldi	r24, 0xA4	; 164
     5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     5c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5c6:	87 ff       	sbrs	r24, 7
     5c8:	fc cf       	rjmp	.-8      	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
}

static inline void read(uint16_t addr, int len)
{
  i2cStart();
  i2cCheck(0x08, "I2C start");
     5ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5ce:	88 7f       	andi	r24, 0xF8	; 248
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	91 f0       	breq	.+36     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
     5d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     5d8:	88 7f       	andi	r24, 0xF8	; 248
     5da:	1f 92       	push	r1
     5dc:	8f 93       	push	r24
     5de:	86 e3       	ldi	r24, 0x36	; 54
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     5ea:	80 e9       	ldi	r24, 0x90	; 144
     5ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0

  // dummy write
  i2cSend(eeprom_addr | ((addr & 0x100) >> 7));
     5f8:	45 01       	movw	r8, r10
     5fa:	88 24       	eor	r8, r8
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	99 22       	and	r9, r25
     600:	88 0c       	add	r8, r8
     602:	89 2c       	mov	r8, r9
     604:	88 1c       	adc	r8, r8
     606:	99 08       	sbc	r9, r9
     608:	91 94       	neg	r9
     60a:	88 2d       	mov	r24, r8
     60c:	80 6a       	ori	r24, 0xA0	; 160
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
     60e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
     612:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     616:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     61a:	87 ff       	sbrs	r24, 7
     61c:	fc cf       	rjmp	.-8      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
  i2cCheck(0x18, "I2C EEPROM write request");
     61e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     622:	88 7f       	andi	r24, 0xF8	; 248
     624:	88 31       	cpi	r24, 0x18	; 24
     626:	91 f0       	breq	.+36     	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
     628:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     62c:	88 7f       	andi	r24, 0xF8	; 248
     62e:	1f 92       	push	r1
     630:	8f 93       	push	r24
     632:	e7 e5       	ldi	r30, 0x57	; 87
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	ff 93       	push	r31
     638:	ef 93       	push	r30
     63a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     63e:	80 e9       	ldi	r24, 0x90	; 144
     640:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
     64c:	a0 92 bb 00 	sts	0x00BB, r10	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
     650:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     654:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     658:	87 ff       	sbrs	r24, 7
     65a:	fc cf       	rjmp	.-8      	; 0x654 <__EEPROM_REGION_LENGTH__+0x254>
  i2cSend(addr & 0xff);
  i2cCheck(0x28, "I2C EEPROM set address");
     65c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     660:	88 7f       	andi	r24, 0xF8	; 248
     662:	88 32       	cpi	r24, 0x28	; 40
     664:	91 f0       	breq	.+36     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
     666:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     66a:	88 7f       	andi	r24, 0xF8	; 248
     66c:	1f 92       	push	r1
     66e:	8f 93       	push	r24
     670:	87 e8       	ldi	r24, 0x87	; 135
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     67c:	80 e9       	ldi	r24, 0x90	; 144
     67e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
     68a:	84 ea       	ldi	r24, 0xA4	; 164
     68c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     690:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     694:	87 ff       	sbrs	r24, 7
     696:	fc cf       	rjmp	.-8      	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>

  // read
  i2cStart();
  i2cCheck(0x10, "I2C second start");
     698:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     69c:	88 7f       	andi	r24, 0xF8	; 248
     69e:	80 31       	cpi	r24, 0x10	; 16
     6a0:	91 f0       	breq	.+36     	; 0x6c6 <__EEPROM_REGION_LENGTH__+0x2c6>
     6a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     6a6:	88 7f       	andi	r24, 0xF8	; 248
     6a8:	1f 92       	push	r1
     6aa:	8f 93       	push	r24
     6ac:	85 eb       	ldi	r24, 0xB5	; 181
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     6b8:	80 e9       	ldi	r24, 0x90	; 144
     6ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
  i2cSend(eeprom_addr | 0x1 | ((addr & 0x100) >> 7));
     6c6:	88 2d       	mov	r24, r8
     6c8:	81 6a       	ori	r24, 0xA1	; 161
  i2cWaitForComplete();
  return TWDR;
}
void i2cSend(uint8_t data) {
  // wyślij dane
  TWDR = data;
     6ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  TWCR = _BV(TWINT) | _BV(TWEN);
     6ce:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     6d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6d6:	87 ff       	sbrs	r24, 7
     6d8:	fc cf       	rjmp	.-8      	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
  i2cCheck(0x40, "I2C EEPROM read request");
     6da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     6de:	88 7f       	andi	r24, 0xF8	; 248
     6e0:	80 34       	cpi	r24, 0x40	; 64
     6e2:	91 f0       	breq	.+36     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
     6e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     6e8:	88 7f       	andi	r24, 0xF8	; 248
     6ea:	1f 92       	push	r1
     6ec:	8f 93       	push	r24
     6ee:	8d ed       	ldi	r24, 0xDD	; 221
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     6fa:	80 e9       	ldi	r24, 0x90	; 144
     6fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0

  printf(":%.2x|%.4x|", len, addr);
     708:	bf 92       	push	r11
     70a:	af 92       	push	r10
     70c:	ff 92       	push	r15
     70e:	4f 92       	push	r4
     710:	8c e0       	ldi	r24, 0x0C	; 12
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  uint8_t data;

  for (int i = 0; i < len - 1; i++)
     71c:	f1 e0       	ldi	r31, 0x01	; 1
     71e:	ef 1a       	sub	r14, r31
     720:	f1 08       	sbc	r15, r1
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	1e 14       	cp	r1, r14
     730:	1f 04       	cpc	r1, r15
     732:	e4 f4       	brge	.+56     	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
     734:	a1 2c       	mov	r10, r1
     736:	b1 2c       	mov	r11, r1
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     738:	a4 ec       	ldi	r26, 0xC4	; 196
     73a:	9a 2e       	mov	r9, r26
     73c:	90 92 bc 00 	sts	0x00BC, r9	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     740:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     744:	87 ff       	sbrs	r24, 7
     746:	fc cf       	rjmp	.-8      	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  i2cWaitForComplete();
  return TWDR;
     748:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  {
    data = i2cReadAck();
    printf("%.2x|", data);
     74c:	1f 92       	push	r1
     74e:	8f 93       	push	r24
     750:	1f 93       	push	r17
     752:	0f 93       	push	r16
     754:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  i2cCheck(0x40, "I2C EEPROM read request");

  printf(":%.2x|%.4x|", len, addr);
  uint8_t data;

  for (int i = 0; i < len - 1; i++)
     758:	2f ef       	ldi	r18, 0xFF	; 255
     75a:	a2 1a       	sub	r10, r18
     75c:	b2 0a       	sbc	r11, r18
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	ae 14       	cp	r10, r14
     768:	bf 04       	cpc	r11, r15
     76a:	44 f3       	brlt	.-48     	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
     76c:	50 92 bc 00 	sts	0x00BC, r5	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
     770:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     774:	87 ff       	sbrs	r24, 7
     776:	fc cf       	rjmp	.-8      	; 0x770 <__EEPROM_REGION_LENGTH__+0x370>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
  return TWDR;
     778:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    data = i2cReadAck();
    printf("%.2x|", data);
  }

  data = i2cReadNoAck();
  printf("%.2x\r\n", data);
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	8e e3       	ldi	r24, 0x3E	; 62
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  i2cCheck(0x58, "I2C EEPROM read");
     78c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     790:	88 7f       	andi	r24, 0xF8	; 248
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	88 35       	cpi	r24, 0x58	; 88
     79c:	91 f0       	breq	.+36     	; 0x7c2 <__EEPROM_REGION_LENGTH__+0x3c2>
     79e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7a2:	88 7f       	andi	r24, 0xF8	; 248
     7a4:	1f 92       	push	r1
     7a6:	8f 93       	push	r24
     7a8:	8e e1       	ldi	r24, 0x1E	; 30
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     7b4:	80 e9       	ldi	r24, 0x90	; 144
     7b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
     7c2:	84 e9       	ldi	r24, 0x94	; 148
     7c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  i2cStop();
  i2cCheck(0xf8, "I2C stop");
     7c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7cc:	88 7f       	andi	r24, 0xF8	; 248
     7ce:	88 3f       	cpi	r24, 0xF8	; 248
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <__EEPROM_REGION_LENGTH__+0x3d4>
     7d2:	3e cd       	rjmp	.-1412   	; 0x250 <main+0xba>
     7d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     7d8:	88 7f       	andi	r24, 0xF8	; 248
     7da:	1f 92       	push	r1
     7dc:	8f 93       	push	r24
     7de:	85 e4       	ldi	r24, 0x45	; 69
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	9f 93       	push	r25
     7e4:	8f 93       	push	r24
     7e6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <printf>
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
     7ea:	80 e9       	ldi	r24, 0x90	; 144
     7ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	2b cd       	rjmp	.-1450   	; 0x250 <main+0xba>

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     7fa:	9f e9       	ldi	r25, 0x9F	; 159
     7fc:	98 0f       	add	r25, r24
     7fe:	96 30       	cpi	r25, 0x06	; 6
     800:	08 f0       	brcs	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     802:	4d c0       	rjmp	.+154    	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
     804:	82 95       	swap	r24
     806:	80 7f       	andi	r24, 0xF0	; 240
     808:	80 57       	subi	r24, 0x70	; 112
      read(addr, len);
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
     80a:	9b 81       	ldd	r25, Y+3	; 0x03
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     80c:	20 ed       	ldi	r18, 0xD0	; 208
     80e:	29 0f       	add	r18, r25
     810:	2a 30       	cpi	r18, 0x0A	; 10
     812:	08 f4       	brcc	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	53 cd       	rjmp	.-1370   	; 0x2bc <main+0x126>
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     816:	2f e9       	ldi	r18, 0x9F	; 159
     818:	29 0f       	add	r18, r25
     81a:	26 30       	cpi	r18, 0x06	; 6
     81c:	08 f0       	brcs	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81e:	41 c0       	rjmp	.+130    	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     820:	97 55       	subi	r25, 0x57	; 87
     822:	4d cd       	rjmp	.-1382   	; 0x2be <main+0x128>
     824:	2f e9       	ldi	r18, 0x9F	; 159
     826:	23 0f       	add	r18, r19
     828:	26 30       	cpi	r18, 0x06	; 6
     82a:	e8 f5       	brcc	.+122    	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
    return ch - 'a' + 10;
     82c:	e3 2e       	mov	r14, r19
     82e:	33 0f       	add	r19, r19
     830:	ff 08       	sbc	r15, r15
     832:	97 01       	movw	r18, r14
     834:	27 55       	subi	r18, 0x57	; 87
     836:	31 09       	sbc	r19, r1
     838:	86 cd       	rjmp	.-1268   	; 0x346 <main+0x1b0>

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     83a:	2f e9       	ldi	r18, 0x9F	; 159
     83c:	23 0f       	add	r18, r19
     83e:	26 30       	cpi	r18, 0x06	; 6
     840:	c0 f5       	brcc	.+112    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     842:	e3 2e       	mov	r14, r19
     844:	33 0f       	add	r19, r19
     846:	ff 08       	sbc	r15, r15
     848:	f7 e5       	ldi	r31, 0x57	; 87
     84a:	ef 1a       	sub	r14, r31
     84c:	f1 08       	sbc	r15, r1
     84e:	97 01       	movw	r18, r14
     850:	22 95       	swap	r18
     852:	32 95       	swap	r19
     854:	30 7f       	andi	r19, 0xF0	; 240
     856:	32 27       	eor	r19, r18
     858:	20 7f       	andi	r18, 0xF0	; 240
     85a:	32 27       	eor	r19, r18
     85c:	66 cd       	rjmp	.-1332   	; 0x32a <main+0x194>
     85e:	9f e9       	ldi	r25, 0x9F	; 159
     860:	98 0f       	add	r25, r24
     862:	96 30       	cpi	r25, 0x06	; 6
     864:	18 f5       	brcc	.+70     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     866:	08 2e       	mov	r0, r24
     868:	00 0c       	add	r0, r0
     86a:	99 0b       	sbc	r25, r25
     86c:	87 55       	subi	r24, 0x57	; 87
     86e:	91 09       	sbc	r25, r1
     870:	ac 01       	movw	r20, r24
     872:	54 2f       	mov	r21, r20
     874:	44 27       	eor	r20, r20
     876:	52 95       	swap	r21
     878:	50 7f       	andi	r21, 0xF0	; 240
    }
    else if (strcmp(command, "write") == 0)
    {
      scanf("%s", i8hex);
      len = (hex2int(i8hex[1]) << 4) + hex2int(i8hex[2]);
      addr = (hex2int(i8hex[3]) << 12) + (hex2int(i8hex[4]) << 8) + (hex2int(i8hex[5]) << 4) + hex2int(i8hex[6]);
     87a:	8d 81       	ldd	r24, Y+5	; 0x05
  i2cCheck(0xf8, "I2C stop");
}

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
     87c:	90 ed       	ldi	r25, 0xD0	; 208
     87e:	98 0f       	add	r25, r24
     880:	9a 30       	cpi	r25, 0x0A	; 10
     882:	08 f4       	brcc	.+2      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     884:	37 cd       	rjmp	.-1426   	; 0x2f4 <main+0x15e>
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     886:	9f e9       	ldi	r25, 0x9F	; 159
     888:	98 0f       	add	r25, r24
     88a:	96 30       	cpi	r25, 0x06	; 6
     88c:	a8 f4       	brcc	.+42     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
     88e:	28 2f       	mov	r18, r24
     890:	88 0f       	add	r24, r24
     892:	33 0b       	sbc	r19, r19
     894:	27 55       	subi	r18, 0x57	; 87
     896:	31 09       	sbc	r19, r1
     898:	92 2f       	mov	r25, r18
     89a:	88 27       	eor	r24, r24
     89c:	31 cd       	rjmp	.-1438   	; 0x300 <main+0x16a>
     89e:	80 ef       	ldi	r24, 0xF0	; 240
     8a0:	07 cd       	rjmp	.-1522   	; 0x2b0 <main+0x11a>
     8a2:	9f ef       	ldi	r25, 0xFF	; 255
     8a4:	0c cd       	rjmp	.-1512   	; 0x2be <main+0x128>
    return ch - 'a' + 10;
  return -1;
     8a6:	2f ef       	ldi	r18, 0xFF	; 255
     8a8:	3f ef       	ldi	r19, 0xFF	; 255
     8aa:	4d cd       	rjmp	.-1382   	; 0x346 <main+0x1b0>

int hex2int(char ch)
{
  if (ch >= '0' && ch <= '9')
    return ch - '0';
  if (ch >= 'a' && ch <= 'f')
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 ef       	ldi	r21, 0xF0	; 240
     8b0:	1b cd       	rjmp	.-1482   	; 0x2e8 <main+0x152>
     8b2:	20 ef       	ldi	r18, 0xF0	; 240
     8b4:	3f ef       	ldi	r19, 0xFF	; 255
     8b6:	39 cd       	rjmp	.-1422   	; 0x32a <main+0x194>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	9f ef       	ldi	r25, 0xFF	; 255
     8bc:	21 cd       	rjmp	.-1470   	; 0x300 <main+0x16a>

000008be <strcmp>:
     8be:	fb 01       	movw	r30, r22
     8c0:	dc 01       	movw	r26, r24
     8c2:	8d 91       	ld	r24, X+
     8c4:	01 90       	ld	r0, Z+
     8c6:	80 19       	sub	r24, r0
     8c8:	01 10       	cpse	r0, r1
     8ca:	d9 f3       	breq	.-10     	; 0x8c2 <strcmp+0x4>
     8cc:	99 0b       	sbc	r25, r25
     8ce:	08 95       	ret

000008d0 <printf>:
     8d0:	a0 e0       	ldi	r26, 0x00	; 0
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	ee e6       	ldi	r30, 0x6E	; 110
     8d6:	f4 e0       	ldi	r31, 0x04	; 4
     8d8:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__prologue_saves__+0x20>
     8dc:	ae 01       	movw	r20, r28
     8de:	4b 5f       	subi	r20, 0xFB	; 251
     8e0:	5f 4f       	sbci	r21, 0xFF	; 255
     8e2:	fa 01       	movw	r30, r20
     8e4:	61 91       	ld	r22, Z+
     8e6:	71 91       	ld	r23, Z+
     8e8:	af 01       	movw	r20, r30
     8ea:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__iob+0x2>
     8ee:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <__iob+0x3>
     8f2:	0e 94 c4 04 	call	0x988	; 0x988 <vfprintf>
     8f6:	e2 e0       	ldi	r30, 0x02	; 2
     8f8:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__epilogue_restores__+0x20>

000008fc <puts>:
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	e0 91 cc 02 	lds	r30, 0x02CC	; 0x8002cc <__iob+0x2>
     908:	f0 91 cd 02 	lds	r31, 0x02CD	; 0x8002cd <__iob+0x3>
     90c:	23 81       	ldd	r18, Z+3	; 0x03
     90e:	21 ff       	sbrs	r18, 1
     910:	1b c0       	rjmp	.+54     	; 0x948 <__stack+0x49>
     912:	8c 01       	movw	r16, r24
     914:	d0 e0       	ldi	r29, 0x00	; 0
     916:	c0 e0       	ldi	r28, 0x00	; 0
     918:	f8 01       	movw	r30, r16
     91a:	81 91       	ld	r24, Z+
     91c:	8f 01       	movw	r16, r30
     91e:	60 91 cc 02 	lds	r22, 0x02CC	; 0x8002cc <__iob+0x2>
     922:	70 91 cd 02 	lds	r23, 0x02CD	; 0x8002cd <__iob+0x3>
     926:	db 01       	movw	r26, r22
     928:	18 96       	adiw	r26, 0x08	; 8
     92a:	ed 91       	ld	r30, X+
     92c:	fc 91       	ld	r31, X
     92e:	19 97       	sbiw	r26, 0x09	; 9
     930:	88 23       	and	r24, r24
     932:	31 f0       	breq	.+12     	; 0x940 <__stack+0x41>
     934:	09 95       	icall
     936:	89 2b       	or	r24, r25
     938:	79 f3       	breq	.-34     	; 0x918 <__stack+0x19>
     93a:	df ef       	ldi	r29, 0xFF	; 255
     93c:	cf ef       	ldi	r28, 0xFF	; 255
     93e:	ec cf       	rjmp	.-40     	; 0x918 <__stack+0x19>
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	09 95       	icall
     944:	89 2b       	or	r24, r25
     946:	19 f0       	breq	.+6      	; 0x94e <__stack+0x4f>
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	9f ef       	ldi	r25, 0xFF	; 255
     94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0x53>
     94e:	8d 2f       	mov	r24, r29
     950:	9c 2f       	mov	r25, r28
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <scanf>:
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	e4 eb       	ldi	r30, 0xB4	; 180
     962:	f4 e0       	ldi	r31, 0x04	; 4
     964:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__prologue_saves__+0x20>
     968:	ae 01       	movw	r20, r28
     96a:	4b 5f       	subi	r20, 0xFB	; 251
     96c:	5f 4f       	sbci	r21, 0xFF	; 255
     96e:	fa 01       	movw	r30, r20
     970:	61 91       	ld	r22, Z+
     972:	71 91       	ld	r23, Z+
     974:	af 01       	movw	r20, r30
     976:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <__iob>
     97a:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <__iob+0x1>
     97e:	0e 94 41 08 	call	0x1082	; 0x1082 <vfscanf>
     982:	e2 e0       	ldi	r30, 0x02	; 2
     984:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__epilogue_restores__+0x20>

00000988 <vfprintf>:
     988:	ab e0       	ldi	r26, 0x0B	; 11
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	ea ec       	ldi	r30, 0xCA	; 202
     98e:	f4 e0       	ldi	r31, 0x04	; 4
     990:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__prologue_saves__>
     994:	6c 01       	movw	r12, r24
     996:	7b 01       	movw	r14, r22
     998:	8a 01       	movw	r16, r20
     99a:	fc 01       	movw	r30, r24
     99c:	17 82       	std	Z+7, r1	; 0x07
     99e:	16 82       	std	Z+6, r1	; 0x06
     9a0:	83 81       	ldd	r24, Z+3	; 0x03
     9a2:	81 ff       	sbrs	r24, 1
     9a4:	cc c1       	rjmp	.+920    	; 0xd3e <vfprintf+0x3b6>
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	3c 01       	movw	r6, r24
     9ac:	f6 01       	movw	r30, r12
     9ae:	93 81       	ldd	r25, Z+3	; 0x03
     9b0:	f7 01       	movw	r30, r14
     9b2:	93 fd       	sbrc	r25, 3
     9b4:	85 91       	lpm	r24, Z+
     9b6:	93 ff       	sbrs	r25, 3
     9b8:	81 91       	ld	r24, Z+
     9ba:	7f 01       	movw	r14, r30
     9bc:	88 23       	and	r24, r24
     9be:	09 f4       	brne	.+2      	; 0x9c2 <vfprintf+0x3a>
     9c0:	ba c1       	rjmp	.+884    	; 0xd36 <vfprintf+0x3ae>
     9c2:	85 32       	cpi	r24, 0x25	; 37
     9c4:	39 f4       	brne	.+14     	; 0x9d4 <vfprintf+0x4c>
     9c6:	93 fd       	sbrc	r25, 3
     9c8:	85 91       	lpm	r24, Z+
     9ca:	93 ff       	sbrs	r25, 3
     9cc:	81 91       	ld	r24, Z+
     9ce:	7f 01       	movw	r14, r30
     9d0:	85 32       	cpi	r24, 0x25	; 37
     9d2:	29 f4       	brne	.+10     	; 0x9de <vfprintf+0x56>
     9d4:	b6 01       	movw	r22, r12
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     9dc:	e7 cf       	rjmp	.-50     	; 0x9ac <vfprintf+0x24>
     9de:	91 2c       	mov	r9, r1
     9e0:	21 2c       	mov	r2, r1
     9e2:	31 2c       	mov	r3, r1
     9e4:	ff e1       	ldi	r31, 0x1F	; 31
     9e6:	f3 15       	cp	r31, r3
     9e8:	d8 f0       	brcs	.+54     	; 0xa20 <vfprintf+0x98>
     9ea:	8b 32       	cpi	r24, 0x2B	; 43
     9ec:	79 f0       	breq	.+30     	; 0xa0c <vfprintf+0x84>
     9ee:	38 f4       	brcc	.+14     	; 0x9fe <vfprintf+0x76>
     9f0:	80 32       	cpi	r24, 0x20	; 32
     9f2:	79 f0       	breq	.+30     	; 0xa12 <vfprintf+0x8a>
     9f4:	83 32       	cpi	r24, 0x23	; 35
     9f6:	a1 f4       	brne	.+40     	; 0xa20 <vfprintf+0x98>
     9f8:	23 2d       	mov	r18, r3
     9fa:	20 61       	ori	r18, 0x10	; 16
     9fc:	1d c0       	rjmp	.+58     	; 0xa38 <vfprintf+0xb0>
     9fe:	8d 32       	cpi	r24, 0x2D	; 45
     a00:	61 f0       	breq	.+24     	; 0xa1a <vfprintf+0x92>
     a02:	80 33       	cpi	r24, 0x30	; 48
     a04:	69 f4       	brne	.+26     	; 0xa20 <vfprintf+0x98>
     a06:	23 2d       	mov	r18, r3
     a08:	21 60       	ori	r18, 0x01	; 1
     a0a:	16 c0       	rjmp	.+44     	; 0xa38 <vfprintf+0xb0>
     a0c:	83 2d       	mov	r24, r3
     a0e:	82 60       	ori	r24, 0x02	; 2
     a10:	38 2e       	mov	r3, r24
     a12:	e3 2d       	mov	r30, r3
     a14:	e4 60       	ori	r30, 0x04	; 4
     a16:	3e 2e       	mov	r3, r30
     a18:	2a c0       	rjmp	.+84     	; 0xa6e <vfprintf+0xe6>
     a1a:	f3 2d       	mov	r31, r3
     a1c:	f8 60       	ori	r31, 0x08	; 8
     a1e:	1d c0       	rjmp	.+58     	; 0xa5a <vfprintf+0xd2>
     a20:	37 fc       	sbrc	r3, 7
     a22:	2d c0       	rjmp	.+90     	; 0xa7e <vfprintf+0xf6>
     a24:	20 ed       	ldi	r18, 0xD0	; 208
     a26:	28 0f       	add	r18, r24
     a28:	2a 30       	cpi	r18, 0x0A	; 10
     a2a:	40 f0       	brcs	.+16     	; 0xa3c <vfprintf+0xb4>
     a2c:	8e 32       	cpi	r24, 0x2E	; 46
     a2e:	b9 f4       	brne	.+46     	; 0xa5e <vfprintf+0xd6>
     a30:	36 fc       	sbrc	r3, 6
     a32:	81 c1       	rjmp	.+770    	; 0xd36 <vfprintf+0x3ae>
     a34:	23 2d       	mov	r18, r3
     a36:	20 64       	ori	r18, 0x40	; 64
     a38:	32 2e       	mov	r3, r18
     a3a:	19 c0       	rjmp	.+50     	; 0xa6e <vfprintf+0xe6>
     a3c:	36 fe       	sbrs	r3, 6
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0xc4>
     a40:	8a e0       	ldi	r24, 0x0A	; 10
     a42:	98 9e       	mul	r9, r24
     a44:	20 0d       	add	r18, r0
     a46:	11 24       	eor	r1, r1
     a48:	92 2e       	mov	r9, r18
     a4a:	11 c0       	rjmp	.+34     	; 0xa6e <vfprintf+0xe6>
     a4c:	ea e0       	ldi	r30, 0x0A	; 10
     a4e:	2e 9e       	mul	r2, r30
     a50:	20 0d       	add	r18, r0
     a52:	11 24       	eor	r1, r1
     a54:	22 2e       	mov	r2, r18
     a56:	f3 2d       	mov	r31, r3
     a58:	f0 62       	ori	r31, 0x20	; 32
     a5a:	3f 2e       	mov	r3, r31
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <vfprintf+0xe6>
     a5e:	8c 36       	cpi	r24, 0x6C	; 108
     a60:	21 f4       	brne	.+8      	; 0xa6a <vfprintf+0xe2>
     a62:	83 2d       	mov	r24, r3
     a64:	80 68       	ori	r24, 0x80	; 128
     a66:	38 2e       	mov	r3, r24
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <vfprintf+0xe6>
     a6a:	88 36       	cpi	r24, 0x68	; 104
     a6c:	41 f4       	brne	.+16     	; 0xa7e <vfprintf+0xf6>
     a6e:	f7 01       	movw	r30, r14
     a70:	93 fd       	sbrc	r25, 3
     a72:	85 91       	lpm	r24, Z+
     a74:	93 ff       	sbrs	r25, 3
     a76:	81 91       	ld	r24, Z+
     a78:	7f 01       	movw	r14, r30
     a7a:	81 11       	cpse	r24, r1
     a7c:	b3 cf       	rjmp	.-154    	; 0x9e4 <vfprintf+0x5c>
     a7e:	98 2f       	mov	r25, r24
     a80:	9f 7d       	andi	r25, 0xDF	; 223
     a82:	95 54       	subi	r25, 0x45	; 69
     a84:	93 30       	cpi	r25, 0x03	; 3
     a86:	28 f4       	brcc	.+10     	; 0xa92 <vfprintf+0x10a>
     a88:	0c 5f       	subi	r16, 0xFC	; 252
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255
     a8c:	9f e3       	ldi	r25, 0x3F	; 63
     a8e:	99 83       	std	Y+1, r25	; 0x01
     a90:	0d c0       	rjmp	.+26     	; 0xaac <vfprintf+0x124>
     a92:	83 36       	cpi	r24, 0x63	; 99
     a94:	31 f0       	breq	.+12     	; 0xaa2 <vfprintf+0x11a>
     a96:	83 37       	cpi	r24, 0x73	; 115
     a98:	71 f0       	breq	.+28     	; 0xab6 <vfprintf+0x12e>
     a9a:	83 35       	cpi	r24, 0x53	; 83
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <vfprintf+0x118>
     a9e:	59 c0       	rjmp	.+178    	; 0xb52 <vfprintf+0x1ca>
     aa0:	21 c0       	rjmp	.+66     	; 0xae4 <vfprintf+0x15c>
     aa2:	f8 01       	movw	r30, r16
     aa4:	80 81       	ld	r24, Z
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	0e 5f       	subi	r16, 0xFE	; 254
     aaa:	1f 4f       	sbci	r17, 0xFF	; 255
     aac:	88 24       	eor	r8, r8
     aae:	83 94       	inc	r8
     ab0:	91 2c       	mov	r9, r1
     ab2:	53 01       	movw	r10, r6
     ab4:	13 c0       	rjmp	.+38     	; 0xadc <vfprintf+0x154>
     ab6:	28 01       	movw	r4, r16
     ab8:	f2 e0       	ldi	r31, 0x02	; 2
     aba:	4f 0e       	add	r4, r31
     abc:	51 1c       	adc	r5, r1
     abe:	f8 01       	movw	r30, r16
     ac0:	a0 80       	ld	r10, Z
     ac2:	b1 80       	ldd	r11, Z+1	; 0x01
     ac4:	36 fe       	sbrs	r3, 6
     ac6:	03 c0       	rjmp	.+6      	; 0xace <vfprintf+0x146>
     ac8:	69 2d       	mov	r22, r9
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <vfprintf+0x14a>
     ace:	6f ef       	ldi	r22, 0xFF	; 255
     ad0:	7f ef       	ldi	r23, 0xFF	; 255
     ad2:	c5 01       	movw	r24, r10
     ad4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <strnlen>
     ad8:	4c 01       	movw	r8, r24
     ada:	82 01       	movw	r16, r4
     adc:	f3 2d       	mov	r31, r3
     ade:	ff 77       	andi	r31, 0x7F	; 127
     ae0:	3f 2e       	mov	r3, r31
     ae2:	16 c0       	rjmp	.+44     	; 0xb10 <vfprintf+0x188>
     ae4:	28 01       	movw	r4, r16
     ae6:	22 e0       	ldi	r18, 0x02	; 2
     ae8:	42 0e       	add	r4, r18
     aea:	51 1c       	adc	r5, r1
     aec:	f8 01       	movw	r30, r16
     aee:	a0 80       	ld	r10, Z
     af0:	b1 80       	ldd	r11, Z+1	; 0x01
     af2:	36 fe       	sbrs	r3, 6
     af4:	03 c0       	rjmp	.+6      	; 0xafc <vfprintf+0x174>
     af6:	69 2d       	mov	r22, r9
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0x178>
     afc:	6f ef       	ldi	r22, 0xFF	; 255
     afe:	7f ef       	ldi	r23, 0xFF	; 255
     b00:	c5 01       	movw	r24, r10
     b02:	0e 94 66 09 	call	0x12cc	; 0x12cc <strnlen_P>
     b06:	4c 01       	movw	r8, r24
     b08:	f3 2d       	mov	r31, r3
     b0a:	f0 68       	ori	r31, 0x80	; 128
     b0c:	3f 2e       	mov	r3, r31
     b0e:	82 01       	movw	r16, r4
     b10:	33 fc       	sbrc	r3, 3
     b12:	1b c0       	rjmp	.+54     	; 0xb4a <vfprintf+0x1c2>
     b14:	82 2d       	mov	r24, r2
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	88 16       	cp	r8, r24
     b1a:	99 06       	cpc	r9, r25
     b1c:	b0 f4       	brcc	.+44     	; 0xb4a <vfprintf+0x1c2>
     b1e:	b6 01       	movw	r22, r12
     b20:	80 e2       	ldi	r24, 0x20	; 32
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     b28:	2a 94       	dec	r2
     b2a:	f4 cf       	rjmp	.-24     	; 0xb14 <vfprintf+0x18c>
     b2c:	f5 01       	movw	r30, r10
     b2e:	37 fc       	sbrc	r3, 7
     b30:	85 91       	lpm	r24, Z+
     b32:	37 fe       	sbrs	r3, 7
     b34:	81 91       	ld	r24, Z+
     b36:	5f 01       	movw	r10, r30
     b38:	b6 01       	movw	r22, r12
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     b40:	21 10       	cpse	r2, r1
     b42:	2a 94       	dec	r2
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	82 1a       	sub	r8, r18
     b48:	91 08       	sbc	r9, r1
     b4a:	81 14       	cp	r8, r1
     b4c:	91 04       	cpc	r9, r1
     b4e:	71 f7       	brne	.-36     	; 0xb2c <vfprintf+0x1a4>
     b50:	e8 c0       	rjmp	.+464    	; 0xd22 <vfprintf+0x39a>
     b52:	84 36       	cpi	r24, 0x64	; 100
     b54:	11 f0       	breq	.+4      	; 0xb5a <vfprintf+0x1d2>
     b56:	89 36       	cpi	r24, 0x69	; 105
     b58:	41 f5       	brne	.+80     	; 0xbaa <vfprintf+0x222>
     b5a:	f8 01       	movw	r30, r16
     b5c:	37 fe       	sbrs	r3, 7
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <vfprintf+0x1e6>
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	0c 5f       	subi	r16, 0xFC	; 252
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <vfprintf+0x1f6>
     b6e:	60 81       	ld	r22, Z
     b70:	71 81       	ldd	r23, Z+1	; 0x01
     b72:	07 2e       	mov	r0, r23
     b74:	00 0c       	add	r0, r0
     b76:	88 0b       	sbc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	0e 5f       	subi	r16, 0xFE	; 254
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
     b7e:	f3 2d       	mov	r31, r3
     b80:	ff 76       	andi	r31, 0x6F	; 111
     b82:	3f 2e       	mov	r3, r31
     b84:	97 ff       	sbrs	r25, 7
     b86:	09 c0       	rjmp	.+18     	; 0xb9a <vfprintf+0x212>
     b88:	90 95       	com	r25
     b8a:	80 95       	com	r24
     b8c:	70 95       	com	r23
     b8e:	61 95       	neg	r22
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	f0 68       	ori	r31, 0x80	; 128
     b98:	3f 2e       	mov	r3, r31
     b9a:	2a e0       	ldi	r18, 0x0A	; 10
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	a3 01       	movw	r20, r6
     ba0:	0e 94 0f 0a 	call	0x141e	; 0x141e <__ultoa_invert>
     ba4:	88 2e       	mov	r8, r24
     ba6:	86 18       	sub	r8, r6
     ba8:	45 c0       	rjmp	.+138    	; 0xc34 <vfprintf+0x2ac>
     baa:	85 37       	cpi	r24, 0x75	; 117
     bac:	31 f4       	brne	.+12     	; 0xbba <vfprintf+0x232>
     bae:	23 2d       	mov	r18, r3
     bb0:	2f 7e       	andi	r18, 0xEF	; 239
     bb2:	b2 2e       	mov	r11, r18
     bb4:	2a e0       	ldi	r18, 0x0A	; 10
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	25 c0       	rjmp	.+74     	; 0xc04 <vfprintf+0x27c>
     bba:	93 2d       	mov	r25, r3
     bbc:	99 7f       	andi	r25, 0xF9	; 249
     bbe:	b9 2e       	mov	r11, r25
     bc0:	8f 36       	cpi	r24, 0x6F	; 111
     bc2:	c1 f0       	breq	.+48     	; 0xbf4 <vfprintf+0x26c>
     bc4:	18 f4       	brcc	.+6      	; 0xbcc <vfprintf+0x244>
     bc6:	88 35       	cpi	r24, 0x58	; 88
     bc8:	79 f0       	breq	.+30     	; 0xbe8 <vfprintf+0x260>
     bca:	b5 c0       	rjmp	.+362    	; 0xd36 <vfprintf+0x3ae>
     bcc:	80 37       	cpi	r24, 0x70	; 112
     bce:	19 f0       	breq	.+6      	; 0xbd6 <vfprintf+0x24e>
     bd0:	88 37       	cpi	r24, 0x78	; 120
     bd2:	21 f0       	breq	.+8      	; 0xbdc <vfprintf+0x254>
     bd4:	b0 c0       	rjmp	.+352    	; 0xd36 <vfprintf+0x3ae>
     bd6:	e9 2f       	mov	r30, r25
     bd8:	e0 61       	ori	r30, 0x10	; 16
     bda:	be 2e       	mov	r11, r30
     bdc:	b4 fe       	sbrs	r11, 4
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <vfprintf+0x272>
     be0:	fb 2d       	mov	r31, r11
     be2:	f4 60       	ori	r31, 0x04	; 4
     be4:	bf 2e       	mov	r11, r31
     be6:	09 c0       	rjmp	.+18     	; 0xbfa <vfprintf+0x272>
     be8:	34 fe       	sbrs	r3, 4
     bea:	0a c0       	rjmp	.+20     	; 0xc00 <vfprintf+0x278>
     bec:	29 2f       	mov	r18, r25
     bee:	26 60       	ori	r18, 0x06	; 6
     bf0:	b2 2e       	mov	r11, r18
     bf2:	06 c0       	rjmp	.+12     	; 0xc00 <vfprintf+0x278>
     bf4:	28 e0       	ldi	r18, 0x08	; 8
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <vfprintf+0x27c>
     bfa:	20 e1       	ldi	r18, 0x10	; 16
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x27c>
     c00:	20 e1       	ldi	r18, 0x10	; 16
     c02:	32 e0       	ldi	r19, 0x02	; 2
     c04:	f8 01       	movw	r30, r16
     c06:	b7 fe       	sbrs	r11, 7
     c08:	07 c0       	rjmp	.+14     	; 0xc18 <vfprintf+0x290>
     c0a:	60 81       	ld	r22, Z
     c0c:	71 81       	ldd	r23, Z+1	; 0x01
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	93 81       	ldd	r25, Z+3	; 0x03
     c12:	0c 5f       	subi	r16, 0xFC	; 252
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x29c>
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 5f       	subi	r16, 0xFE	; 254
     c22:	1f 4f       	sbci	r17, 0xFF	; 255
     c24:	a3 01       	movw	r20, r6
     c26:	0e 94 0f 0a 	call	0x141e	; 0x141e <__ultoa_invert>
     c2a:	88 2e       	mov	r8, r24
     c2c:	86 18       	sub	r8, r6
     c2e:	fb 2d       	mov	r31, r11
     c30:	ff 77       	andi	r31, 0x7F	; 127
     c32:	3f 2e       	mov	r3, r31
     c34:	36 fe       	sbrs	r3, 6
     c36:	0d c0       	rjmp	.+26     	; 0xc52 <vfprintf+0x2ca>
     c38:	23 2d       	mov	r18, r3
     c3a:	2e 7f       	andi	r18, 0xFE	; 254
     c3c:	a2 2e       	mov	r10, r18
     c3e:	89 14       	cp	r8, r9
     c40:	58 f4       	brcc	.+22     	; 0xc58 <vfprintf+0x2d0>
     c42:	34 fe       	sbrs	r3, 4
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <vfprintf+0x2d4>
     c46:	32 fc       	sbrc	r3, 2
     c48:	09 c0       	rjmp	.+18     	; 0xc5c <vfprintf+0x2d4>
     c4a:	83 2d       	mov	r24, r3
     c4c:	8e 7e       	andi	r24, 0xEE	; 238
     c4e:	a8 2e       	mov	r10, r24
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <vfprintf+0x2d4>
     c52:	b8 2c       	mov	r11, r8
     c54:	a3 2c       	mov	r10, r3
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x2d6>
     c58:	b8 2c       	mov	r11, r8
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <vfprintf+0x2d6>
     c5c:	b9 2c       	mov	r11, r9
     c5e:	a4 fe       	sbrs	r10, 4
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <vfprintf+0x2f8>
     c62:	fe 01       	movw	r30, r28
     c64:	e8 0d       	add	r30, r8
     c66:	f1 1d       	adc	r31, r1
     c68:	80 81       	ld	r24, Z
     c6a:	80 33       	cpi	r24, 0x30	; 48
     c6c:	21 f4       	brne	.+8      	; 0xc76 <vfprintf+0x2ee>
     c6e:	9a 2d       	mov	r25, r10
     c70:	99 7e       	andi	r25, 0xE9	; 233
     c72:	a9 2e       	mov	r10, r25
     c74:	09 c0       	rjmp	.+18     	; 0xc88 <vfprintf+0x300>
     c76:	a2 fe       	sbrs	r10, 2
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x2fe>
     c7a:	b3 94       	inc	r11
     c7c:	b3 94       	inc	r11
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <vfprintf+0x300>
     c80:	8a 2d       	mov	r24, r10
     c82:	86 78       	andi	r24, 0x86	; 134
     c84:	09 f0       	breq	.+2      	; 0xc88 <vfprintf+0x300>
     c86:	b3 94       	inc	r11
     c88:	a3 fc       	sbrc	r10, 3
     c8a:	11 c0       	rjmp	.+34     	; 0xcae <vfprintf+0x326>
     c8c:	a0 fe       	sbrs	r10, 0
     c8e:	06 c0       	rjmp	.+12     	; 0xc9c <vfprintf+0x314>
     c90:	b2 14       	cp	r11, r2
     c92:	88 f4       	brcc	.+34     	; 0xcb6 <vfprintf+0x32e>
     c94:	28 0c       	add	r2, r8
     c96:	92 2c       	mov	r9, r2
     c98:	9b 18       	sub	r9, r11
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <vfprintf+0x330>
     c9c:	b2 14       	cp	r11, r2
     c9e:	60 f4       	brcc	.+24     	; 0xcb8 <vfprintf+0x330>
     ca0:	b6 01       	movw	r22, r12
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     caa:	b3 94       	inc	r11
     cac:	f7 cf       	rjmp	.-18     	; 0xc9c <vfprintf+0x314>
     cae:	b2 14       	cp	r11, r2
     cb0:	18 f4       	brcc	.+6      	; 0xcb8 <vfprintf+0x330>
     cb2:	2b 18       	sub	r2, r11
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x332>
     cb6:	98 2c       	mov	r9, r8
     cb8:	21 2c       	mov	r2, r1
     cba:	a4 fe       	sbrs	r10, 4
     cbc:	10 c0       	rjmp	.+32     	; 0xcde <vfprintf+0x356>
     cbe:	b6 01       	movw	r22, r12
     cc0:	80 e3       	ldi	r24, 0x30	; 48
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     cc8:	a2 fe       	sbrs	r10, 2
     cca:	17 c0       	rjmp	.+46     	; 0xcfa <vfprintf+0x372>
     ccc:	a1 fc       	sbrc	r10, 1
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <vfprintf+0x34e>
     cd0:	88 e7       	ldi	r24, 0x78	; 120
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x352>
     cd6:	88 e5       	ldi	r24, 0x58	; 88
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	b6 01       	movw	r22, r12
     cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <vfprintf+0x36e>
     cde:	8a 2d       	mov	r24, r10
     ce0:	86 78       	andi	r24, 0x86	; 134
     ce2:	59 f0       	breq	.+22     	; 0xcfa <vfprintf+0x372>
     ce4:	a1 fe       	sbrs	r10, 1
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x364>
     ce8:	8b e2       	ldi	r24, 0x2B	; 43
     cea:	01 c0       	rjmp	.+2      	; 0xcee <vfprintf+0x366>
     cec:	80 e2       	ldi	r24, 0x20	; 32
     cee:	a7 fc       	sbrc	r10, 7
     cf0:	8d e2       	ldi	r24, 0x2D	; 45
     cf2:	b6 01       	movw	r22, r12
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     cfa:	89 14       	cp	r8, r9
     cfc:	38 f4       	brcc	.+14     	; 0xd0c <vfprintf+0x384>
     cfe:	b6 01       	movw	r22, r12
     d00:	80 e3       	ldi	r24, 0x30	; 48
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     d08:	9a 94       	dec	r9
     d0a:	f7 cf       	rjmp	.-18     	; 0xcfa <vfprintf+0x372>
     d0c:	8a 94       	dec	r8
     d0e:	f3 01       	movw	r30, r6
     d10:	e8 0d       	add	r30, r8
     d12:	f1 1d       	adc	r31, r1
     d14:	80 81       	ld	r24, Z
     d16:	b6 01       	movw	r22, r12
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     d1e:	81 10       	cpse	r8, r1
     d20:	f5 cf       	rjmp	.-22     	; 0xd0c <vfprintf+0x384>
     d22:	22 20       	and	r2, r2
     d24:	09 f4       	brne	.+2      	; 0xd28 <vfprintf+0x3a0>
     d26:	42 ce       	rjmp	.-892    	; 0x9ac <vfprintf+0x24>
     d28:	b6 01       	movw	r22, r12
     d2a:	80 e2       	ldi	r24, 0x20	; 32
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 ba 09 	call	0x1374	; 0x1374 <fputc>
     d32:	2a 94       	dec	r2
     d34:	f6 cf       	rjmp	.-20     	; 0xd22 <vfprintf+0x39a>
     d36:	f6 01       	movw	r30, r12
     d38:	86 81       	ldd	r24, Z+6	; 0x06
     d3a:	97 81       	ldd	r25, Z+7	; 0x07
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x3ba>
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	9f ef       	ldi	r25, 0xFF	; 255
     d42:	2b 96       	adiw	r28, 0x0b	; 11
     d44:	e2 e1       	ldi	r30, 0x12	; 18
     d46:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__epilogue_restores__>

00000d4a <putval>:
     d4a:	20 fd       	sbrc	r18, 0
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <putval+0x16>
     d4e:	fc 01       	movw	r30, r24
     d50:	23 fd       	sbrc	r18, 3
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <putval+0x14>
     d54:	22 ff       	sbrs	r18, 2
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <putval+0x12>
     d58:	73 83       	std	Z+3, r23	; 0x03
     d5a:	62 83       	std	Z+2, r22	; 0x02
     d5c:	51 83       	std	Z+1, r21	; 0x01
     d5e:	40 83       	st	Z, r20
     d60:	08 95       	ret

00000d62 <mulacc>:
     d62:	44 fd       	sbrc	r20, 4
     d64:	17 c0       	rjmp	.+46     	; 0xd94 <mulacc+0x32>
     d66:	46 fd       	sbrc	r20, 6
     d68:	17 c0       	rjmp	.+46     	; 0xd98 <mulacc+0x36>
     d6a:	ab 01       	movw	r20, r22
     d6c:	bc 01       	movw	r22, r24
     d6e:	da 01       	movw	r26, r20
     d70:	fb 01       	movw	r30, r22
     d72:	aa 0f       	add	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	ee 1f       	adc	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	10 94       	com	r1
     d7c:	d1 f7       	brne	.-12     	; 0xd72 <mulacc+0x10>
     d7e:	4a 0f       	add	r20, r26
     d80:	5b 1f       	adc	r21, r27
     d82:	6e 1f       	adc	r22, r30
     d84:	7f 1f       	adc	r23, r31
     d86:	cb 01       	movw	r24, r22
     d88:	ba 01       	movw	r22, r20
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <mulacc+0x44>
     d94:	33 e0       	ldi	r19, 0x03	; 3
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <mulacc+0x38>
     d98:	34 e0       	ldi	r19, 0x04	; 4
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	31 50       	subi	r19, 0x01	; 1
     da4:	d1 f7       	brne	.-12     	; 0xd9a <mulacc+0x38>
     da6:	62 0f       	add	r22, r18
     da8:	71 1d       	adc	r23, r1
     daa:	81 1d       	adc	r24, r1
     dac:	91 1d       	adc	r25, r1
     dae:	08 95       	ret

00000db0 <skip_spaces>:
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	8c 01       	movw	r16, r24
     dba:	c8 01       	movw	r24, r16
     dbc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
     dc0:	ec 01       	movw	r28, r24
     dc2:	97 fd       	sbrc	r25, 7
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <skip_spaces+0x26>
     dc6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <isspace>
     dca:	89 2b       	or	r24, r25
     dcc:	b1 f7       	brne	.-20     	; 0xdba <skip_spaces+0xa>
     dce:	b8 01       	movw	r22, r16
     dd0:	ce 01       	movw	r24, r28
     dd2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <ungetc>
     dd6:	ce 01       	movw	r24, r28
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <conv_int>:
     de2:	8f 92       	push	r8
     de4:	9f 92       	push	r9
     de6:	af 92       	push	r10
     de8:	bf 92       	push	r11
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	8c 01       	movw	r16, r24
     df8:	d6 2f       	mov	r29, r22
     dfa:	7a 01       	movw	r14, r20
     dfc:	b2 2e       	mov	r11, r18
     dfe:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
     e02:	9c 01       	movw	r18, r24
     e04:	33 27       	eor	r19, r19
     e06:	2b 32       	cpi	r18, 0x2B	; 43
     e08:	31 05       	cpc	r19, r1
     e0a:	31 f0       	breq	.+12     	; 0xe18 <conv_int+0x36>
     e0c:	2d 32       	cpi	r18, 0x2D	; 45
     e0e:	31 05       	cpc	r19, r1
     e10:	61 f4       	brne	.+24     	; 0xe2a <conv_int+0x48>
     e12:	8b 2d       	mov	r24, r11
     e14:	80 68       	ori	r24, 0x80	; 128
     e16:	b8 2e       	mov	r11, r24
     e18:	d1 50       	subi	r29, 0x01	; 1
     e1a:	11 f4       	brne	.+4      	; 0xe20 <conv_int+0x3e>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	68 c0       	rjmp	.+208    	; 0xef0 <conv_int+0x10e>
     e20:	c8 01       	movw	r24, r16
     e22:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
     e26:	97 fd       	sbrc	r25, 7
     e28:	f9 cf       	rjmp	.-14     	; 0xe1c <conv_int+0x3a>
     e2a:	cb 2d       	mov	r28, r11
     e2c:	cd 7f       	andi	r28, 0xFD	; 253
     e2e:	2b 2d       	mov	r18, r11
     e30:	20 73       	andi	r18, 0x30	; 48
     e32:	09 f5       	brne	.+66     	; 0xe76 <conv_int+0x94>
     e34:	80 33       	cpi	r24, 0x30	; 48
     e36:	f9 f4       	brne	.+62     	; 0xe76 <conv_int+0x94>
     e38:	aa 24       	eor	r10, r10
     e3a:	aa 94       	dec	r10
     e3c:	ad 0e       	add	r10, r29
     e3e:	09 f4       	brne	.+2      	; 0xe42 <conv_int+0x60>
     e40:	43 c0       	rjmp	.+134    	; 0xec8 <conv_int+0xe6>
     e42:	c8 01       	movw	r24, r16
     e44:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
     e48:	97 fd       	sbrc	r25, 7
     e4a:	3e c0       	rjmp	.+124    	; 0xec8 <conv_int+0xe6>
     e4c:	9c 01       	movw	r18, r24
     e4e:	2f 7d       	andi	r18, 0xDF	; 223
     e50:	33 27       	eor	r19, r19
     e52:	28 35       	cpi	r18, 0x58	; 88
     e54:	31 05       	cpc	r19, r1
     e56:	49 f4       	brne	.+18     	; 0xe6a <conv_int+0x88>
     e58:	c2 64       	ori	r28, 0x42	; 66
     e5a:	d2 50       	subi	r29, 0x02	; 2
     e5c:	a9 f1       	breq	.+106    	; 0xec8 <conv_int+0xe6>
     e5e:	c8 01       	movw	r24, r16
     e60:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
     e64:	97 ff       	sbrs	r25, 7
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <conv_int+0x94>
     e68:	2f c0       	rjmp	.+94     	; 0xec8 <conv_int+0xe6>
     e6a:	b6 fe       	sbrs	r11, 6
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <conv_int+0x90>
     e6e:	c2 60       	ori	r28, 0x02	; 2
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <conv_int+0x92>
     e72:	c2 61       	ori	r28, 0x12	; 18
     e74:	da 2d       	mov	r29, r10
     e76:	81 2c       	mov	r8, r1
     e78:	91 2c       	mov	r9, r1
     e7a:	54 01       	movw	r10, r8
     e7c:	20 ed       	ldi	r18, 0xD0	; 208
     e7e:	28 0f       	add	r18, r24
     e80:	28 30       	cpi	r18, 0x08	; 8
     e82:	80 f0       	brcs	.+32     	; 0xea4 <conv_int+0xc2>
     e84:	c4 ff       	sbrs	r28, 4
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <conv_int+0xae>
     e88:	b8 01       	movw	r22, r16
     e8a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <ungetc>
     e8e:	19 c0       	rjmp	.+50     	; 0xec2 <conv_int+0xe0>
     e90:	2a 30       	cpi	r18, 0x0A	; 10
     e92:	40 f0       	brcs	.+16     	; 0xea4 <conv_int+0xc2>
     e94:	c6 ff       	sbrs	r28, 6
     e96:	f8 cf       	rjmp	.-16     	; 0xe88 <conv_int+0xa6>
     e98:	2f 7d       	andi	r18, 0xDF	; 223
     e9a:	3f ee       	ldi	r19, 0xEF	; 239
     e9c:	32 0f       	add	r19, r18
     e9e:	36 30       	cpi	r19, 0x06	; 6
     ea0:	98 f7       	brcc	.-26     	; 0xe88 <conv_int+0xa6>
     ea2:	27 50       	subi	r18, 0x07	; 7
     ea4:	4c 2f       	mov	r20, r28
     ea6:	c5 01       	movw	r24, r10
     ea8:	b4 01       	movw	r22, r8
     eaa:	0e 94 b1 06 	call	0xd62	; 0xd62 <mulacc>
     eae:	4b 01       	movw	r8, r22
     eb0:	5c 01       	movw	r10, r24
     eb2:	c2 60       	ori	r28, 0x02	; 2
     eb4:	d1 50       	subi	r29, 0x01	; 1
     eb6:	59 f0       	breq	.+22     	; 0xece <conv_int+0xec>
     eb8:	c8 01       	movw	r24, r16
     eba:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
     ebe:	97 ff       	sbrs	r25, 7
     ec0:	dd cf       	rjmp	.-70     	; 0xe7c <conv_int+0x9a>
     ec2:	c1 fd       	sbrc	r28, 1
     ec4:	04 c0       	rjmp	.+8      	; 0xece <conv_int+0xec>
     ec6:	aa cf       	rjmp	.-172    	; 0xe1c <conv_int+0x3a>
     ec8:	81 2c       	mov	r8, r1
     eca:	91 2c       	mov	r9, r1
     ecc:	54 01       	movw	r10, r8
     ece:	c7 ff       	sbrs	r28, 7
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <conv_int+0x100>
     ed2:	b0 94       	com	r11
     ed4:	a0 94       	com	r10
     ed6:	90 94       	com	r9
     ed8:	80 94       	com	r8
     eda:	81 1c       	adc	r8, r1
     edc:	91 1c       	adc	r9, r1
     ede:	a1 1c       	adc	r10, r1
     ee0:	b1 1c       	adc	r11, r1
     ee2:	2c 2f       	mov	r18, r28
     ee4:	b5 01       	movw	r22, r10
     ee6:	a4 01       	movw	r20, r8
     ee8:	c7 01       	movw	r24, r14
     eea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <putval>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	08 95       	ret

00000f06 <conv_brk>:
     f06:	a0 e2       	ldi	r26, 0x20	; 32
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e9 e8       	ldi	r30, 0x89	; 137
     f0c:	f7 e0       	ldi	r31, 0x07	; 7
     f0e:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__prologue_saves__+0x6>
     f12:	5c 01       	movw	r10, r24
     f14:	96 2e       	mov	r9, r22
     f16:	7a 01       	movw	r14, r20
     f18:	f9 01       	movw	r30, r18
     f1a:	8e 01       	movw	r16, r28
     f1c:	0f 5f       	subi	r16, 0xFF	; 255
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
     f20:	68 01       	movw	r12, r16
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	d8 01       	movw	r26, r16
     f26:	1d 92       	st	X+, r1
     f28:	8a 95       	dec	r24
     f2a:	e9 f7       	brne	.-6      	; 0xf26 <conv_brk+0x20>
     f2c:	d5 01       	movw	r26, r10
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	8c 90       	ld	r8, X
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	61 2c       	mov	r6, r1
     f38:	71 2c       	mov	r7, r1
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	83 fc       	sbrc	r8, 3
     f42:	25 91       	lpm	r18, Z+
     f44:	83 fe       	sbrs	r8, 3
     f46:	21 91       	ld	r18, Z+
     f48:	8f 01       	movw	r16, r30
     f4a:	52 2e       	mov	r5, r18
     f4c:	21 11       	cpse	r18, r1
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <conv_brk+0x50>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	92 c0       	rjmp	.+292    	; 0x107a <conv_brk+0x174>
     f56:	2e 35       	cpi	r18, 0x5E	; 94
     f58:	11 f4       	brne	.+4      	; 0xf5e <conv_brk+0x58>
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	51 f1       	breq	.+84     	; 0xfb2 <conv_brk+0xac>
     f5e:	43 2f       	mov	r20, r19
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	48 17       	cp	r20, r24
     f64:	59 07       	cpc	r21, r25
     f66:	3c f4       	brge	.+14     	; 0xf76 <conv_brk+0x70>
     f68:	2d 35       	cpi	r18, 0x5D	; 93
     f6a:	59 f1       	breq	.+86     	; 0xfc2 <conv_brk+0xbc>
     f6c:	2d 32       	cpi	r18, 0x2D	; 45
     f6e:	19 f4       	brne	.+6      	; 0xf76 <conv_brk+0x70>
     f70:	77 20       	and	r7, r7
     f72:	09 f1       	breq	.+66     	; 0xfb6 <conv_brk+0xb0>
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <conv_brk+0x76>
     f76:	77 20       	and	r7, r7
     f78:	09 f4       	brne	.+2      	; 0xf7c <conv_brk+0x76>
     f7a:	6a c0       	rjmp	.+212    	; 0x1050 <conv_brk+0x14a>
     f7c:	45 2d       	mov	r20, r5
     f7e:	46 95       	lsr	r20
     f80:	46 95       	lsr	r20
     f82:	46 95       	lsr	r20
     f84:	d6 01       	movw	r26, r12
     f86:	a4 0f       	add	r26, r20
     f88:	b1 1d       	adc	r27, r1
     f8a:	45 2d       	mov	r20, r5
     f8c:	47 70       	andi	r20, 0x07	; 7
     f8e:	8b 01       	movw	r16, r22
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <conv_brk+0x90>
     f92:	00 0f       	add	r16, r16
     f94:	11 1f       	adc	r17, r17
     f96:	4a 95       	dec	r20
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <conv_brk+0x8c>
     f9a:	a8 01       	movw	r20, r16
     f9c:	5c 91       	ld	r21, X
     f9e:	45 2b       	or	r20, r21
     fa0:	4c 93       	st	X, r20
     fa2:	65 14       	cp	r6, r5
     fa4:	59 f0       	breq	.+22     	; 0xfbc <conv_brk+0xb6>
     fa6:	56 14       	cp	r5, r6
     fa8:	10 f4       	brcc	.+4      	; 0xfae <conv_brk+0xa8>
     faa:	53 94       	inc	r5
     fac:	e7 cf       	rjmp	.-50     	; 0xf7c <conv_brk+0x76>
     fae:	5a 94       	dec	r5
     fb0:	e5 cf       	rjmp	.-54     	; 0xf7c <conv_brk+0x76>
     fb2:	31 e0       	ldi	r19, 0x01	; 1
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <conv_brk+0xb8>
     fb6:	77 24       	eor	r7, r7
     fb8:	73 94       	inc	r7
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <conv_brk+0xb8>
     fbc:	71 2c       	mov	r7, r1
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	bf cf       	rjmp	.-130    	; 0xf40 <conv_brk+0x3a>
     fc2:	77 20       	and	r7, r7
     fc4:	19 f0       	breq	.+6      	; 0xfcc <conv_brk+0xc6>
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	80 62       	ori	r24, 0x20	; 32
     fca:	8e 83       	std	Y+6, r24	; 0x06
     fcc:	31 11       	cpse	r19, r1
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <conv_brk+0xd0>
     fd0:	88 24       	eor	r8, r8
     fd2:	83 94       	inc	r8
     fd4:	17 c0       	rjmp	.+46     	; 0x1004 <conv_brk+0xfe>
     fd6:	f6 01       	movw	r30, r12
     fd8:	9e 01       	movw	r18, r28
     fda:	2f 5d       	subi	r18, 0xDF	; 223
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	80 95       	com	r24
     fe2:	81 93       	st	Z+, r24
     fe4:	2e 17       	cp	r18, r30
     fe6:	3f 07       	cpc	r19, r31
     fe8:	d1 f7       	brne	.-12     	; 0xfde <conv_brk+0xd8>
     fea:	f2 cf       	rjmp	.-28     	; 0xfd0 <conv_brk+0xca>
     fec:	e1 14       	cp	r14, r1
     fee:	f1 04       	cpc	r15, r1
     ff0:	29 f0       	breq	.+10     	; 0xffc <conv_brk+0xf6>
     ff2:	d7 01       	movw	r26, r14
     ff4:	8c 93       	st	X, r24
     ff6:	f7 01       	movw	r30, r14
     ff8:	31 96       	adiw	r30, 0x01	; 1
     ffa:	7f 01       	movw	r14, r30
     ffc:	9a 94       	dec	r9
     ffe:	81 2c       	mov	r8, r1
    1000:	99 20       	and	r9, r9
    1002:	f9 f0       	breq	.+62     	; 0x1042 <conv_brk+0x13c>
    1004:	c5 01       	movw	r24, r10
    1006:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
    100a:	97 fd       	sbrc	r25, 7
    100c:	18 c0       	rjmp	.+48     	; 0x103e <conv_brk+0x138>
    100e:	fc 01       	movw	r30, r24
    1010:	ff 27       	eor	r31, r31
    1012:	23 e0       	ldi	r18, 0x03	; 3
    1014:	f5 95       	asr	r31
    1016:	e7 95       	ror	r30
    1018:	2a 95       	dec	r18
    101a:	e1 f7       	brne	.-8      	; 0x1014 <conv_brk+0x10e>
    101c:	ec 0d       	add	r30, r12
    101e:	fd 1d       	adc	r31, r13
    1020:	20 81       	ld	r18, Z
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	ac 01       	movw	r20, r24
    1026:	47 70       	andi	r20, 0x07	; 7
    1028:	55 27       	eor	r21, r21
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <conv_brk+0x12a>
    102c:	35 95       	asr	r19
    102e:	27 95       	ror	r18
    1030:	4a 95       	dec	r20
    1032:	e2 f7       	brpl	.-8      	; 0x102c <conv_brk+0x126>
    1034:	20 fd       	sbrc	r18, 0
    1036:	da cf       	rjmp	.-76     	; 0xfec <conv_brk+0xe6>
    1038:	b5 01       	movw	r22, r10
    103a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <ungetc>
    103e:	81 10       	cpse	r8, r1
    1040:	87 cf       	rjmp	.-242    	; 0xf50 <conv_brk+0x4a>
    1042:	e1 14       	cp	r14, r1
    1044:	f1 04       	cpc	r15, r1
    1046:	11 f0       	breq	.+4      	; 0x104c <conv_brk+0x146>
    1048:	d7 01       	movw	r26, r14
    104a:	1c 92       	st	X, r1
    104c:	c8 01       	movw	r24, r16
    104e:	15 c0       	rjmp	.+42     	; 0x107a <conv_brk+0x174>
    1050:	42 2f       	mov	r20, r18
    1052:	46 95       	lsr	r20
    1054:	46 95       	lsr	r20
    1056:	46 95       	lsr	r20
    1058:	d6 01       	movw	r26, r12
    105a:	a4 0f       	add	r26, r20
    105c:	b1 1d       	adc	r27, r1
    105e:	42 2f       	mov	r20, r18
    1060:	47 70       	andi	r20, 0x07	; 7
    1062:	8b 01       	movw	r16, r22
    1064:	02 c0       	rjmp	.+4      	; 0x106a <conv_brk+0x164>
    1066:	00 0f       	add	r16, r16
    1068:	11 1f       	adc	r17, r17
    106a:	4a 95       	dec	r20
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <conv_brk+0x160>
    106e:	a8 01       	movw	r20, r16
    1070:	5c 91       	ld	r21, X
    1072:	45 2b       	or	r20, r21
    1074:	4c 93       	st	X, r20
    1076:	62 2e       	mov	r6, r18
    1078:	a2 cf       	rjmp	.-188    	; 0xfbe <conv_brk+0xb8>
    107a:	a0 96       	adiw	r28, 0x20	; 32
    107c:	ef e0       	ldi	r30, 0x0F	; 15
    107e:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__epilogue_restores__+0x6>

00001082 <vfscanf>:
    1082:	a0 e0       	ldi	r26, 0x00	; 0
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e7 e4       	ldi	r30, 0x47	; 71
    1088:	f8 e0       	ldi	r31, 0x08	; 8
    108a:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__prologue_saves__+0x6>
    108e:	6c 01       	movw	r12, r24
    1090:	eb 01       	movw	r28, r22
    1092:	5a 01       	movw	r10, r20
    1094:	fc 01       	movw	r30, r24
    1096:	17 82       	std	Z+7, r1	; 0x07
    1098:	16 82       	std	Z+6, r1	; 0x06
    109a:	51 2c       	mov	r5, r1
    109c:	f6 01       	movw	r30, r12
    109e:	e3 80       	ldd	r14, Z+3	; 0x03
    10a0:	fe 01       	movw	r30, r28
    10a2:	e3 fc       	sbrc	r14, 3
    10a4:	85 91       	lpm	r24, Z+
    10a6:	e3 fe       	sbrs	r14, 3
    10a8:	81 91       	ld	r24, Z+
    10aa:	18 2f       	mov	r17, r24
    10ac:	ef 01       	movw	r28, r30
    10ae:	88 23       	and	r24, r24
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <vfscanf+0x32>
    10b2:	ee c0       	rjmp	.+476    	; 0x1290 <vfscanf+0x20e>
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <isspace>
    10ba:	89 2b       	or	r24, r25
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <vfscanf+0x44>
    10be:	c6 01       	movw	r24, r12
    10c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <skip_spaces>
    10c4:	eb cf       	rjmp	.-42     	; 0x109c <vfscanf+0x1a>
    10c6:	15 32       	cpi	r17, 0x25	; 37
    10c8:	41 f4       	brne	.+16     	; 0x10da <vfscanf+0x58>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e3 fc       	sbrc	r14, 3
    10ce:	15 91       	lpm	r17, Z+
    10d0:	e3 fe       	sbrs	r14, 3
    10d2:	11 91       	ld	r17, Z+
    10d4:	ef 01       	movw	r28, r30
    10d6:	15 32       	cpi	r17, 0x25	; 37
    10d8:	81 f4       	brne	.+32     	; 0x10fa <vfscanf+0x78>
    10da:	c6 01       	movw	r24, r12
    10dc:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
    10e0:	97 fd       	sbrc	r25, 7
    10e2:	d4 c0       	rjmp	.+424    	; 0x128c <vfscanf+0x20a>
    10e4:	41 2f       	mov	r20, r17
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	9c 01       	movw	r18, r24
    10ea:	33 27       	eor	r19, r19
    10ec:	24 17       	cp	r18, r20
    10ee:	35 07       	cpc	r19, r21
    10f0:	a9 f2       	breq	.-86     	; 0x109c <vfscanf+0x1a>
    10f2:	b6 01       	movw	r22, r12
    10f4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <ungetc>
    10f8:	cb c0       	rjmp	.+406    	; 0x1290 <vfscanf+0x20e>
    10fa:	1a 32       	cpi	r17, 0x2A	; 42
    10fc:	39 f4       	brne	.+14     	; 0x110c <vfscanf+0x8a>
    10fe:	e3 fc       	sbrc	r14, 3
    1100:	15 91       	lpm	r17, Z+
    1102:	e3 fe       	sbrs	r14, 3
    1104:	11 91       	ld	r17, Z+
    1106:	ef 01       	movw	r28, r30
    1108:	01 e0       	ldi	r16, 0x01	; 1
    110a:	01 c0       	rjmp	.+2      	; 0x110e <vfscanf+0x8c>
    110c:	00 e0       	ldi	r16, 0x00	; 0
    110e:	f1 2c       	mov	r15, r1
    1110:	20 ed       	ldi	r18, 0xD0	; 208
    1112:	21 0f       	add	r18, r17
    1114:	2a 30       	cpi	r18, 0x0A	; 10
    1116:	80 f4       	brcc	.+32     	; 0x1138 <vfscanf+0xb6>
    1118:	02 60       	ori	r16, 0x02	; 2
    111a:	6f 2d       	mov	r22, r15
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	40 e2       	ldi	r20, 0x20	; 32
    1124:	0e 94 b1 06 	call	0xd62	; 0xd62 <mulacc>
    1128:	f6 2e       	mov	r15, r22
    112a:	fe 01       	movw	r30, r28
    112c:	e3 fc       	sbrc	r14, 3
    112e:	15 91       	lpm	r17, Z+
    1130:	e3 fe       	sbrs	r14, 3
    1132:	11 91       	ld	r17, Z+
    1134:	ef 01       	movw	r28, r30
    1136:	ec cf       	rjmp	.-40     	; 0x1110 <vfscanf+0x8e>
    1138:	01 ff       	sbrs	r16, 1
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <vfscanf+0xc0>
    113c:	f1 10       	cpse	r15, r1
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <vfscanf+0xc4>
    1140:	a7 c0       	rjmp	.+334    	; 0x1290 <vfscanf+0x20e>
    1142:	ff 24       	eor	r15, r15
    1144:	fa 94       	dec	r15
    1146:	18 36       	cpi	r17, 0x68	; 104
    1148:	19 f0       	breq	.+6      	; 0x1150 <vfscanf+0xce>
    114a:	1c 36       	cpi	r17, 0x6C	; 108
    114c:	51 f0       	breq	.+20     	; 0x1162 <vfscanf+0xe0>
    114e:	10 c0       	rjmp	.+32     	; 0x1170 <vfscanf+0xee>
    1150:	fe 01       	movw	r30, r28
    1152:	e3 fc       	sbrc	r14, 3
    1154:	15 91       	lpm	r17, Z+
    1156:	e3 fe       	sbrs	r14, 3
    1158:	11 91       	ld	r17, Z+
    115a:	ef 01       	movw	r28, r30
    115c:	18 36       	cpi	r17, 0x68	; 104
    115e:	41 f4       	brne	.+16     	; 0x1170 <vfscanf+0xee>
    1160:	08 60       	ori	r16, 0x08	; 8
    1162:	04 60       	ori	r16, 0x04	; 4
    1164:	fe 01       	movw	r30, r28
    1166:	e3 fc       	sbrc	r14, 3
    1168:	15 91       	lpm	r17, Z+
    116a:	e3 fe       	sbrs	r14, 3
    116c:	11 91       	ld	r17, Z+
    116e:	ef 01       	movw	r28, r30
    1170:	11 23       	and	r17, r17
    1172:	09 f4       	brne	.+2      	; 0x1176 <vfscanf+0xf4>
    1174:	8d c0       	rjmp	.+282    	; 0x1290 <vfscanf+0x20e>
    1176:	61 2f       	mov	r22, r17
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	88 e6       	ldi	r24, 0x68	; 104
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strchr_P>
    1182:	89 2b       	or	r24, r25
    1184:	09 f4       	brne	.+2      	; 0x1188 <vfscanf+0x106>
    1186:	84 c0       	rjmp	.+264    	; 0x1290 <vfscanf+0x20e>
    1188:	00 fd       	sbrc	r16, 0
    118a:	07 c0       	rjmp	.+14     	; 0x119a <vfscanf+0x118>
    118c:	f5 01       	movw	r30, r10
    118e:	80 80       	ld	r8, Z
    1190:	91 80       	ldd	r9, Z+1	; 0x01
    1192:	c5 01       	movw	r24, r10
    1194:	02 96       	adiw	r24, 0x02	; 2
    1196:	5c 01       	movw	r10, r24
    1198:	02 c0       	rjmp	.+4      	; 0x119e <vfscanf+0x11c>
    119a:	81 2c       	mov	r8, r1
    119c:	91 2c       	mov	r9, r1
    119e:	1e 36       	cpi	r17, 0x6E	; 110
    11a0:	51 f4       	brne	.+20     	; 0x11b6 <vfscanf+0x134>
    11a2:	f6 01       	movw	r30, r12
    11a4:	46 81       	ldd	r20, Z+6	; 0x06
    11a6:	57 81       	ldd	r21, Z+7	; 0x07
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	20 2f       	mov	r18, r16
    11ae:	c4 01       	movw	r24, r8
    11b0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <putval>
    11b4:	73 cf       	rjmp	.-282    	; 0x109c <vfscanf+0x1a>
    11b6:	13 36       	cpi	r17, 0x63	; 99
    11b8:	a9 f4       	brne	.+42     	; 0x11e4 <vfscanf+0x162>
    11ba:	01 fd       	sbrc	r16, 1
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfscanf+0x140>
    11be:	ff 24       	eor	r15, r15
    11c0:	f3 94       	inc	r15
    11c2:	c6 01       	movw	r24, r12
    11c4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
    11c8:	97 fd       	sbrc	r25, 7
    11ca:	60 c0       	rjmp	.+192    	; 0x128c <vfscanf+0x20a>
    11cc:	81 14       	cp	r8, r1
    11ce:	91 04       	cpc	r9, r1
    11d0:	29 f0       	breq	.+10     	; 0x11dc <vfscanf+0x15a>
    11d2:	f4 01       	movw	r30, r8
    11d4:	80 83       	st	Z, r24
    11d6:	c4 01       	movw	r24, r8
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	4c 01       	movw	r8, r24
    11dc:	fa 94       	dec	r15
    11de:	f1 10       	cpse	r15, r1
    11e0:	f0 cf       	rjmp	.-32     	; 0x11c2 <vfscanf+0x140>
    11e2:	50 c0       	rjmp	.+160    	; 0x1284 <vfscanf+0x202>
    11e4:	1b 35       	cpi	r17, 0x5B	; 91
    11e6:	59 f4       	brne	.+22     	; 0x11fe <vfscanf+0x17c>
    11e8:	9e 01       	movw	r18, r28
    11ea:	a4 01       	movw	r20, r8
    11ec:	6f 2d       	mov	r22, r15
    11ee:	c6 01       	movw	r24, r12
    11f0:	0e 94 83 07 	call	0xf06	; 0xf06 <conv_brk>
    11f4:	ec 01       	movw	r28, r24
    11f6:	89 2b       	or	r24, r25
    11f8:	09 f0       	breq	.+2      	; 0x11fc <vfscanf+0x17a>
    11fa:	44 c0       	rjmp	.+136    	; 0x1284 <vfscanf+0x202>
    11fc:	3e c0       	rjmp	.+124    	; 0x127a <vfscanf+0x1f8>
    11fe:	c6 01       	movw	r24, r12
    1200:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <skip_spaces>
    1204:	97 fd       	sbrc	r25, 7
    1206:	42 c0       	rjmp	.+132    	; 0x128c <vfscanf+0x20a>
    1208:	1f 36       	cpi	r17, 0x6F	; 111
    120a:	61 f1       	breq	.+88     	; 0x1264 <vfscanf+0x1e2>
    120c:	28 f4       	brcc	.+10     	; 0x1218 <vfscanf+0x196>
    120e:	14 36       	cpi	r17, 0x64	; 100
    1210:	39 f1       	breq	.+78     	; 0x1260 <vfscanf+0x1de>
    1212:	19 36       	cpi	r17, 0x69	; 105
    1214:	51 f1       	breq	.+84     	; 0x126a <vfscanf+0x1e8>
    1216:	28 c0       	rjmp	.+80     	; 0x1268 <vfscanf+0x1e6>
    1218:	13 37       	cpi	r17, 0x73	; 115
    121a:	71 f0       	breq	.+28     	; 0x1238 <vfscanf+0x1b6>
    121c:	15 37       	cpi	r17, 0x75	; 117
    121e:	01 f1       	breq	.+64     	; 0x1260 <vfscanf+0x1de>
    1220:	23 c0       	rjmp	.+70     	; 0x1268 <vfscanf+0x1e6>
    1222:	81 14       	cp	r8, r1
    1224:	91 04       	cpc	r9, r1
    1226:	29 f0       	breq	.+10     	; 0x1232 <vfscanf+0x1b0>
    1228:	f4 01       	movw	r30, r8
    122a:	60 82       	st	Z, r6
    122c:	c4 01       	movw	r24, r8
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	4c 01       	movw	r8, r24
    1232:	fa 94       	dec	r15
    1234:	ff 20       	and	r15, r15
    1236:	71 f0       	breq	.+28     	; 0x1254 <vfscanf+0x1d2>
    1238:	c6 01       	movw	r24, r12
    123a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <fgetc>
    123e:	3c 01       	movw	r6, r24
    1240:	97 fd       	sbrc	r25, 7
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <vfscanf+0x1d2>
    1244:	0e 94 52 09 	call	0x12a4	; 0x12a4 <isspace>
    1248:	89 2b       	or	r24, r25
    124a:	59 f3       	breq	.-42     	; 0x1222 <vfscanf+0x1a0>
    124c:	b6 01       	movw	r22, r12
    124e:	c3 01       	movw	r24, r6
    1250:	0e 94 f6 09 	call	0x13ec	; 0x13ec <ungetc>
    1254:	81 14       	cp	r8, r1
    1256:	91 04       	cpc	r9, r1
    1258:	a9 f0       	breq	.+42     	; 0x1284 <vfscanf+0x202>
    125a:	f4 01       	movw	r30, r8
    125c:	10 82       	st	Z, r1
    125e:	12 c0       	rjmp	.+36     	; 0x1284 <vfscanf+0x202>
    1260:	00 62       	ori	r16, 0x20	; 32
    1262:	03 c0       	rjmp	.+6      	; 0x126a <vfscanf+0x1e8>
    1264:	00 61       	ori	r16, 0x10	; 16
    1266:	01 c0       	rjmp	.+2      	; 0x126a <vfscanf+0x1e8>
    1268:	00 64       	ori	r16, 0x40	; 64
    126a:	20 2f       	mov	r18, r16
    126c:	a4 01       	movw	r20, r8
    126e:	6f 2d       	mov	r22, r15
    1270:	c6 01       	movw	r24, r12
    1272:	0e 94 f1 06 	call	0xde2	; 0xde2 <conv_int>
    1276:	81 11       	cpse	r24, r1
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <vfscanf+0x202>
    127a:	f6 01       	movw	r30, r12
    127c:	83 81       	ldd	r24, Z+3	; 0x03
    127e:	80 73       	andi	r24, 0x30	; 48
    1280:	29 f4       	brne	.+10     	; 0x128c <vfscanf+0x20a>
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <vfscanf+0x20e>
    1284:	00 fd       	sbrc	r16, 0
    1286:	0a cf       	rjmp	.-492    	; 0x109c <vfscanf+0x1a>
    1288:	53 94       	inc	r5
    128a:	08 cf       	rjmp	.-496    	; 0x109c <vfscanf+0x1a>
    128c:	55 20       	and	r5, r5
    128e:	19 f0       	breq	.+6      	; 0x1296 <vfscanf+0x214>
    1290:	85 2d       	mov	r24, r5
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <vfscanf+0x218>
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	9f ef       	ldi	r25, 0xFF	; 255
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	ef e0       	ldi	r30, 0x0F	; 15
    12a0:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__epilogue_restores__+0x6>

000012a4 <isspace>:
    12a4:	91 11       	cpse	r25, r1
    12a6:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__ctype_isfalse>
    12aa:	80 32       	cpi	r24, 0x20	; 32
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <isspace+0x10>
    12ae:	89 50       	subi	r24, 0x09	; 9
    12b0:	85 50       	subi	r24, 0x05	; 5
    12b2:	c8 f7       	brcc	.-14     	; 0x12a6 <isspace+0x2>
    12b4:	08 95       	ret

000012b6 <strchr_P>:
    12b6:	fc 01       	movw	r30, r24
    12b8:	05 90       	lpm	r0, Z+
    12ba:	06 16       	cp	r0, r22
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <strchr_P+0x10>
    12be:	00 20       	and	r0, r0
    12c0:	d9 f7       	brne	.-10     	; 0x12b8 <strchr_P+0x2>
    12c2:	c0 01       	movw	r24, r0
    12c4:	08 95       	ret
    12c6:	31 97       	sbiw	r30, 0x01	; 1
    12c8:	cf 01       	movw	r24, r30
    12ca:	08 95       	ret

000012cc <strnlen_P>:
    12cc:	fc 01       	movw	r30, r24
    12ce:	05 90       	lpm	r0, Z+
    12d0:	61 50       	subi	r22, 0x01	; 1
    12d2:	70 40       	sbci	r23, 0x00	; 0
    12d4:	01 10       	cpse	r0, r1
    12d6:	d8 f7       	brcc	.-10     	; 0x12ce <strnlen_P+0x2>
    12d8:	80 95       	com	r24
    12da:	90 95       	com	r25
    12dc:	8e 0f       	add	r24, r30
    12de:	9f 1f       	adc	r25, r31
    12e0:	08 95       	ret

000012e2 <strnlen>:
    12e2:	fc 01       	movw	r30, r24
    12e4:	61 50       	subi	r22, 0x01	; 1
    12e6:	70 40       	sbci	r23, 0x00	; 0
    12e8:	01 90       	ld	r0, Z+
    12ea:	01 10       	cpse	r0, r1
    12ec:	d8 f7       	brcc	.-10     	; 0x12e4 <strnlen+0x2>
    12ee:	80 95       	com	r24
    12f0:	90 95       	com	r25
    12f2:	8e 0f       	add	r24, r30
    12f4:	9f 1f       	adc	r25, r31
    12f6:	08 95       	ret

000012f8 <fgetc>:
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	20 ff       	sbrs	r18, 0
    1302:	33 c0       	rjmp	.+102    	; 0x136a <fgetc+0x72>
    1304:	26 ff       	sbrs	r18, 6
    1306:	0a c0       	rjmp	.+20     	; 0x131c <fgetc+0x24>
    1308:	2f 7b       	andi	r18, 0xBF	; 191
    130a:	2b 83       	std	Y+3, r18	; 0x03
    130c:	8e 81       	ldd	r24, Y+6	; 0x06
    130e:	9f 81       	ldd	r25, Y+7	; 0x07
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	9f 83       	std	Y+7, r25	; 0x07
    1314:	8e 83       	std	Y+6, r24	; 0x06
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	29 c0       	rjmp	.+82     	; 0x136e <fgetc+0x76>
    131c:	22 ff       	sbrs	r18, 2
    131e:	0f c0       	rjmp	.+30     	; 0x133e <fgetc+0x46>
    1320:	e8 81       	ld	r30, Y
    1322:	f9 81       	ldd	r31, Y+1	; 0x01
    1324:	80 81       	ld	r24, Z
    1326:	08 2e       	mov	r0, r24
    1328:	00 0c       	add	r0, r0
    132a:	99 0b       	sbc	r25, r25
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	19 f4       	brne	.+6      	; 0x1336 <fgetc+0x3e>
    1330:	20 62       	ori	r18, 0x20	; 32
    1332:	2b 83       	std	Y+3, r18	; 0x03
    1334:	1a c0       	rjmp	.+52     	; 0x136a <fgetc+0x72>
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	f9 83       	std	Y+1, r31	; 0x01
    133a:	e8 83       	st	Y, r30
    133c:	0e c0       	rjmp	.+28     	; 0x135a <fgetc+0x62>
    133e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1340:	fb 85       	ldd	r31, Y+11	; 0x0b
    1342:	09 95       	icall
    1344:	97 ff       	sbrs	r25, 7
    1346:	09 c0       	rjmp	.+18     	; 0x135a <fgetc+0x62>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	11 f0       	breq	.+4      	; 0x1352 <fgetc+0x5a>
    134e:	80 e2       	ldi	r24, 0x20	; 32
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <fgetc+0x5c>
    1352:	80 e1       	ldi	r24, 0x10	; 16
    1354:	82 2b       	or	r24, r18
    1356:	8b 83       	std	Y+3, r24	; 0x03
    1358:	08 c0       	rjmp	.+16     	; 0x136a <fgetc+0x72>
    135a:	2e 81       	ldd	r18, Y+6	; 0x06
    135c:	3f 81       	ldd	r19, Y+7	; 0x07
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	3f 83       	std	Y+7, r19	; 0x07
    1364:	2e 83       	std	Y+6, r18	; 0x06
    1366:	99 27       	eor	r25, r25
    1368:	02 c0       	rjmp	.+4      	; 0x136e <fgetc+0x76>
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <fputc>:
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	fb 01       	movw	r30, r22
    137e:	23 81       	ldd	r18, Z+3	; 0x03
    1380:	21 fd       	sbrc	r18, 1
    1382:	03 c0       	rjmp	.+6      	; 0x138a <fputc+0x16>
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	9f ef       	ldi	r25, 0xFF	; 255
    1388:	2c c0       	rjmp	.+88     	; 0x13e2 <fputc+0x6e>
    138a:	22 ff       	sbrs	r18, 2
    138c:	16 c0       	rjmp	.+44     	; 0x13ba <fputc+0x46>
    138e:	46 81       	ldd	r20, Z+6	; 0x06
    1390:	57 81       	ldd	r21, Z+7	; 0x07
    1392:	24 81       	ldd	r18, Z+4	; 0x04
    1394:	35 81       	ldd	r19, Z+5	; 0x05
    1396:	42 17       	cp	r20, r18
    1398:	53 07       	cpc	r21, r19
    139a:	44 f4       	brge	.+16     	; 0x13ac <fputc+0x38>
    139c:	a0 81       	ld	r26, Z
    139e:	b1 81       	ldd	r27, Z+1	; 0x01
    13a0:	9d 01       	movw	r18, r26
    13a2:	2f 5f       	subi	r18, 0xFF	; 255
    13a4:	3f 4f       	sbci	r19, 0xFF	; 255
    13a6:	31 83       	std	Z+1, r19	; 0x01
    13a8:	20 83       	st	Z, r18
    13aa:	8c 93       	st	X, r24
    13ac:	26 81       	ldd	r18, Z+6	; 0x06
    13ae:	37 81       	ldd	r19, Z+7	; 0x07
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	37 83       	std	Z+7, r19	; 0x07
    13b6:	26 83       	std	Z+6, r18	; 0x06
    13b8:	14 c0       	rjmp	.+40     	; 0x13e2 <fputc+0x6e>
    13ba:	8b 01       	movw	r16, r22
    13bc:	ec 01       	movw	r28, r24
    13be:	fb 01       	movw	r30, r22
    13c0:	00 84       	ldd	r0, Z+8	; 0x08
    13c2:	f1 85       	ldd	r31, Z+9	; 0x09
    13c4:	e0 2d       	mov	r30, r0
    13c6:	09 95       	icall
    13c8:	89 2b       	or	r24, r25
    13ca:	e1 f6       	brne	.-72     	; 0x1384 <fputc+0x10>
    13cc:	d8 01       	movw	r26, r16
    13ce:	16 96       	adiw	r26, 0x06	; 6
    13d0:	8d 91       	ld	r24, X+
    13d2:	9c 91       	ld	r25, X
    13d4:	17 97       	sbiw	r26, 0x07	; 7
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	17 96       	adiw	r26, 0x07	; 7
    13da:	9c 93       	st	X, r25
    13dc:	8e 93       	st	-X, r24
    13de:	16 97       	sbiw	r26, 0x06	; 6
    13e0:	ce 01       	movw	r24, r28
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	08 95       	ret

000013ec <ungetc>:
    13ec:	fb 01       	movw	r30, r22
    13ee:	23 81       	ldd	r18, Z+3	; 0x03
    13f0:	20 ff       	sbrs	r18, 0
    13f2:	12 c0       	rjmp	.+36     	; 0x1418 <ungetc+0x2c>
    13f4:	26 fd       	sbrc	r18, 6
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <ungetc+0x2c>
    13f8:	8f 3f       	cpi	r24, 0xFF	; 255
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	93 07       	cpc	r25, r19
    13fe:	61 f0       	breq	.+24     	; 0x1418 <ungetc+0x2c>
    1400:	82 83       	std	Z+2, r24	; 0x02
    1402:	2f 7d       	andi	r18, 0xDF	; 223
    1404:	20 64       	ori	r18, 0x40	; 64
    1406:	23 83       	std	Z+3, r18	; 0x03
    1408:	26 81       	ldd	r18, Z+6	; 0x06
    140a:	37 81       	ldd	r19, Z+7	; 0x07
    140c:	21 50       	subi	r18, 0x01	; 1
    140e:	31 09       	sbc	r19, r1
    1410:	37 83       	std	Z+7, r19	; 0x07
    1412:	26 83       	std	Z+6, r18	; 0x06
    1414:	99 27       	eor	r25, r25
    1416:	08 95       	ret
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	08 95       	ret

0000141e <__ultoa_invert>:
    141e:	fa 01       	movw	r30, r20
    1420:	aa 27       	eor	r26, r26
    1422:	28 30       	cpi	r18, 0x08	; 8
    1424:	51 f1       	breq	.+84     	; 0x147a <__ultoa_invert+0x5c>
    1426:	20 31       	cpi	r18, 0x10	; 16
    1428:	81 f1       	breq	.+96     	; 0x148a <__ultoa_invert+0x6c>
    142a:	e8 94       	clt
    142c:	6f 93       	push	r22
    142e:	6e 7f       	andi	r22, 0xFE	; 254
    1430:	6e 5f       	subi	r22, 0xFE	; 254
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	af 4f       	sbci	r26, 0xFF	; 255
    143a:	b1 e0       	ldi	r27, 0x01	; 1
    143c:	3e d0       	rcall	.+124    	; 0x14ba <__ultoa_invert+0x9c>
    143e:	b4 e0       	ldi	r27, 0x04	; 4
    1440:	3c d0       	rcall	.+120    	; 0x14ba <__ultoa_invert+0x9c>
    1442:	67 0f       	add	r22, r23
    1444:	78 1f       	adc	r23, r24
    1446:	89 1f       	adc	r24, r25
    1448:	9a 1f       	adc	r25, r26
    144a:	a1 1d       	adc	r26, r1
    144c:	68 0f       	add	r22, r24
    144e:	79 1f       	adc	r23, r25
    1450:	8a 1f       	adc	r24, r26
    1452:	91 1d       	adc	r25, r1
    1454:	a1 1d       	adc	r26, r1
    1456:	6a 0f       	add	r22, r26
    1458:	71 1d       	adc	r23, r1
    145a:	81 1d       	adc	r24, r1
    145c:	91 1d       	adc	r25, r1
    145e:	a1 1d       	adc	r26, r1
    1460:	20 d0       	rcall	.+64     	; 0x14a2 <__ultoa_invert+0x84>
    1462:	09 f4       	brne	.+2      	; 0x1466 <__ultoa_invert+0x48>
    1464:	68 94       	set
    1466:	3f 91       	pop	r19
    1468:	2a e0       	ldi	r18, 0x0A	; 10
    146a:	26 9f       	mul	r18, r22
    146c:	11 24       	eor	r1, r1
    146e:	30 19       	sub	r19, r0
    1470:	30 5d       	subi	r19, 0xD0	; 208
    1472:	31 93       	st	Z+, r19
    1474:	de f6       	brtc	.-74     	; 0x142c <__ultoa_invert+0xe>
    1476:	cf 01       	movw	r24, r30
    1478:	08 95       	ret
    147a:	46 2f       	mov	r20, r22
    147c:	47 70       	andi	r20, 0x07	; 7
    147e:	40 5d       	subi	r20, 0xD0	; 208
    1480:	41 93       	st	Z+, r20
    1482:	b3 e0       	ldi	r27, 0x03	; 3
    1484:	0f d0       	rcall	.+30     	; 0x14a4 <__ultoa_invert+0x86>
    1486:	c9 f7       	brne	.-14     	; 0x147a <__ultoa_invert+0x5c>
    1488:	f6 cf       	rjmp	.-20     	; 0x1476 <__ultoa_invert+0x58>
    148a:	46 2f       	mov	r20, r22
    148c:	4f 70       	andi	r20, 0x0F	; 15
    148e:	40 5d       	subi	r20, 0xD0	; 208
    1490:	4a 33       	cpi	r20, 0x3A	; 58
    1492:	18 f0       	brcs	.+6      	; 0x149a <__ultoa_invert+0x7c>
    1494:	49 5d       	subi	r20, 0xD9	; 217
    1496:	31 fd       	sbrc	r19, 1
    1498:	40 52       	subi	r20, 0x20	; 32
    149a:	41 93       	st	Z+, r20
    149c:	02 d0       	rcall	.+4      	; 0x14a2 <__ultoa_invert+0x84>
    149e:	a9 f7       	brne	.-22     	; 0x148a <__ultoa_invert+0x6c>
    14a0:	ea cf       	rjmp	.-44     	; 0x1476 <__ultoa_invert+0x58>
    14a2:	b4 e0       	ldi	r27, 0x04	; 4
    14a4:	a6 95       	lsr	r26
    14a6:	97 95       	ror	r25
    14a8:	87 95       	ror	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	ba 95       	dec	r27
    14b0:	c9 f7       	brne	.-14     	; 0x14a4 <__ultoa_invert+0x86>
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	61 05       	cpc	r22, r1
    14b6:	71 05       	cpc	r23, r1
    14b8:	08 95       	ret
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	0a 2e       	mov	r0, r26
    14c0:	06 94       	lsr	r0
    14c2:	57 95       	ror	r21
    14c4:	47 95       	ror	r20
    14c6:	37 95       	ror	r19
    14c8:	27 95       	ror	r18
    14ca:	ba 95       	dec	r27
    14cc:	c9 f7       	brne	.-14     	; 0x14c0 <__ultoa_invert+0xa2>
    14ce:	62 0f       	add	r22, r18
    14d0:	73 1f       	adc	r23, r19
    14d2:	84 1f       	adc	r24, r20
    14d4:	95 1f       	adc	r25, r21
    14d6:	a0 1d       	adc	r26, r0
    14d8:	08 95       	ret

000014da <__ctype_isfalse>:
    14da:	99 27       	eor	r25, r25
    14dc:	88 27       	eor	r24, r24

000014de <__ctype_istrue>:
    14de:	08 95       	ret

000014e0 <__prologue_saves__>:
    14e0:	2f 92       	push	r2
    14e2:	3f 92       	push	r3
    14e4:	4f 92       	push	r4
    14e6:	5f 92       	push	r5
    14e8:	6f 92       	push	r6
    14ea:	7f 92       	push	r7
    14ec:	8f 92       	push	r8
    14ee:	9f 92       	push	r9
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	ca 1b       	sub	r28, r26
    150a:	db 0b       	sbc	r29, r27
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	09 94       	ijmp

00001518 <__epilogue_restores__>:
    1518:	2a 88       	ldd	r2, Y+18	; 0x12
    151a:	39 88       	ldd	r3, Y+17	; 0x11
    151c:	48 88       	ldd	r4, Y+16	; 0x10
    151e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1520:	6e 84       	ldd	r6, Y+14	; 0x0e
    1522:	7d 84       	ldd	r7, Y+13	; 0x0d
    1524:	8c 84       	ldd	r8, Y+12	; 0x0c
    1526:	9b 84       	ldd	r9, Y+11	; 0x0b
    1528:	aa 84       	ldd	r10, Y+10	; 0x0a
    152a:	b9 84       	ldd	r11, Y+9	; 0x09
    152c:	c8 84       	ldd	r12, Y+8	; 0x08
    152e:	df 80       	ldd	r13, Y+7	; 0x07
    1530:	ee 80       	ldd	r14, Y+6	; 0x06
    1532:	fd 80       	ldd	r15, Y+5	; 0x05
    1534:	0c 81       	ldd	r16, Y+4	; 0x04
    1536:	1b 81       	ldd	r17, Y+3	; 0x03
    1538:	aa 81       	ldd	r26, Y+2	; 0x02
    153a:	b9 81       	ldd	r27, Y+1	; 0x01
    153c:	ce 0f       	add	r28, r30
    153e:	d1 1d       	adc	r29, r1
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	ed 01       	movw	r28, r26
    154c:	08 95       	ret

0000154e <_exit>:
    154e:	f8 94       	cli

00001550 <__stop_program>:
    1550:	ff cf       	rjmp	.-2      	; 0x1550 <__stop_program>
