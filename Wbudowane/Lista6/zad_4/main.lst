
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001e4  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010a  0080010a  00000282  2**0
                  ALLOC
  3 .stab         00000888  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f0c  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 00 	call	0x104	; 0x104 <main>
  9e:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e4:	08 95       	ret

000000e6 <spi_init>:

// inicjalizacja SPI
void spi_init()
{
    // ustaw piny MOSI, SCK i ~SS jako wyjścia
    DDRB |= _BV(DDB3) | _BV(DDB5) | _BV(DDB2);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	8c 62       	ori	r24, 0x2C	; 44
  ea:	84 b9       	out	0x04, r24	; 4
    // włącz SPI w trybie master z zegarem 250 kHz
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR1);
  ec:	82 e5       	ldi	r24, 0x52	; 82
  ee:	8c bd       	out	0x2c, r24	; 44
  f0:	08 95       	ret

000000f2 <spi_transfer>:

// transfer jednego bajtu
uint8_t spi_transfer(uint8_t data)
{
    // rozpocznij transmisję
    SPDR = data;
  f2:	8e bd       	out	0x2e, r24	; 46
    // czekaj na ukończenie transmisji
    while (!(SPSR & _BV(SPIF)));
  f4:	0d b4       	in	r0, 0x2d	; 45
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <spi_transfer+0x2>
    // wyczyść flagę przerwania
    SPSR |= _BV(SPIF);
  fa:	8d b5       	in	r24, 0x2d	; 45
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	8d bd       	out	0x2d, r24	; 45
    // zwróć otrzymane dane
    return SPDR;
 100:	8e b5       	in	r24, 0x2e	; 46
}
 102:	08 95       	ret

00000104 <main>:

int main()
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	2a 97       	sbiw	r28, 0x0a	; 10
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
    DDRB |= _BV(PORTB);
 118:	35 b1       	in	r19, 0x05	; 5
 11a:	24 b1       	in	r18, 0x04	; 4
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 c0       	rjmp	.+2      	; 0x124 <main+0x20>
 122:	88 0f       	add	r24, r24
 124:	3a 95       	dec	r19
 126:	ea f7       	brpl	.-6      	; 0x122 <main+0x1e>
 128:	82 2b       	or	r24, r18
 12a:	84 b9       	out	0x04, r24	; 4

    int8_t numbers[10] = {up & right_down & right_up & down & left_down & left_up & dot,
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	de 01       	movw	r26, r28
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	8a 95       	dec	r24
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x32>

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 13e:	87 e6       	ldi	r24, 0x67	; 103
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 146:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 14a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
                          up & right_down & right_up & down & left_down & left_up &middle & dot,
                          up & right_down & right_up & down & left_up &middle & dot};
  // zainicjalizuj UART
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	23 e5       	ldi	r18, 0x53	; 83
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__data_end+0x9>
 166:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__data_end+0x8>
 16a:	2c e5       	ldi	r18, 0x5C	; 92
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__data_end+0xb>
 172:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end+0xa>
 176:	23 e0       	ldi	r18, 0x03	; 3
 178:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <__data_end+0x3>
 17c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0xd>
 180:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
 184:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__iob+0x5>
 188:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__iob+0x4>
 18c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__iob+0x3>
 190:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__iob+0x2>
 194:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__iob+0x1>
 198:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__iob>

// inicjalizacja SPI
void spi_init()
{
    // ustaw piny MOSI, SCK i ~SS jako wyjścia
    DDRB |= _BV(DDB3) | _BV(DDB5) | _BV(DDB2);
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	8c 62       	ori	r24, 0x2C	; 44
 1a0:	84 b9       	out	0x04, r24	; 4
    // włącz SPI w trybie master z zegarem 250 kHz
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR1);
 1a2:	82 e5       	ldi	r24, 0x52	; 82
 1a4:	8c bd       	out	0x2c, r24	; 44
 1a6:	9e 01       	movw	r18, r28
 1a8:	25 5f       	subi	r18, 0xF5	; 245
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
 1ac:	fe 01       	movw	r30, r28
 1ae:	31 96       	adiw	r30, 0x01	; 1
  // zainicjalizuj SPI
  spi_init();

  while(1) {
    for(int i = 0; i < 10; i++) { 
    	uint8_t w = spi_transfer(~numbers[i]);
 1b0:	81 91       	ld	r24, Z+
 1b2:	80 95       	com	r24

// transfer jednego bajtu
uint8_t spi_transfer(uint8_t data)
{
    // rozpocznij transmisję
    SPDR = data;
 1b4:	8e bd       	out	0x2e, r24	; 46
    // czekaj na ukończenie transmisji
    while (!(SPSR & _BV(SPIF)));
 1b6:	0d b4       	in	r0, 0x2d	; 45
 1b8:	07 fe       	sbrs	r0, 7
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <main+0xb2>
    // wyczyść flagę przerwania
    SPSR |= _BV(SPIF);
 1bc:	8d b5       	in	r24, 0x2d	; 45
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8d bd       	out	0x2d, r24	; 45
    // zwróć otrzymane dane
    return SPDR;
 1c2:	8e b5       	in	r24, 0x2e	; 46
  spi_init();

  while(1) {
    for(int i = 0; i < 10; i++) { 
    	uint8_t w = spi_transfer(~numbers[i]);
    	PORTB |= _BV(PB1);
 1c4:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	4f ef       	ldi	r20, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	41 50       	subi	r20, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0xc8>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0xd2>
 1d6:	00 00       	nop
  stdin = stdout = stderr = &uart_file;
  // zainicjalizuj SPI
  spi_init();

  while(1) {
    for(int i = 0; i < 10; i++) { 
 1d8:	2e 17       	cp	r18, r30
 1da:	3f 07       	cpc	r19, r31
 1dc:	49 f7       	brne	.-46     	; 0x1b0 <main+0xac>
 1de:	e6 cf       	rjmp	.-52     	; 0x1ac <main+0xa8>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
