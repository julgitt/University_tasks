
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800100  00800100  0000026c  2**0
                  ALLOC
  3 .stab         00000684  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cd3  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000021aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 36       	cpi	r26, 0x66	; 102
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  88:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <io_init>:
#define BTN_PORT PORTB

void io_init()
{
  // ustaw pull-up na PD2(INT0)
  BTN_PORT |= _BV(BTN);
  90:	2c 9a       	sbi	0x05, 4	; 5
  // ustaw wyjście na PB5
  LED_DDR |= _BV(LED);
  92:	25 9a       	sbi	0x04, 5	; 4
  94:	08 95       	ret

00000096 <timer_init>:
}

void timer_init(){
    TCCR1A |= _BV(WGM11);
  96:	e0 e8       	ldi	r30, 0x80	; 128
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
    TCCR1B |= _BV(WGM12) | _BV(WGM13) |_BV(CS12) | _BV(CS10);
  a0:	e1 e8       	ldi	r30, 0x81	; 129
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8d 61       	ori	r24, 0x1D	; 29
  a8:	80 83       	st	Z, r24
    TIMSK1 |= _BV(OCIE1A);
  aa:	ef e6       	ldi	r30, 0x6F	; 111
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
   
    ICR1 = /*1562*/ 155;
  b4:	8b e9       	ldi	r24, 0x9B	; 155
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  c0:	08 95       	ret

000000c2 <__vector_11>:

static unsigned char buff[100];

static int i;

ISR(TIMER1_COMPA_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
  if (buff[i])
  e0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e8:	ee 5f       	subi	r30, 0xFE	; 254
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	80 81       	ld	r24, Z
  ee:	81 11       	cpse	r24, r1
  f0:	23 c0       	rjmp	.+70     	; 0x138 <__vector_11+0x76>
    LED_PORT &= ~_BV(LED);
  else
    LED_PORT |= _BV(LED);
  f2:	2d 9a       	sbi	0x05, 5	; 5
  buff[i] = BTN_PIN & _BV(BTN);
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	23 b1       	in	r18, 0x03	; 3
  fe:	fc 01       	movw	r30, r24
 100:	ee 5f       	subi	r30, 0xFE	; 254
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	20 71       	andi	r18, 0x10	; 16
 106:	20 83       	st	Z, r18
  i = (i + 1) % 100;
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	64 e6       	ldi	r22, 0x64	; 100
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	0e 94 c2 00 	call	0x184	; 0x184 <__divmodhi4>
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

static int i;

ISR(TIMER1_COMPA_vect) {
  if (buff[i])
    LED_PORT &= ~_BV(LED);
 138:	2d 98       	cbi	0x05, 5	; 5
 13a:	dc cf       	rjmp	.-72     	; 0xf4 <__vector_11+0x32>

0000013c <main>:
#define BTN_PORT PORTB

void io_init()
{
  // ustaw pull-up na PD2(INT0)
  BTN_PORT |= _BV(BTN);
 13c:	2c 9a       	sbi	0x05, 4	; 5
  // ustaw wyjście na PB5
  LED_DDR |= _BV(LED);
 13e:	25 9a       	sbi	0x04, 5	; 4
}

void timer_init(){
    TCCR1A |= _BV(WGM11);
 140:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B |= _BV(WGM12) | _BV(WGM13) |_BV(CS12) | _BV(CS10);
 14a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 14e:	8d 61       	ori	r24, 0x1D	; 29
 150:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TIMSK1 |= _BV(OCIE1A);
 154:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
   
    ICR1 = /*1562*/ 155;
 15e:	8b e9       	ldi	r24, 0x9B	; 155
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 166:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  // zainicjalizuj wejścia/wyjścia
  io_init();

  timer_init();
  // ustaw tryb uśpienia na tryb bezczynności
  set_sleep_mode(SLEEP_MODE_IDLE);
 16a:	83 b7       	in	r24, 0x33	; 51
 16c:	81 7f       	andi	r24, 0xF1	; 241
 16e:	83 bf       	out	0x33, r24	; 51
  LED_PORT &= ~_BV(LED);
 170:	2d 98       	cbi	0x05, 5	; 5
  // odmaskuj przerwania
  sei();
 172:	78 94       	sei

  
  while (1)
  {
    sleep_mode();
 174:	83 b7       	in	r24, 0x33	; 51
 176:	81 60       	ori	r24, 0x01	; 1
 178:	83 bf       	out	0x33, r24	; 51
 17a:	88 95       	sleep
 17c:	83 b7       	in	r24, 0x33	; 51
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	83 bf       	out	0x33, r24	; 51
 182:	f8 cf       	rjmp	.-16     	; 0x174 <main+0x38>

00000184 <__divmodhi4>:
 184:	97 fb       	bst	r25, 7
 186:	07 2e       	mov	r0, r23
 188:	16 f4       	brtc	.+4      	; 0x18e <__divmodhi4+0xa>
 18a:	00 94       	com	r0
 18c:	07 d0       	rcall	.+14     	; 0x19c <__divmodhi4_neg1>
 18e:	77 fd       	sbrc	r23, 7
 190:	09 d0       	rcall	.+18     	; 0x1a4 <__divmodhi4_neg2>
 192:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__udivmodhi4>
 196:	07 fc       	sbrc	r0, 7
 198:	05 d0       	rcall	.+10     	; 0x1a4 <__divmodhi4_neg2>
 19a:	3e f4       	brtc	.+14     	; 0x1aa <__divmodhi4_exit>

0000019c <__divmodhi4_neg1>:
 19c:	90 95       	com	r25
 19e:	81 95       	neg	r24
 1a0:	9f 4f       	sbci	r25, 0xFF	; 255
 1a2:	08 95       	ret

000001a4 <__divmodhi4_neg2>:
 1a4:	70 95       	com	r23
 1a6:	61 95       	neg	r22
 1a8:	7f 4f       	sbci	r23, 0xFF	; 255

000001aa <__divmodhi4_exit>:
 1aa:	08 95       	ret

000001ac <__udivmodhi4>:
 1ac:	aa 1b       	sub	r26, r26
 1ae:	bb 1b       	sub	r27, r27
 1b0:	51 e1       	ldi	r21, 0x11	; 17
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <__udivmodhi4_ep>

000001b4 <__udivmodhi4_loop>:
 1b4:	aa 1f       	adc	r26, r26
 1b6:	bb 1f       	adc	r27, r27
 1b8:	a6 17       	cp	r26, r22
 1ba:	b7 07       	cpc	r27, r23
 1bc:	10 f0       	brcs	.+4      	; 0x1c2 <__udivmodhi4_ep>
 1be:	a6 1b       	sub	r26, r22
 1c0:	b7 0b       	sbc	r27, r23

000001c2 <__udivmodhi4_ep>:
 1c2:	88 1f       	adc	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	5a 95       	dec	r21
 1c8:	a9 f7       	brne	.-22     	; 0x1b4 <__udivmodhi4_loop>
 1ca:	80 95       	com	r24
 1cc:	90 95       	com	r25
 1ce:	bc 01       	movw	r22, r24
 1d0:	cd 01       	movw	r24, r26
 1d2:	08 95       	ret

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
