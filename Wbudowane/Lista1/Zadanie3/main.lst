
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000600  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e61  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000015f1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000021da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define DDR DDRD
#define PORT PORTD


int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ae:	87 7e       	andi	r24, 0xE7	; 231
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    DDR |= 0b11111111;
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
    PORT |= 0b11111111;
  ba:	9b b1       	in	r25, 0x0b	; 11
  bc:	8b b9       	out	0x0b, r24	; 11
    // 16, 3, 2 18 17 -> 5
    // 16, 3, 2 18 17 1 -> 6
    // 15,3 1 -> 7 
    // 1-18 -> 8
    // 2-18 -> 9
    uint8_t numbers[10] = {0b00100000, 0b01110011, 0b00010100, 0b00010001, 
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	de 01       	movw	r26, r28
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	01 90       	ld	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	8a 95       	dec	r24
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x32>
  d0:	9e 01       	movw	r18, r28
  d2:	25 5f       	subi	r18, 0xF5	; 245
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
    while(1) {
        for (int i = 0; i < 10; i++) {
            PORT = numbers[i];
            _delay_ms(1000);
        }  
        PORT = 0b11111111;
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	fe 01       	movw	r30, r28
  da:	31 96       	adiw	r30, 0x01	; 1
    uint8_t numbers[10] = {0b00100000, 0b01110011, 0b00010100, 0b00010001, 
    			   0b01000011, 0b10000001, 0b10000000,
                           0b00100011, 0b00000000, 0b00000001};
    while(1) {
        for (int i = 0; i < 10; i++) {
            PORT = numbers[i];
  dc:	81 91       	ld	r24, Z+
  de:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	4f ef       	ldi	r20, 0xFF	; 255
  e2:	53 ed       	ldi	r21, 0xD3	; 211
  e4:	80 e3       	ldi	r24, 0x30	; 48
  e6:	41 50       	subi	r20, 0x01	; 1
  e8:	50 40       	sbci	r21, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x50>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5a>
  f0:	00 00       	nop
    // 2-18 -> 9
    uint8_t numbers[10] = {0b00100000, 0b01110011, 0b00010100, 0b00010001, 
    			   0b01000011, 0b10000001, 0b10000000,
                           0b00100011, 0b00000000, 0b00000001};
    while(1) {
        for (int i = 0; i < 10; i++) {
  f2:	e2 17       	cp	r30, r18
  f4:	f3 07       	cpc	r31, r19
  f6:	91 f7       	brne	.-28     	; 0xdc <main+0x46>
            PORT = numbers[i];
            _delay_ms(1000);
        }  
        PORT = 0b11111111;
  f8:	9b b9       	out	0x0b, r25	; 11
  fa:	4f ef       	ldi	r20, 0xFF	; 255
  fc:	5d e3       	ldi	r21, 0x3D	; 61
  fe:	89 e4       	ldi	r24, 0x49	; 73
 100:	41 50       	subi	r20, 0x01	; 1
 102:	50 40       	sbci	r21, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x6a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x74>
 10a:	00 00       	nop
 10c:	e5 cf       	rjmp	.-54     	; 0xd8 <main+0x42>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
