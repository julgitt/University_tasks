
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800122  00800122  00000322  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eb4  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002632  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9e:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
    // czekaj aż transmiter gotowy
    while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
    UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
    // czekaj aż znak dostępny
    while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
    return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:

// inicjalizacja UART
void uart_init()
{
    // ustaw baudrate
    UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    // wyczyść rejestr UCSR0A
    UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    // włącz odbiornik i nadajnik
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    // ustaw format 8n1
    UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e4:	08 95       	ret

000000e6 <main>:

// inicjalizacja UART
void uart_init()
{
    // ustaw baudrate
    UBRR0 = UBRR_VALUE;
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    // wyczyść rejestr UCSR0A
    UCSR0A = 0;
  f2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    // włącz odbiornik i nadajnik
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    // ustaw format 8n1
    UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
int main()
{
    // zainicjalizuj UART
    uart_init();
    // skonfiguruj strumienie wejścia/wyjścia
    fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 102:	82 e2       	ldi	r24, 0x22	; 34
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	23 e5       	ldi	r18, 0x53	; 83
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x9>
 10e:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end+0x8>
 112:	2c e5       	ldi	r18, 0x5C	; 92
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <__data_end+0xb>
 11a:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <__data_end+0xa>
 11e:	23 e0       	ldi	r18, 0x03	; 3
 120:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <__data_end+0x3>
 124:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0xd>
 128:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end+0xc>
    stdin = stdout = stderr = &uart_file;
 12c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__iob+0x5>
 130:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__iob+0x4>
 134:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__iob+0x3>
 138:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__iob+0x2>
 13c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__iob+0x1>
 140:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__iob>
    // ustaw pin PB5 na wyjście
    LED_DDR |= _BV(LED);
 144:	25 9a       	sbi	0x04, 5	; 4
    
    // konfiguracja przycisku
    BTN_PORT |= _BV(BTN);
 146:	2c 9a       	sbi	0x05, 4	; 5
   

    const char *letter = "**ETIANMSURWDKGOHVF?L?PJBXCYZQ??";
    int ptr = 1;

    int timer = 0;
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
    // konfiguracja przycisku
    BTN_PORT |= _BV(BTN);
   

    const char *letter = "**ETIANMSURWDKGOHVF?L?PJBXCYZQ??";
    int ptr = 1;
 14c:	c1 e0       	ldi	r28, 0x01	; 1
 14e:	d0 e0       	ldi	r29, 0x00	; 0

    int timer = 0;
    char c = 0;
    while(1) {
      if (!(BTN_PIN & _BV(BTN))) {
 150:	1c 99       	sbic	0x03, 4	; 3
 152:	1f c0       	rjmp	.+62     	; 0x192 <main+0xac>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	ef e3       	ldi	r30, 0x3F	; 63
 15a:	fc e9       	ldi	r31, 0x9C	; 156
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x76>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x7c>
 162:	00 00       	nop
      	timer = 0;
      	while(1) {
      	    _delay_ms(10);
            timer+=10;
 164:	0a 96       	adiw	r24, 0x0a	; 10
            if (timer >= 1000) {
 166:	88 3e       	cpi	r24, 0xE8	; 232
 168:	f3 e0       	ldi	r31, 0x03	; 3
 16a:	9f 07       	cpc	r25, r31
 16c:	f4 f5       	brge	.+124    	; 0x1ea <main+0x104>
              LED_PORT |= _BV(LED);
            }
      	    if ((BTN_PIN & _BV(BTN)) && (timer < 1000)) {
 16e:	1c 99       	sbic	0x03, 4	; 3
 170:	39 c0       	rjmp	.+114    	; 0x1e4 <main+0xfe>
      	    	ptr = 2*ptr;
      	    	break;
      	    }
      	    else if ((BTN_PIN & _BV(BTN))) {
 172:	1c 9b       	sbis	0x03, 4	; 3
 174:	f1 cf       	rjmp	.-30     	; 0x158 <main+0x72>
      	    	ptr = 2*ptr + 1;
 176:	cc 0f       	add	r28, r28
 178:	dd 1f       	adc	r29, r29
 17a:	21 96       	adiw	r28, 0x01	; 1
      //skończono czytać znak 
      else if (timer > 3000) {
      	// wypisujemy
        if (ptr > 1 ) {
        putchar(letter[ptr]);
        ptr = 1;
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	ef e3       	ldi	r30, 0x3F	; 63
 182:	fc e9       	ldi	r31, 0x9C	; 156
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x9e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xa4>
 18a:	00 00       	nop
        timer = 0;
        }
      }
      _delay_ms(10);
      timer+=10;
      LED_PORT &= ~_BV(LED);
 18c:	2d 98       	cbi	0x05, 5	; 5
    int ptr = 1;

    int timer = 0;
    char c = 0;
    while(1) {
      if (!(BTN_PIN & _BV(BTN))) {
 18e:	1c 9b       	sbis	0x03, 4	; 3
 190:	e1 cf       	rjmp	.-62     	; 0x154 <main+0x6e>
      	    }
      	}
        timer = 0;
      }
      // spacja
      if (timer > 5000) {
 192:	89 38       	cpi	r24, 0x89	; 137
 194:	23 e1       	ldi	r18, 0x13	; 19
 196:	92 07       	cpc	r25, r18
 198:	5c f0       	brlt	.+22     	; 0x1b0 <main+0xca>
      	putchar(' ');
 19a:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__iob+0x2>
 19e:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <__iob+0x3>
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	e8 cf       	rjmp	.-48     	; 0x180 <main+0x9a>
        timer = 0;
      }
      //skończono czytać znak 
      else if (timer > 3000) {
 1b0:	89 3b       	cpi	r24, 0xB9	; 185
 1b2:	eb e0       	ldi	r30, 0x0B	; 11
 1b4:	9e 07       	cpc	r25, r30
 1b6:	a4 f0       	brlt	.+40     	; 0x1e0 <main+0xfa>
      	// wypisujemy
        if (ptr > 1 ) {
 1b8:	c1 30       	cpi	r28, 0x01	; 1
 1ba:	d1 05       	cpc	r29, r1
 1bc:	89 f0       	breq	.+34     	; 0x1e0 <main+0xfa>
        putchar(letter[ptr]);
 1be:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__iob+0x2>
 1c2:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <__iob+0x3>
 1c6:	c0 50       	subi	r28, 0x00	; 0
 1c8:	df 4f       	sbci	r29, 0xFF	; 255
 1ca:	88 81       	ld	r24, Y
 1cc:	08 2e       	mov	r0, r24
 1ce:	00 0c       	add	r0, r0
 1d0:	99 0b       	sbc	r25, r25
 1d2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fputc>
 1d6:	8a e0       	ldi	r24, 0x0A	; 10
 1d8:	90 e0       	ldi	r25, 0x00	; 0
        ptr = 1;
 1da:	c1 e0       	ldi	r28, 0x01	; 1
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	d0 cf       	rjmp	.-96     	; 0x180 <main+0x9a>
        timer = 0;
      }
      //skończono czytać znak 
      else if (timer > 3000) {
      	// wypisujemy
        if (ptr > 1 ) {
 1e0:	0a 96       	adiw	r24, 0x0a	; 10
 1e2:	ce cf       	rjmp	.-100    	; 0x180 <main+0x9a>
            timer+=10;
            if (timer >= 1000) {
              LED_PORT |= _BV(LED);
            }
      	    if ((BTN_PIN & _BV(BTN)) && (timer < 1000)) {
      	    	ptr = 2*ptr;
 1e4:	cc 0f       	add	r28, r28
 1e6:	dd 1f       	adc	r29, r29
      	    	break;
 1e8:	c9 cf       	rjmp	.-110    	; 0x17c <main+0x96>
      	timer = 0;
      	while(1) {
      	    _delay_ms(10);
            timer+=10;
            if (timer >= 1000) {
              LED_PORT |= _BV(LED);
 1ea:	2d 9a       	sbi	0x05, 5	; 5
            }
      	    if ((BTN_PIN & _BV(BTN)) && (timer < 1000)) {
 1ec:	23 b1       	in	r18, 0x03	; 3
 1ee:	c1 cf       	rjmp	.-126    	; 0x172 <main+0x8c>

000001f0 <fputc>:
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	fb 01       	movw	r30, r22
 1fa:	23 81       	ldd	r18, Z+3	; 0x03
 1fc:	21 fd       	sbrc	r18, 1
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <fputc+0x16>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	2c c0       	rjmp	.+88     	; 0x25e <fputc+0x6e>
 206:	22 ff       	sbrs	r18, 2
 208:	16 c0       	rjmp	.+44     	; 0x236 <fputc+0x46>
 20a:	46 81       	ldd	r20, Z+6	; 0x06
 20c:	57 81       	ldd	r21, Z+7	; 0x07
 20e:	24 81       	ldd	r18, Z+4	; 0x04
 210:	35 81       	ldd	r19, Z+5	; 0x05
 212:	42 17       	cp	r20, r18
 214:	53 07       	cpc	r21, r19
 216:	44 f4       	brge	.+16     	; 0x228 <fputc+0x38>
 218:	a0 81       	ld	r26, Z
 21a:	b1 81       	ldd	r27, Z+1	; 0x01
 21c:	9d 01       	movw	r18, r26
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	31 83       	std	Z+1, r19	; 0x01
 224:	20 83       	st	Z, r18
 226:	8c 93       	st	X, r24
 228:	26 81       	ldd	r18, Z+6	; 0x06
 22a:	37 81       	ldd	r19, Z+7	; 0x07
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	37 83       	std	Z+7, r19	; 0x07
 232:	26 83       	std	Z+6, r18	; 0x06
 234:	14 c0       	rjmp	.+40     	; 0x25e <fputc+0x6e>
 236:	8b 01       	movw	r16, r22
 238:	ec 01       	movw	r28, r24
 23a:	fb 01       	movw	r30, r22
 23c:	00 84       	ldd	r0, Z+8	; 0x08
 23e:	f1 85       	ldd	r31, Z+9	; 0x09
 240:	e0 2d       	mov	r30, r0
 242:	09 95       	icall
 244:	89 2b       	or	r24, r25
 246:	e1 f6       	brne	.-72     	; 0x200 <fputc+0x10>
 248:	d8 01       	movw	r26, r16
 24a:	16 96       	adiw	r26, 0x06	; 6
 24c:	8d 91       	ld	r24, X+
 24e:	9c 91       	ld	r25, X
 250:	17 97       	sbiw	r26, 0x07	; 7
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	17 96       	adiw	r26, 0x07	; 7
 256:	9c 93       	st	X, r25
 258:	8e 93       	st	-X, r24
 25a:	16 97       	sbiw	r26, 0x06	; 6
 25c:	ce 01       	movw	r24, r28
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
