
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000180  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000804  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e51  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <gray>:
#define BTN_PIN PINB
#define BTN_PORT PORTB

void gray(int x)
{
	LED_PORT = x ^ (x >> 1);
  80:	9c 01       	movw	r18, r24
  82:	36 95       	lsr	r19
  84:	27 95       	ror	r18
  86:	82 27       	eor	r24, r18
  88:	8b b9       	out	0x0b, r24	; 11
  8a:	08 95       	ret

0000008c <main>:
	}
}

int main()
{
	UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  8c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  90:	87 7e       	andi	r24, 0xE7	; 231
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	BTN_PORT |= _BV(BTN_RESET) | _BV(BTN_LEFT) | _BV(BTN_RIGHT);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8c 61       	ori	r24, 0x1C	; 28
  9a:	85 b9       	out	0x05, r24	; 5
	// ustaw wszystkie piny portu D na wyjcie
	LED_DDR = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a b9       	out	0x0a, r24	; 10
	LED_PORT = 0;
  a0:	1b b8       	out	0x0b, r1	; 11
	int pfx = 0;
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
	

	while (1)
	{
		pfx %= 256;
  a6:	ca 01       	movw	r24, r20
  a8:	99 27       	eor	r25, r25
#define BTN_PIN PINB
#define BTN_PORT PORTB

void gray(int x)
{
	LED_PORT = x ^ (x >> 1);
  aa:	9c 01       	movw	r18, r24
  ac:	35 95       	asr	r19
  ae:	27 95       	ror	r18
  b0:	42 27       	eor	r20, r18
  b2:	4b b9       	out	0x0b, r20	; 11

	while (1)
	{
		pfx %= 256;
		gray(pfx);
		if (!(BTN_PIN & _BV(BTN_RESET)))
  b4:	1c 99       	sbic	0x03, 4	; 3
  b6:	5d c0       	rjmp	.+186    	; 0x172 <main+0xe6>
		{
			LED_PORT = 0;
  b8:	1b b8       	out	0x0b, r1	; 11
			pfx = 0;
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
			//debouncing();
			//_delay_ms(150);
		}
		if (!(BTN_PIN & _BV(BTN_RIGHT)))
  be:	1a 99       	sbic	0x03, 2	; 3
  c0:	28 c0       	rjmp	.+80     	; 0x112 <main+0x86>
		{
			pfx++;
  c2:	4f 5f       	subi	r20, 0xFF	; 255
  c4:	5f 4f       	sbci	r21, 0xFF	; 255
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
	LED_PORT = x ^ (x >> 1);
}

static inline void debouncing(int btn)
{
	int counter = 0;
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (counter > 20)
		{
			break;
		}
		if (BTN_PIN & _BV(btn))
  ce:	1a 9b       	sbis	0x03, 2	; 3
  d0:	12 c0       	rjmp	.+36     	; 0xf6 <main+0x6a>
			counter++;
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	ef e9       	ldi	r30, 0x9F	; 159
  d8:	ff e0       	ldi	r31, 0x0F	; 15
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x4e>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x54>
  e0:	00 00       	nop
}

static inline void debouncing(int btn)
{
	int counter = 0;
	for (int i = 0; i < 500; i++)
  e2:	84 3f       	cpi	r24, 0xF4	; 244
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	9f 07       	cpc	r25, r31
  e8:	a1 f0       	breq	.+40     	; 0x112 <main+0x86>
	{
		if (counter > 20)
  ea:	25 31       	cpi	r18, 0x15	; 21
  ec:	31 05       	cpc	r19, r1
  ee:	89 f0       	breq	.+34     	; 0x112 <main+0x86>
  f0:	01 96       	adiw	r24, 0x01	; 1
		{
			break;
		}
		if (BTN_PIN & _BV(btn))
  f2:	1a 99       	sbic	0x03, 2	; 3
  f4:	ee cf       	rjmp	.-36     	; 0xd2 <main+0x46>
  f6:	ef e9       	ldi	r30, 0x9F	; 159
  f8:	ff e0       	ldi	r31, 0x0F	; 15
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x6e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x74>
 100:	00 00       	nop
}

static inline void debouncing(int btn)
{
	int counter = 0;
	for (int i = 0; i < 500; i++)
 102:	84 3f       	cpi	r24, 0xF4	; 244
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	9f 07       	cpc	r25, r31
 108:	21 f0       	breq	.+8      	; 0x112 <main+0x86>
			break;
		}
		if (BTN_PIN & _BV(btn))
			counter++;
		else
			counter = 0;
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <main+0x66>
		{
			pfx++;
			debouncing(BTN_RIGHT);
			//_delay_ms(150);
		}
		if (!(BTN_PIN & _BV(BTN_LEFT)))
 112:	1b 99       	sbic	0x03, 3	; 3
 114:	c8 cf       	rjmp	.-112    	; 0xa6 <main+0x1a>
		{
			if (pfx == 0)
 116:	41 15       	cp	r20, r1
 118:	51 05       	cpc	r21, r1
 11a:	69 f1       	breq	.+90     	; 0x176 <main+0xea>
				pfx = 255;
			else
				pfx--;
 11c:	41 50       	subi	r20, 0x01	; 1
 11e:	51 09       	sbc	r21, r1
			break;
		}
		if (BTN_PIN & _BV(btn))
			counter++;
		else
			counter = 0;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
	LED_PORT = x ^ (x >> 1);
}

static inline void debouncing(int btn)
{
	int counter = 0;
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (counter > 20)
		{
			break;
		}
		if (BTN_PIN & _BV(btn))
 128:	1b 9b       	sbis	0x03, 3	; 3
 12a:	14 c0       	rjmp	.+40     	; 0x154 <main+0xc8>
			counter++;
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	ef e9       	ldi	r30, 0x9F	; 159
 132:	ff e0       	ldi	r31, 0x0F	; 15
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0xa8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xae>
 13a:	00 00       	nop
}

static inline void debouncing(int btn)
{
	int counter = 0;
	for (int i = 0; i < 500; i++)
 13c:	84 3f       	cpi	r24, 0xF4	; 244
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	9f 07       	cpc	r25, r31
 142:	09 f4       	brne	.+2      	; 0x146 <main+0xba>
 144:	b0 cf       	rjmp	.-160    	; 0xa6 <main+0x1a>
	{
		if (counter > 20)
 146:	25 31       	cpi	r18, 0x15	; 21
 148:	31 05       	cpc	r19, r1
 14a:	09 f4       	brne	.+2      	; 0x14e <main+0xc2>
 14c:	ac cf       	rjmp	.-168    	; 0xa6 <main+0x1a>
 14e:	01 96       	adiw	r24, 0x01	; 1
		{
			break;
		}
		if (BTN_PIN & _BV(btn))
 150:	1b 99       	sbic	0x03, 3	; 3
 152:	ec cf       	rjmp	.-40     	; 0x12c <main+0xa0>
 154:	ef e9       	ldi	r30, 0x9F	; 159
 156:	ff e0       	ldi	r31, 0x0F	; 15
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0xcc>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xd2>
 15e:	00 00       	nop
}

static inline void debouncing(int btn)
{
	int counter = 0;
	for (int i = 0; i < 500; i++)
 160:	84 3f       	cpi	r24, 0xF4	; 244
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	9f 07       	cpc	r25, r31
 166:	09 f4       	brne	.+2      	; 0x16a <main+0xde>
 168:	9e cf       	rjmp	.-196    	; 0xa6 <main+0x1a>
			break;
		}
		if (BTN_PIN & _BV(btn))
			counter++;
		else
			counter = 0;
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	ef cf       	rjmp	.-34     	; 0x150 <main+0xc4>
	int pfx = 0;
	

	while (1)
	{
		pfx %= 256;
 172:	ac 01       	movw	r20, r24
 174:	a4 cf       	rjmp	.-184    	; 0xbe <main+0x32>
			//_delay_ms(150);
		}
		if (!(BTN_PIN & _BV(BTN_LEFT)))
		{
			if (pfx == 0)
				pfx = 255;
 176:	4f ef       	ldi	r20, 0xFF	; 255
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	d2 cf       	rjmp	.-92     	; 0x120 <main+0x94>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
