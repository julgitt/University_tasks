
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006e4  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e42  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000229e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <gray>:
#define BTN_PIN PINB
#define BTN_PORT PORTB


void gray(int x) {
     LED_PORT = x ^ (x >> 1);
  80:	9c 01       	movw	r18, r24
  82:	36 95       	lsr	r19
  84:	27 95       	ror	r18
  86:	82 27       	eor	r24, r18
  88:	8b b9       	out	0x0b, r24	; 11
  8a:	08 95       	ret

0000008c <main>:
}

int main()
{
    UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  8c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  90:	87 7e       	andi	r24, 0xE7	; 231
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    BTN_PORT |= _BV(BTN_RESET) | _BV(BTN_LEFT) | _BV(BTN_RIGHT);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8c 61       	ori	r24, 0x1C	; 28
  9a:	85 b9       	out	0x05, r24	; 5
    // ustaw wszystkie piny portu D na wyjcie
    LED_DDR = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a b9       	out	0x0a, r24	; 10
    LED_PORT =  0;
  a0:	1b b8       	out	0x0b, r1	; 11
    int pfx = 0;
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <main+0x26>

    while(1) {
    	pfx %= 256;
  a8:	c9 01       	movw	r24, r18
    	if (!(BTN_PIN & _BV(BTN_RESET))) {
      		LED_PORT = 0;
      		pfx = 0;
      		_delay_ms(150);
      	}
    	if (!(BTN_PIN & _BV(BTN_RIGHT))) {
  aa:	1a 9b       	sbis	0x03, 2	; 3
  ac:	19 c0       	rjmp	.+50     	; 0xe0 <main+0x54>
      		pfx++;
      		_delay_ms(150);
      	}
      	if (!(BTN_PIN & _BV(BTN_LEFT))) {
  ae:	1b 9b       	sbis	0x03, 3	; 3
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <main+0x6c>
    LED_DDR = 0xFF;
    LED_PORT =  0;
    int pfx = 0;

    while(1) {
    	pfx %= 256;
  b2:	9c 01       	movw	r18, r24
  b4:	33 27       	eor	r19, r19
#define BTN_PIN PINB
#define BTN_PORT PORTB


void gray(int x) {
     LED_PORT = x ^ (x >> 1);
  b6:	a9 01       	movw	r20, r18
  b8:	55 95       	asr	r21
  ba:	47 95       	ror	r20
  bc:	84 27       	eor	r24, r20
  be:	8b b9       	out	0x0b, r24	; 11
    int pfx = 0;

    while(1) {
    	pfx %= 256;
    	gray(pfx);
    	if (!(BTN_PIN & _BV(BTN_RESET))) {
  c0:	1c 99       	sbic	0x03, 4	; 3
  c2:	f2 cf       	rjmp	.-28     	; 0xa8 <main+0x1c>
      		LED_PORT = 0;
  c4:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	32 e5       	ldi	r19, 0x52	; 82
  ca:	47 e0       	ldi	r20, 0x07	; 7
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x40>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x4a>
  d6:	00 00       	nop
      		pfx = 0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
      		_delay_ms(150);
      	}
    	if (!(BTN_PIN & _BV(BTN_RIGHT))) {
  dc:	1a 99       	sbic	0x03, 2	; 3
  de:	e7 cf       	rjmp	.-50     	; 0xae <main+0x22>
      		pfx++;
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	32 e5       	ldi	r19, 0x52	; 82
  e6:	47 e0       	ldi	r20, 0x07	; 7
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	40 40       	sbci	r20, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x5c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x66>
  f2:	00 00       	nop
      		_delay_ms(150);
      	}
      	if (!(BTN_PIN & _BV(BTN_LEFT))) {
  f4:	1b 99       	sbic	0x03, 3	; 3
  f6:	dd cf       	rjmp	.-70     	; 0xb2 <main+0x26>
      		if (pfx == 0)
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	59 f0       	breq	.+22     	; 0x112 <main+0x86>
      			pfx = 255;
      		else 
      			pfx--;
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	32 e5       	ldi	r19, 0x52	; 82
 102:	47 e0       	ldi	r20, 0x07	; 7
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	40 40       	sbci	r20, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x78>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x82>
 10e:	00 00       	nop
 110:	d0 cf       	rjmp	.-96     	; 0xb2 <main+0x26>
      		pfx++;
      		_delay_ms(150);
      	}
      	if (!(BTN_PIN & _BV(BTN_LEFT))) {
      		if (pfx == 0)
      			pfx = 255;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	f3 cf       	rjmp	.-26     	; 0xfe <main+0x72>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
