
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000069c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e61  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000022ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define SEVEN   right_down & right_up & up
#define EIGHT 	up & right_down & right_up & down & left_down & left_up & middle
#define NINE   	up & right_down & right_up & down & left_up & middle

int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ae:	87 7e       	andi	r24, 0xE7	; 231
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    R_DDR = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	87 b9       	out	0x07, r24	; 7
    LED_DDR = 0xFF;
  b8:	8a b9       	out	0x0a, r24	; 10
    
    LED_PORT = 0xFF;
  ba:	8b b9       	out	0x0b, r24	; 11
    R_PORT = _BV(R0_PIN) | _BV(R1_PIN);
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	88 b9       	out	0x08, r24	; 8
 
    int8_t numbers[10] = { ZERO, ONE, TWO, THREE, FOUR, 
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f1 e0       	ldi	r31, 0x01	; 1
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	8a 95       	dec	r24
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x34>
  d2:	8e 01       	movw	r16, r28
  d4:	09 5f       	subi	r16, 0xF9	; 249
  d6:	1f 4f       	sbci	r17, 0xFF	; 255
  d8:	be 01       	movw	r22, r28
  da:	65 5f       	subi	r22, 0xF5	; 245
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  
    while(1) {
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 10; j++) {
            	for (int t = 0; t < 50; t++){
            		R_PORT = 0b11111110;
  de:	4e ef       	ldi	r20, 0xFE	; 254
            		LED_PORT = numbers[i];
            		_delay_ms(10);
            		R_PORT = 0b11111101;
  e0:	3d ef       	ldi	r19, 0xFD	; 253
            		LED_PORT = numbers[j];
            		_delay_ms(10);
            	}
            }   
        }  
        LED_PORT = 0b11111111;
  e2:	5f ef       	ldi	r21, 0xFF	; 255
#define SEVEN   right_down & right_up & up
#define EIGHT 	up & right_down & right_up & down & left_down & left_up & middle
#define NINE   	up & right_down & right_up & down & left_up & middle

int main()
{
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	7c 01       	movw	r14, r24
  ea:	fe 01       	movw	r30, r28
  ec:	31 96       	adiw	r30, 0x01	; 1
  ee:	82 e3       	ldi	r24, 0x32	; 50
  f0:	90 e0       	ldi	r25, 0x00	; 0
  
    while(1) {
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 10; j++) {
            	for (int t = 0; t < 50; t++){
            		R_PORT = 0b11111110;
  f2:	48 b9       	out	0x08, r20	; 8
            		LED_PORT = numbers[i];
  f4:	d7 01       	movw	r26, r14
  f6:	2c 91       	ld	r18, X
  f8:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	af e3       	ldi	r26, 0x3F	; 63
  fc:	bc e9       	ldi	r27, 0x9C	; 156
  fe:	11 97       	sbiw	r26, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x68>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x6e>
 104:	00 00       	nop
            		_delay_ms(10);
            		R_PORT = 0b11111101;
 106:	38 b9       	out	0x08, r19	; 8
            		LED_PORT = numbers[j];
 108:	20 81       	ld	r18, Z
 10a:	2b b9       	out	0x0b, r18	; 11
 10c:	af e3       	ldi	r26, 0x3F	; 63
 10e:	bc e9       	ldi	r27, 0x9C	; 156
 110:	11 97       	sbiw	r26, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x7a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x80>
 116:	00 00       	nop
 118:	01 97       	sbiw	r24, 0x01	; 1
    			   FIVE, SIX, SEVEN, EIGHT, NINE };
  
    while(1) {
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 10; j++) {
            	for (int t = 0; t < 50; t++){
 11a:	59 f7       	brne	.-42     	; 0xf2 <main+0x5c>
 11c:	31 96       	adiw	r30, 0x01	; 1
    int8_t numbers[10] = { ZERO, ONE, TWO, THREE, FOUR, 
    			   FIVE, SIX, SEVEN, EIGHT, NINE };
  
    while(1) {
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 10; j++) {
 11e:	e6 17       	cp	r30, r22
 120:	f7 07       	cpc	r31, r23
 122:	29 f7       	brne	.-54     	; 0xee <main+0x58>
 124:	bf ef       	ldi	r27, 0xFF	; 255
 126:	eb 1a       	sub	r14, r27
 128:	fb 0a       	sbc	r15, r27
 
    int8_t numbers[10] = { ZERO, ONE, TWO, THREE, FOUR, 
    			   FIVE, SIX, SEVEN, EIGHT, NINE };
  
    while(1) {
        for (int i = 0; i < 6; i++) {
 12a:	0e 15       	cp	r16, r14
 12c:	1f 05       	cpc	r17, r15
 12e:	e9 f6       	brne	.-70     	; 0xea <main+0x54>
            		LED_PORT = numbers[j];
            		_delay_ms(10);
            	}
            }   
        }  
        LED_PORT = 0b11111111;
 130:	5b b9       	out	0x0b, r21	; 11
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	8d e3       	ldi	r24, 0x3D	; 61
 136:	99 e4       	ldi	r25, 0x49	; 73
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0xa2>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xac>
 142:	00 00       	nop
 144:	cf cf       	rjmp	.-98     	; 0xe4 <main+0x4e>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
