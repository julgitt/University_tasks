
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000069c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e61  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000022ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define left_up 	0b11011111
#define middle 		0b10111111
#define dot 		0b01111111

int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ae:	87 7e       	andi	r24, 0xE7	; 231
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    R_DDR = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	87 b9       	out	0x07, r24	; 7
    LED_DDR = 0xFF;
  b8:	8a b9       	out	0x0a, r24	; 10

    LED_PORT = 0xFF;
  ba:	8b b9       	out	0x0b, r24	; 11
    R_PORT = _BV(R0_PIN) | _BV(R1_PIN);
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	88 b9       	out	0x08, r24	; 8

    int8_t numbers[10] = {up & right_down & right_up & down & left_down & left_up & dot,
  c0:	8a e0       	ldi	r24, 0x0A	; 10
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f1 e0       	ldi	r31, 0x01	; 1
  c6:	de 01       	movw	r26, r28
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	8a 95       	dec	r24
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x34>
  d2:	be 01       	movw	r22, r28
  d4:	69 5f       	subi	r22, 0xF9	; 249
  d6:	7f 4f       	sbci	r23, 0xFF	; 255
  d8:	ae 01       	movw	r20, r28
  da:	45 5f       	subi	r20, 0xF5	; 245
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
        {
            for (int8_t j = 0; j < 10; j++)
            {
                for (int8_t t = 0; t < 50; t++)
                {
                    R_PORT = 0b11111110;
  de:	3e ef       	ldi	r19, 0xFE	; 254
                    LED_PORT = numbers[i];
                    _delay_ms(10);
                    R_PORT = 0b11111101;
  e0:	2d ef       	ldi	r18, 0xFD	; 253
                    LED_PORT = numbers[j];
                    _delay_ms(10);
                }
            }
        }
        LED_PORT = 0b11111111;
  e2:	1f ef       	ldi	r17, 0xFF	; 255
#define left_up 	0b11011111
#define middle 		0b10111111
#define dot 		0b01111111

int main()
{
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	7c 01       	movw	r14, r24
  ea:	fe 01       	movw	r30, r28
  ec:	31 96       	adiw	r30, 0x01	; 1
  ee:	82 e3       	ldi	r24, 0x32	; 50
        {
            for (int8_t j = 0; j < 10; j++)
            {
                for (int8_t t = 0; t < 50; t++)
                {
                    R_PORT = 0b11111110;
  f0:	38 b9       	out	0x08, r19	; 8
                    LED_PORT = numbers[i];
  f2:	d7 01       	movw	r26, r14
  f4:	9c 91       	ld	r25, X
  f6:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	af e3       	ldi	r26, 0x3F	; 63
  fa:	bc e9       	ldi	r27, 0x9C	; 156
  fc:	11 97       	sbiw	r26, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x66>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x6c>
 102:	00 00       	nop
                    _delay_ms(10);
                    R_PORT = 0b11111101;
 104:	28 b9       	out	0x08, r18	; 8
                    LED_PORT = numbers[j];
 106:	90 81       	ld	r25, Z
 108:	9b b9       	out	0x0b, r25	; 11
 10a:	af e3       	ldi	r26, 0x3F	; 63
 10c:	bc e9       	ldi	r27, 0x9C	; 156
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x78>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x7e>
 114:	00 00       	nop
 116:	81 50       	subi	r24, 0x01	; 1
    {
        for (int8_t i = 0; i < 6; i++)
        {
            for (int8_t j = 0; j < 10; j++)
            {
                for (int8_t t = 0; t < 50; t++)
 118:	59 f7       	brne	.-42     	; 0xf0 <main+0x5a>
 11a:	31 96       	adiw	r30, 0x01	; 1

    while (1)
    {
        for (int8_t i = 0; i < 6; i++)
        {
            for (int8_t j = 0; j < 10; j++)
 11c:	e4 17       	cp	r30, r20
 11e:	f5 07       	cpc	r31, r21
 120:	31 f7       	brne	.-52     	; 0xee <main+0x58>
 122:	bf ef       	ldi	r27, 0xFF	; 255
 124:	eb 1a       	sub	r14, r27
 126:	fb 0a       	sbc	r15, r27
                          up & right_down & right_up & down & left_down & left_up &middle & dot,
                          up & right_down & right_up & down & left_up &middle & dot};

    while (1)
    {
        for (int8_t i = 0; i < 6; i++)
 128:	e6 16       	cp	r14, r22
 12a:	f7 06       	cpc	r15, r23
 12c:	f1 f6       	brne	.-68     	; 0xea <main+0x54>
                    LED_PORT = numbers[j];
                    _delay_ms(10);
                }
            }
        }
        LED_PORT = 0b11111111;
 12e:	1b b9       	out	0x0b, r17	; 11
 130:	ef ef       	ldi	r30, 0xFF	; 255
 132:	8d e3       	ldi	r24, 0x3D	; 61
 134:	99 e4       	ldi	r25, 0x49	; 73
 136:	e1 50       	subi	r30, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0xa0>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0xaa>
 140:	00 00       	nop
 142:	d0 cf       	rjmp	.-96     	; 0xe4 <main+0x4e>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
