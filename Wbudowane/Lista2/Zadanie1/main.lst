
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005a0  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cc5  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define BTN PB4
#define BTN_PIN PINB
#define BTN_PORT PORTB

int main()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	c4 56       	subi	r28, 0x64	; 100
  8a:	d1 09       	sbc	r29, r1
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  BTN_PORT |= _BV(BTN);
  96:	2c 9a       	sbi	0x05, 4	; 5
  LED_DDR |= _BV(LED);
  98:	25 9a       	sbi	0x04, 5	; 4
  9a:	fe 01       	movw	r30, r28
  9c:	31 96       	adiw	r30, 0x01	; 1
  9e:	9e 01       	movw	r18, r28
  a0:	2b 59       	subi	r18, 0x9B	; 155
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  unsigned char arr[100];
  int i = 0;
  while (i < 100)
  {
    arr[i] = BTN_PIN & _BV(BTN);
  a4:	83 b1       	in	r24, 0x03	; 3
  a6:	80 71       	andi	r24, 0x10	; 16
  a8:	81 93       	st	Z+, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	9c e9       	ldi	r25, 0x9C	; 156
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
{
  BTN_PORT |= _BV(BTN);
  LED_DDR |= _BV(LED);
  unsigned char arr[100];
  int i = 0;
  while (i < 100)
  b6:	e2 17       	cp	r30, r18
  b8:	f3 07       	cpc	r31, r19
  ba:	a1 f7       	brne	.-24     	; 0xa4 <main+0x24>
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
    if (arr[i])
      LED_PORT &= ~_BV(LED);
    else
      LED_PORT |= _BV(LED);
    arr[i] = BTN_PIN & _BV(BTN);
    i = (i + 1) % 100;
  c0:	04 e6       	ldi	r16, 0x64	; 100
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	14 c0       	rjmp	.+40     	; 0xee <main+0x6e>

  i = 0;
  while (1)
  {
    if (arr[i])
      LED_PORT &= ~_BV(LED);
  c6:	2d 98       	cbi	0x05, 5	; 5
    else
      LED_PORT |= _BV(LED);
    arr[i] = BTN_PIN & _BV(BTN);
  c8:	23 b1       	in	r18, 0x03	; 3
  ca:	e1 e0       	ldi	r30, 0x01	; 1
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ec 0f       	add	r30, r28
  d0:	fd 1f       	adc	r31, r29
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	20 71       	andi	r18, 0x10	; 16
  d8:	20 83       	st	Z, r18
    i = (i + 1) % 100;
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	b8 01       	movw	r22, r16
  de:	0e 94 82 00 	call	0x104	; 0x104 <__divmodhi4>
  e2:	ef e3       	ldi	r30, 0x3F	; 63
  e4:	fc e9       	ldi	r31, 0x9C	; 156
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x66>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop
  }

  i = 0;
  while (1)
  {
    if (arr[i])
  ee:	e1 e0       	ldi	r30, 0x01	; 1
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	e8 0f       	add	r30, r24
  f8:	f9 1f       	adc	r31, r25
  fa:	20 81       	ld	r18, Z
  fc:	21 11       	cpse	r18, r1
  fe:	e3 cf       	rjmp	.-58     	; 0xc6 <main+0x46>
      LED_PORT &= ~_BV(LED);
    else
      LED_PORT |= _BV(LED);
 100:	2d 9a       	sbi	0x05, 5	; 5
 102:	e2 cf       	rjmp	.-60     	; 0xc8 <main+0x48>

00000104 <__divmodhi4>:
 104:	97 fb       	bst	r25, 7
 106:	07 2e       	mov	r0, r23
 108:	16 f4       	brtc	.+4      	; 0x10e <__divmodhi4+0xa>
 10a:	00 94       	com	r0
 10c:	07 d0       	rcall	.+14     	; 0x11c <__divmodhi4_neg1>
 10e:	77 fd       	sbrc	r23, 7
 110:	09 d0       	rcall	.+18     	; 0x124 <__divmodhi4_neg2>
 112:	0e 94 96 00 	call	0x12c	; 0x12c <__udivmodhi4>
 116:	07 fc       	sbrc	r0, 7
 118:	05 d0       	rcall	.+10     	; 0x124 <__divmodhi4_neg2>
 11a:	3e f4       	brtc	.+14     	; 0x12a <__divmodhi4_exit>

0000011c <__divmodhi4_neg1>:
 11c:	90 95       	com	r25
 11e:	81 95       	neg	r24
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	08 95       	ret

00000124 <__divmodhi4_neg2>:
 124:	70 95       	com	r23
 126:	61 95       	neg	r22
 128:	7f 4f       	sbci	r23, 0xFF	; 255

0000012a <__divmodhi4_exit>:
 12a:	08 95       	ret

0000012c <__udivmodhi4>:
 12c:	aa 1b       	sub	r26, r26
 12e:	bb 1b       	sub	r27, r27
 130:	51 e1       	ldi	r21, 0x11	; 17
 132:	07 c0       	rjmp	.+14     	; 0x142 <__udivmodhi4_ep>

00000134 <__udivmodhi4_loop>:
 134:	aa 1f       	adc	r26, r26
 136:	bb 1f       	adc	r27, r27
 138:	a6 17       	cp	r26, r22
 13a:	b7 07       	cpc	r27, r23
 13c:	10 f0       	brcs	.+4      	; 0x142 <__udivmodhi4_ep>
 13e:	a6 1b       	sub	r26, r22
 140:	b7 0b       	sbc	r27, r23

00000142 <__udivmodhi4_ep>:
 142:	88 1f       	adc	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	5a 95       	dec	r21
 148:	a9 f7       	brne	.-22     	; 0x134 <__udivmodhi4_loop>
 14a:	80 95       	com	r24
 14c:	90 95       	com	r25
 14e:	bc 01       	movw	r22, r24
 150:	cd 01       	movw	r24, r26
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
