#lang racket
(provide
 mqueue?
 nonempty-mqueue/c
 (contract-out
  [mqueue-empty? (-> mqueue? boolean?)]
  [mqueue-make   (-> mqueue?)]
  [mqueue-push-front   (-> mqueue? any/c any/c)]
  [mqueue-push-back   (-> mqueue? any/c any/c)]
  [mqueue-pop-front    (-> nonempty-mqueue/c any/c)]
  [mqueue-pop-back    (-> nonempty-mqueue/c any/c)]
  [mqueue-peek-front   (-> nonempty-mqueue/c any/c)]
  [mqueue-peek-back   (-> nonempty-mqueue/c any/c)]
  [mqueue-join   (-> nonempty-mqueue/c nonempty-mqueue/c any/c)]))

(define (insert-after p1 p2)
  (define p3 (mcdr p1))
  (set-mcdr! p2 p3)
  (set-mcdr! p1 p2))

(struct mqueue
  ([front #:mutable] [back #:mutable]))

(define (mqueue-empty? q)
  (null? (mqueue-front q)))

(define nonempty-mqueue/c
  (and/c mqueue? (not/c mqueue-empty?)))

(define (mqueue-make)
  (mqueue null null))

(define (mqueue-push-back q x)
  (define p (mcons null (mcons x null)))
  (cond [(mqueue-empty? q)
         (set-mqueue-front! q p)]
        [else
         (set-mcar! p (mqueue-back q))
         (set-mcdr! (mcdr(mqueue-back q)) p)])
  (set-mqueue-back! q p))

(define (mqueue-push-front q x)
  (define p (mcons null (mcons x null)))
  (cond [(mqueue-empty? q)
         (set-mqueue-front! q p)]
        [else
         (set-mcdr!(mcdr p) (mqueue-front q))
         (set-mqueue-front! q p)]))

(define/contract (mqueue-pop-front q)
  (-> nonempty-mqueue/c any/c)
  (define p (mqueue-front q))
  (set-mqueue-front! q (mcdr (mcdr p)))
  (cond [(mqueue-empty? q)
         (mcar (mcdr p))]
        [else     
         (set-mcar! (mqueue-front q) null)
         (mcar (mcdr p))]))

(define/contract (mqueue-pop-back q)
  (-> nonempty-mqueue/c any/c)
  (define p (mqueue-front q))
  (cond [(null? (mqueue-back q))
         (set-mqueue-front! q null)
         (mcar (mcdr p))]
        [(eq? p (mcar(mqueue-back q)))
         (define p (mqueue-back q))
         (set-mqueue-back! q null)]
        [else
         (define p (mqueue-back q))
         (set-mqueue-back! q (mcar p))])
  (mcar (mcdr p)))
         


(define (mqueue-peek-front q)
  (mcar (mcdr(mqueue-front q))))

(define (mqueue-peek-back q)
  (mcar (mcdr(mqueue-back q))))

(define (mqueue-join q1 q2)
  (set-mcdr! (mcdr(mqueue-back q1)) (mqueue-front q2))
  (set-mcar! (mqueue-front q2) (mqueue-back q1))
  (set-mqueue-back! q1 (mqueue-back q2))
  (set-mqueue-front! q2 null))